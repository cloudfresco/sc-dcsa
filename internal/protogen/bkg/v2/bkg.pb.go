// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: bkg/v2/bkg.proto

package v2

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateBookingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarrierBookingRequestReference            string                             `protobuf:"bytes,1,opt,name=carrier_booking_request_reference,json=carrierBookingRequestReference,proto3" json:"carrier_booking_request_reference,omitempty"`
	DocumentStatus                            string                             `protobuf:"bytes,2,opt,name=document_status,json=documentStatus,proto3" json:"document_status,omitempty"`
	ReceiptTypeAtOrigin                       string                             `protobuf:"bytes,3,opt,name=receipt_type_at_origin,json=receiptTypeAtOrigin,proto3" json:"receipt_type_at_origin,omitempty"`
	DeliveryTypeAtDestination                 string                             `protobuf:"bytes,4,opt,name=delivery_type_at_destination,json=deliveryTypeAtDestination,proto3" json:"delivery_type_at_destination,omitempty"`
	CargoMovementTypeAtOrigin                 string                             `protobuf:"bytes,5,opt,name=cargo_movement_type_at_origin,json=cargoMovementTypeAtOrigin,proto3" json:"cargo_movement_type_at_origin,omitempty"`
	CargoMovementTypeAtDestination            string                             `protobuf:"bytes,6,opt,name=cargo_movement_type_at_destination,json=cargoMovementTypeAtDestination,proto3" json:"cargo_movement_type_at_destination,omitempty"`
	ServiceContractReference                  string                             `protobuf:"bytes,7,opt,name=service_contract_reference,json=serviceContractReference,proto3" json:"service_contract_reference,omitempty"`
	PaymentTermCode                           string                             `protobuf:"bytes,8,opt,name=payment_term_code,json=paymentTermCode,proto3" json:"payment_term_code,omitempty"`
	IsPartialLoadAllowed                      bool                               `protobuf:"varint,9,opt,name=is_partial_load_allowed,json=isPartialLoadAllowed,proto3" json:"is_partial_load_allowed,omitempty"`
	IsExportDeclarationRequired               bool                               `protobuf:"varint,10,opt,name=is_export_declaration_required,json=isExportDeclarationRequired,proto3" json:"is_export_declaration_required,omitempty"`
	ExportDeclarationReference                string                             `protobuf:"bytes,11,opt,name=export_declaration_reference,json=exportDeclarationReference,proto3" json:"export_declaration_reference,omitempty"`
	IsImportLicenseRequired                   bool                               `protobuf:"varint,12,opt,name=is_import_license_required,json=isImportLicenseRequired,proto3" json:"is_import_license_required,omitempty"`
	ImportLicenseReference                    string                             `protobuf:"bytes,13,opt,name=import_license_reference,json=importLicenseReference,proto3" json:"import_license_reference,omitempty"`
	SubmissionDateTime                        string                             `protobuf:"bytes,14,opt,name=submission_date_time,json=submissionDateTime,proto3" json:"submission_date_time,omitempty"`
	IsAmsAciFilingRequired                    bool                               `protobuf:"varint,15,opt,name=is_ams_aci_filing_required,json=isAmsAciFilingRequired,proto3" json:"is_ams_aci_filing_required,omitempty"`
	IsDestinationFilingRequired               bool                               `protobuf:"varint,16,opt,name=is_destination_filing_required,json=isDestinationFilingRequired,proto3" json:"is_destination_filing_required,omitempty"`
	ContractQuotationReference                string                             `protobuf:"bytes,17,opt,name=contract_quotation_reference,json=contractQuotationReference,proto3" json:"contract_quotation_reference,omitempty"`
	ExpectedDepartureDate                     string                             `protobuf:"bytes,18,opt,name=expected_departure_date,json=expectedDepartureDate,proto3" json:"expected_departure_date,omitempty"`
	ExpectedArrivalAtPlaceOfDeliveryStartDate string                             `protobuf:"bytes,19,opt,name=expected_arrival_at_place_of_delivery_start_date,json=expectedArrivalAtPlaceOfDeliveryStartDate,proto3" json:"expected_arrival_at_place_of_delivery_start_date,omitempty"`
	ExpectedArrivalAtPlaceOfDeliveryEndDate   string                             `protobuf:"bytes,20,opt,name=expected_arrival_at_place_of_delivery_end_date,json=expectedArrivalAtPlaceOfDeliveryEndDate,proto3" json:"expected_arrival_at_place_of_delivery_end_date,omitempty"`
	TransportDocumentTypeCode                 string                             `protobuf:"bytes,21,opt,name=transport_document_type_code,json=transportDocumentTypeCode,proto3" json:"transport_document_type_code,omitempty"`
	TransportDocumentReference                string                             `protobuf:"bytes,22,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	BookingChannelReference                   string                             `protobuf:"bytes,23,opt,name=booking_channel_reference,json=bookingChannelReference,proto3" json:"booking_channel_reference,omitempty"`
	IncoTerms                                 string                             `protobuf:"bytes,24,opt,name=inco_terms,json=incoTerms,proto3" json:"inco_terms,omitempty"`
	CommunicationChannelCode                  string                             `protobuf:"bytes,25,opt,name=communication_channel_code,json=communicationChannelCode,proto3" json:"communication_channel_code,omitempty"`
	IsEquipmentSubstitutionAllowed            bool                               `protobuf:"varint,26,opt,name=is_equipment_substitution_allowed,json=isEquipmentSubstitutionAllowed,proto3" json:"is_equipment_substitution_allowed,omitempty"`
	VesselName                                string                             `protobuf:"bytes,27,opt,name=vessel_name,json=vesselName,proto3" json:"vessel_name,omitempty"`
	VesselImoNumber                           string                             `protobuf:"bytes,28,opt,name=vessel_imo_number,json=vesselImoNumber,proto3" json:"vessel_imo_number,omitempty"`
	ExportVoyageNumber                        string                             `protobuf:"bytes,29,opt,name=export_voyage_number,json=exportVoyageNumber,proto3" json:"export_voyage_number,omitempty"`
	PreCarriageModeOfTransportCode            string                             `protobuf:"bytes,30,opt,name=pre_carriage_mode_of_transport_code,json=preCarriageModeOfTransportCode,proto3" json:"pre_carriage_mode_of_transport_code,omitempty"`
	VesselId                                  uint32                             `protobuf:"varint,31,opt,name=vessel_id,json=vesselId,proto3" json:"vessel_id,omitempty"`
	DeclaredValueCurrencyCode                 string                             `protobuf:"bytes,32,opt,name=declared_value_currency_code,json=declaredValueCurrencyCode,proto3" json:"declared_value_currency_code,omitempty"`
	DeclaredValue                             float64                            `protobuf:"fixed64,33,opt,name=declared_value,json=declaredValue,proto3" json:"declared_value,omitempty"`
	VoyageId                                  uint32                             `protobuf:"varint,34,opt,name=voyage_id,json=voyageId,proto3" json:"voyage_id,omitempty"`
	LocationId                                uint32                             `protobuf:"varint,35,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	InvoicePayableAt                          string                             `protobuf:"bytes,36,opt,name=invoice_payable_at,json=invoicePayableAt,proto3" json:"invoice_payable_at,omitempty"`
	UserId                                    string                             `protobuf:"bytes,37,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                                 string                             `protobuf:"bytes,38,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                                 string                             `protobuf:"bytes,39,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Commodities                               []*CreateCommodityRequest          `protobuf:"bytes,40,rep,name=commodities,proto3" json:"commodities,omitempty"`
	ValueAddedServiceRequests                 []*CreateValueAddedServiceRequest  `protobuf:"bytes,41,rep,name=value_added_service_requests,json=valueAddedServiceRequests,proto3" json:"value_added_service_requests,omitempty"`
	References                                []*CreateReferenceRequest          `protobuf:"bytes,42,rep,name=references,proto3" json:"references,omitempty"`
	RequestedEquipments                       []*CreateRequestedEquipmentRequest `protobuf:"bytes,43,rep,name=requested_equipments,json=requestedEquipments,proto3" json:"requested_equipments,omitempty"`
	ShipmentLocations                         []*CreateShipmentLocationRequest   `protobuf:"bytes,44,rep,name=shipment_locations,json=shipmentLocations,proto3" json:"shipment_locations,omitempty"`
}

func (x *CreateBookingRequest) Reset() {
	*x = CreateBookingRequest{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBookingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBookingRequest) ProtoMessage() {}

func (x *CreateBookingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBookingRequest.ProtoReflect.Descriptor instead.
func (*CreateBookingRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{0}
}

func (x *CreateBookingRequest) GetCarrierBookingRequestReference() string {
	if x != nil {
		return x.CarrierBookingRequestReference
	}
	return ""
}

func (x *CreateBookingRequest) GetDocumentStatus() string {
	if x != nil {
		return x.DocumentStatus
	}
	return ""
}

func (x *CreateBookingRequest) GetReceiptTypeAtOrigin() string {
	if x != nil {
		return x.ReceiptTypeAtOrigin
	}
	return ""
}

func (x *CreateBookingRequest) GetDeliveryTypeAtDestination() string {
	if x != nil {
		return x.DeliveryTypeAtDestination
	}
	return ""
}

func (x *CreateBookingRequest) GetCargoMovementTypeAtOrigin() string {
	if x != nil {
		return x.CargoMovementTypeAtOrigin
	}
	return ""
}

func (x *CreateBookingRequest) GetCargoMovementTypeAtDestination() string {
	if x != nil {
		return x.CargoMovementTypeAtDestination
	}
	return ""
}

func (x *CreateBookingRequest) GetServiceContractReference() string {
	if x != nil {
		return x.ServiceContractReference
	}
	return ""
}

func (x *CreateBookingRequest) GetPaymentTermCode() string {
	if x != nil {
		return x.PaymentTermCode
	}
	return ""
}

func (x *CreateBookingRequest) GetIsPartialLoadAllowed() bool {
	if x != nil {
		return x.IsPartialLoadAllowed
	}
	return false
}

func (x *CreateBookingRequest) GetIsExportDeclarationRequired() bool {
	if x != nil {
		return x.IsExportDeclarationRequired
	}
	return false
}

func (x *CreateBookingRequest) GetExportDeclarationReference() string {
	if x != nil {
		return x.ExportDeclarationReference
	}
	return ""
}

func (x *CreateBookingRequest) GetIsImportLicenseRequired() bool {
	if x != nil {
		return x.IsImportLicenseRequired
	}
	return false
}

func (x *CreateBookingRequest) GetImportLicenseReference() string {
	if x != nil {
		return x.ImportLicenseReference
	}
	return ""
}

func (x *CreateBookingRequest) GetSubmissionDateTime() string {
	if x != nil {
		return x.SubmissionDateTime
	}
	return ""
}

func (x *CreateBookingRequest) GetIsAmsAciFilingRequired() bool {
	if x != nil {
		return x.IsAmsAciFilingRequired
	}
	return false
}

func (x *CreateBookingRequest) GetIsDestinationFilingRequired() bool {
	if x != nil {
		return x.IsDestinationFilingRequired
	}
	return false
}

func (x *CreateBookingRequest) GetContractQuotationReference() string {
	if x != nil {
		return x.ContractQuotationReference
	}
	return ""
}

func (x *CreateBookingRequest) GetExpectedDepartureDate() string {
	if x != nil {
		return x.ExpectedDepartureDate
	}
	return ""
}

func (x *CreateBookingRequest) GetExpectedArrivalAtPlaceOfDeliveryStartDate() string {
	if x != nil {
		return x.ExpectedArrivalAtPlaceOfDeliveryStartDate
	}
	return ""
}

func (x *CreateBookingRequest) GetExpectedArrivalAtPlaceOfDeliveryEndDate() string {
	if x != nil {
		return x.ExpectedArrivalAtPlaceOfDeliveryEndDate
	}
	return ""
}

func (x *CreateBookingRequest) GetTransportDocumentTypeCode() string {
	if x != nil {
		return x.TransportDocumentTypeCode
	}
	return ""
}

func (x *CreateBookingRequest) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *CreateBookingRequest) GetBookingChannelReference() string {
	if x != nil {
		return x.BookingChannelReference
	}
	return ""
}

func (x *CreateBookingRequest) GetIncoTerms() string {
	if x != nil {
		return x.IncoTerms
	}
	return ""
}

func (x *CreateBookingRequest) GetCommunicationChannelCode() string {
	if x != nil {
		return x.CommunicationChannelCode
	}
	return ""
}

func (x *CreateBookingRequest) GetIsEquipmentSubstitutionAllowed() bool {
	if x != nil {
		return x.IsEquipmentSubstitutionAllowed
	}
	return false
}

func (x *CreateBookingRequest) GetVesselName() string {
	if x != nil {
		return x.VesselName
	}
	return ""
}

func (x *CreateBookingRequest) GetVesselImoNumber() string {
	if x != nil {
		return x.VesselImoNumber
	}
	return ""
}

func (x *CreateBookingRequest) GetExportVoyageNumber() string {
	if x != nil {
		return x.ExportVoyageNumber
	}
	return ""
}

func (x *CreateBookingRequest) GetPreCarriageModeOfTransportCode() string {
	if x != nil {
		return x.PreCarriageModeOfTransportCode
	}
	return ""
}

func (x *CreateBookingRequest) GetVesselId() uint32 {
	if x != nil {
		return x.VesselId
	}
	return 0
}

func (x *CreateBookingRequest) GetDeclaredValueCurrencyCode() string {
	if x != nil {
		return x.DeclaredValueCurrencyCode
	}
	return ""
}

func (x *CreateBookingRequest) GetDeclaredValue() float64 {
	if x != nil {
		return x.DeclaredValue
	}
	return 0
}

func (x *CreateBookingRequest) GetVoyageId() uint32 {
	if x != nil {
		return x.VoyageId
	}
	return 0
}

func (x *CreateBookingRequest) GetLocationId() uint32 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *CreateBookingRequest) GetInvoicePayableAt() string {
	if x != nil {
		return x.InvoicePayableAt
	}
	return ""
}

func (x *CreateBookingRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateBookingRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateBookingRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateBookingRequest) GetCommodities() []*CreateCommodityRequest {
	if x != nil {
		return x.Commodities
	}
	return nil
}

func (x *CreateBookingRequest) GetValueAddedServiceRequests() []*CreateValueAddedServiceRequest {
	if x != nil {
		return x.ValueAddedServiceRequests
	}
	return nil
}

func (x *CreateBookingRequest) GetReferences() []*CreateReferenceRequest {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *CreateBookingRequest) GetRequestedEquipments() []*CreateRequestedEquipmentRequest {
	if x != nil {
		return x.RequestedEquipments
	}
	return nil
}

func (x *CreateBookingRequest) GetShipmentLocations() []*CreateShipmentLocationRequest {
	if x != nil {
		return x.ShipmentLocations
	}
	return nil
}

type CreateBookingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Booking *Booking `protobuf:"bytes,1,opt,name=booking,proto3" json:"booking,omitempty"`
}

func (x *CreateBookingResponse) Reset() {
	*x = CreateBookingResponse{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBookingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBookingResponse) ProtoMessage() {}

func (x *CreateBookingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBookingResponse.ProtoReflect.Descriptor instead.
func (*CreateBookingResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBookingResponse) GetBooking() *Booking {
	if x != nil {
		return x.Booking
	}
	return nil
}

type GetBookingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetBookingsRequest) Reset() {
	*x = GetBookingsRequest{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingsRequest) ProtoMessage() {}

func (x *GetBookingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingsRequest.ProtoReflect.Descriptor instead.
func (*GetBookingsRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{2}
}

func (x *GetBookingsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetBookingsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetBookingsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetBookingsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetBookingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookings   []*Booking `protobuf:"bytes,1,rep,name=bookings,proto3" json:"bookings,omitempty"`
	NextCursor string     `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetBookingsResponse) Reset() {
	*x = GetBookingsResponse{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingsResponse) ProtoMessage() {}

func (x *GetBookingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingsResponse.ProtoReflect.Descriptor instead.
func (*GetBookingsResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{3}
}

func (x *GetBookingsResponse) GetBookings() []*Booking {
	if x != nil {
		return x.Bookings
	}
	return nil
}

func (x *GetBookingsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetBookingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetBookingRequest) Reset() {
	*x = GetBookingRequest{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingRequest) ProtoMessage() {}

func (x *GetBookingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingRequest.ProtoReflect.Descriptor instead.
func (*GetBookingRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{4}
}

func (x *GetBookingRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetBookingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Booking *Booking `protobuf:"bytes,1,opt,name=booking,proto3" json:"booking,omitempty"`
}

func (x *GetBookingResponse) Reset() {
	*x = GetBookingResponse{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingResponse) ProtoMessage() {}

func (x *GetBookingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingResponse.ProtoReflect.Descriptor instead.
func (*GetBookingResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{5}
}

func (x *GetBookingResponse) GetBooking() *Booking {
	if x != nil {
		return x.Booking
	}
	return nil
}

type GetBookingByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetBookingByPkRequest) Reset() {
	*x = GetBookingByPkRequest{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookingByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingByPkRequest) ProtoMessage() {}

func (x *GetBookingByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingByPkRequest.ProtoReflect.Descriptor instead.
func (*GetBookingByPkRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{6}
}

func (x *GetBookingByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetBookingByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Booking *Booking `protobuf:"bytes,1,opt,name=booking,proto3" json:"booking,omitempty"`
}

func (x *GetBookingByPkResponse) Reset() {
	*x = GetBookingByPkResponse{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookingByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingByPkResponse) ProtoMessage() {}

func (x *GetBookingByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingByPkResponse.ProtoReflect.Descriptor instead.
func (*GetBookingByPkResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{7}
}

func (x *GetBookingByPkResponse) GetBooking() *Booking {
	if x != nil {
		return x.Booking
	}
	return nil
}

type GetBookingByCarrierBookingRequestReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarrierBookingRequestReference string `protobuf:"bytes,1,opt,name=carrier_booking_request_reference,json=carrierBookingRequestReference,proto3" json:"carrier_booking_request_reference,omitempty"`
	UserEmail                      string `protobuf:"bytes,2,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                      string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetBookingByCarrierBookingRequestReferenceRequest) Reset() {
	*x = GetBookingByCarrierBookingRequestReferenceRequest{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookingByCarrierBookingRequestReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingByCarrierBookingRequestReferenceRequest) ProtoMessage() {}

func (x *GetBookingByCarrierBookingRequestReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingByCarrierBookingRequestReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetBookingByCarrierBookingRequestReferenceRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{8}
}

func (x *GetBookingByCarrierBookingRequestReferenceRequest) GetCarrierBookingRequestReference() string {
	if x != nil {
		return x.CarrierBookingRequestReference
	}
	return ""
}

func (x *GetBookingByCarrierBookingRequestReferenceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetBookingByCarrierBookingRequestReferenceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetBookingByCarrierBookingRequestReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Booking *Booking `protobuf:"bytes,1,opt,name=booking,proto3" json:"booking,omitempty"`
}

func (x *GetBookingByCarrierBookingRequestReferenceResponse) Reset() {
	*x = GetBookingByCarrierBookingRequestReferenceResponse{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookingByCarrierBookingRequestReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingByCarrierBookingRequestReferenceResponse) ProtoMessage() {}

func (x *GetBookingByCarrierBookingRequestReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingByCarrierBookingRequestReferenceResponse.ProtoReflect.Descriptor instead.
func (*GetBookingByCarrierBookingRequestReferenceResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{9}
}

func (x *GetBookingByCarrierBookingRequestReferenceResponse) GetBooking() *Booking {
	if x != nil {
		return x.Booking
	}
	return nil
}

type CancelBookingByCarrierBookingReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarrierBookingRequestReference string `protobuf:"bytes,1,opt,name=carrier_booking_request_reference,json=carrierBookingRequestReference,proto3" json:"carrier_booking_request_reference,omitempty"`
	UserId                         string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                      string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                      string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CancelBookingByCarrierBookingReferenceRequest) Reset() {
	*x = CancelBookingByCarrierBookingReferenceRequest{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelBookingByCarrierBookingReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBookingByCarrierBookingReferenceRequest) ProtoMessage() {}

func (x *CancelBookingByCarrierBookingReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBookingByCarrierBookingReferenceRequest.ProtoReflect.Descriptor instead.
func (*CancelBookingByCarrierBookingReferenceRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{10}
}

func (x *CancelBookingByCarrierBookingReferenceRequest) GetCarrierBookingRequestReference() string {
	if x != nil {
		return x.CarrierBookingRequestReference
	}
	return ""
}

func (x *CancelBookingByCarrierBookingReferenceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CancelBookingByCarrierBookingReferenceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CancelBookingByCarrierBookingReferenceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CancelBookingByCarrierBookingReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Booking *Booking `protobuf:"bytes,1,opt,name=booking,proto3" json:"booking,omitempty"`
}

func (x *CancelBookingByCarrierBookingReferenceResponse) Reset() {
	*x = CancelBookingByCarrierBookingReferenceResponse{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelBookingByCarrierBookingReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBookingByCarrierBookingReferenceResponse) ProtoMessage() {}

func (x *CancelBookingByCarrierBookingReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBookingByCarrierBookingReferenceResponse.ProtoReflect.Descriptor instead.
func (*CancelBookingByCarrierBookingReferenceResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{11}
}

func (x *CancelBookingByCarrierBookingReferenceResponse) GetBooking() *Booking {
	if x != nil {
		return x.Booking
	}
	return nil
}

type UpdateBookingByReferenceCarrierBookingRequestReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarrierBookingRequestReference string `protobuf:"bytes,1,opt,name=carrier_booking_request_reference,json=carrierBookingRequestReference,proto3" json:"carrier_booking_request_reference,omitempty"`
	DocumentStatus                 string `protobuf:"bytes,2,opt,name=document_status,json=documentStatus,proto3" json:"document_status,omitempty"`
	ReceiptTypeAtOrigin            string `protobuf:"bytes,3,opt,name=receipt_type_at_origin,json=receiptTypeAtOrigin,proto3" json:"receipt_type_at_origin,omitempty"`
	DeliveryTypeAtDestination      string `protobuf:"bytes,4,opt,name=delivery_type_at_destination,json=deliveryTypeAtDestination,proto3" json:"delivery_type_at_destination,omitempty"`
	CargoMovementTypeAtOrigin      string `protobuf:"bytes,5,opt,name=cargo_movement_type_at_origin,json=cargoMovementTypeAtOrigin,proto3" json:"cargo_movement_type_at_origin,omitempty"`
	CargoMovementTypeAtDestination string `protobuf:"bytes,6,opt,name=cargo_movement_type_at_destination,json=cargoMovementTypeAtDestination,proto3" json:"cargo_movement_type_at_destination,omitempty"`
	ServiceContractReference       string `protobuf:"bytes,7,opt,name=service_contract_reference,json=serviceContractReference,proto3" json:"service_contract_reference,omitempty"`
	PaymentTermCode                string `protobuf:"bytes,8,opt,name=payment_term_code,json=paymentTermCode,proto3" json:"payment_term_code,omitempty"`
	UserId                         string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                      string `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                      string `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) Reset() {
	*x = UpdateBookingByReferenceCarrierBookingRequestReferenceRequest{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) ProtoMessage() {}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBookingByReferenceCarrierBookingRequestReferenceRequest.ProtoReflect.Descriptor instead.
func (*UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) GetCarrierBookingRequestReference() string {
	if x != nil {
		return x.CarrierBookingRequestReference
	}
	return ""
}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) GetDocumentStatus() string {
	if x != nil {
		return x.DocumentStatus
	}
	return ""
}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) GetReceiptTypeAtOrigin() string {
	if x != nil {
		return x.ReceiptTypeAtOrigin
	}
	return ""
}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) GetDeliveryTypeAtDestination() string {
	if x != nil {
		return x.DeliveryTypeAtDestination
	}
	return ""
}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) GetCargoMovementTypeAtOrigin() string {
	if x != nil {
		return x.CargoMovementTypeAtOrigin
	}
	return ""
}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) GetCargoMovementTypeAtDestination() string {
	if x != nil {
		return x.CargoMovementTypeAtDestination
	}
	return ""
}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) GetServiceContractReference() string {
	if x != nil {
		return x.ServiceContractReference
	}
	return ""
}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) GetPaymentTermCode() string {
	if x != nil {
		return x.PaymentTermCode
	}
	return ""
}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateBookingByReferenceCarrierBookingRequestReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceResponse) Reset() {
	*x = UpdateBookingByReferenceCarrierBookingRequestReferenceResponse{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBookingByReferenceCarrierBookingRequestReferenceResponse) ProtoMessage() {}

func (x *UpdateBookingByReferenceCarrierBookingRequestReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBookingByReferenceCarrierBookingRequestReferenceResponse.ProtoReflect.Descriptor instead.
func (*UpdateBookingByReferenceCarrierBookingRequestReferenceResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{13}
}

type CreateCommodityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId               uint32  `protobuf:"varint,1,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	CommodityType           string  `protobuf:"bytes,2,opt,name=commodity_type,json=commodityType,proto3" json:"commodity_type,omitempty"`
	HsCode                  string  `protobuf:"bytes,3,opt,name=hs_code,json=hsCode,proto3" json:"hs_code,omitempty"`
	CargoGrossWeight        float64 `protobuf:"fixed64,4,opt,name=cargo_gross_weight,json=cargoGrossWeight,proto3" json:"cargo_gross_weight,omitempty"`
	CargoGrossWeightUnit    string  `protobuf:"bytes,5,opt,name=cargo_gross_weight_unit,json=cargoGrossWeightUnit,proto3" json:"cargo_gross_weight_unit,omitempty"`
	CargoGrossVolume        float64 `protobuf:"fixed64,6,opt,name=cargo_gross_volume,json=cargoGrossVolume,proto3" json:"cargo_gross_volume,omitempty"`
	CargoGrossVolumeUnit    string  `protobuf:"bytes,7,opt,name=cargo_gross_volume_unit,json=cargoGrossVolumeUnit,proto3" json:"cargo_gross_volume_unit,omitempty"`
	NumberOfPackages        uint32  `protobuf:"varint,8,opt,name=number_of_packages,json=numberOfPackages,proto3" json:"number_of_packages,omitempty"`
	ExportLicenseIssueDate  string  `protobuf:"bytes,9,opt,name=export_license_issue_date,json=exportLicenseIssueDate,proto3" json:"export_license_issue_date,omitempty"`
	ExportLicenseExpiryDate string  `protobuf:"bytes,10,opt,name=export_license_expiry_date,json=exportLicenseExpiryDate,proto3" json:"export_license_expiry_date,omitempty"`
	UserId                  string  `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail               string  `protobuf:"bytes,12,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId               string  `protobuf:"bytes,13,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateCommodityRequest) Reset() {
	*x = CreateCommodityRequest{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCommodityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommodityRequest) ProtoMessage() {}

func (x *CreateCommodityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommodityRequest.ProtoReflect.Descriptor instead.
func (*CreateCommodityRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{14}
}

func (x *CreateCommodityRequest) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

func (x *CreateCommodityRequest) GetCommodityType() string {
	if x != nil {
		return x.CommodityType
	}
	return ""
}

func (x *CreateCommodityRequest) GetHsCode() string {
	if x != nil {
		return x.HsCode
	}
	return ""
}

func (x *CreateCommodityRequest) GetCargoGrossWeight() float64 {
	if x != nil {
		return x.CargoGrossWeight
	}
	return 0
}

func (x *CreateCommodityRequest) GetCargoGrossWeightUnit() string {
	if x != nil {
		return x.CargoGrossWeightUnit
	}
	return ""
}

func (x *CreateCommodityRequest) GetCargoGrossVolume() float64 {
	if x != nil {
		return x.CargoGrossVolume
	}
	return 0
}

func (x *CreateCommodityRequest) GetCargoGrossVolumeUnit() string {
	if x != nil {
		return x.CargoGrossVolumeUnit
	}
	return ""
}

func (x *CreateCommodityRequest) GetNumberOfPackages() uint32 {
	if x != nil {
		return x.NumberOfPackages
	}
	return 0
}

func (x *CreateCommodityRequest) GetExportLicenseIssueDate() string {
	if x != nil {
		return x.ExportLicenseIssueDate
	}
	return ""
}

func (x *CreateCommodityRequest) GetExportLicenseExpiryDate() string {
	if x != nil {
		return x.ExportLicenseExpiryDate
	}
	return ""
}

func (x *CreateCommodityRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateCommodityRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateCommodityRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateCommodityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commodity *Commodity `protobuf:"bytes,1,opt,name=commodity,proto3" json:"commodity,omitempty"`
}

func (x *CreateCommodityResponse) Reset() {
	*x = CreateCommodityResponse{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCommodityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommodityResponse) ProtoMessage() {}

func (x *CreateCommodityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommodityResponse.ProtoReflect.Descriptor instead.
func (*CreateCommodityResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{15}
}

func (x *CreateCommodityResponse) GetCommodity() *Commodity {
	if x != nil {
		return x.Commodity
	}
	return nil
}

type CreateValueAddedServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId             uint32 `protobuf:"varint,1,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	ValueAddedServiceCode string `protobuf:"bytes,2,opt,name=value_added_service_code,json=valueAddedServiceCode,proto3" json:"value_added_service_code,omitempty"`
	UserId                string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail             string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId             string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateValueAddedServiceRequest) Reset() {
	*x = CreateValueAddedServiceRequest{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValueAddedServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValueAddedServiceRequest) ProtoMessage() {}

func (x *CreateValueAddedServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValueAddedServiceRequest.ProtoReflect.Descriptor instead.
func (*CreateValueAddedServiceRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{16}
}

func (x *CreateValueAddedServiceRequest) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

func (x *CreateValueAddedServiceRequest) GetValueAddedServiceCode() string {
	if x != nil {
		return x.ValueAddedServiceCode
	}
	return ""
}

func (x *CreateValueAddedServiceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateValueAddedServiceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateValueAddedServiceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateValueAddedServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueAddedServiceRequest *ValueAddedServiceRequest `protobuf:"bytes,1,opt,name=value_added_service_request,json=valueAddedServiceRequest,proto3" json:"value_added_service_request,omitempty"`
}

func (x *CreateValueAddedServiceResponse) Reset() {
	*x = CreateValueAddedServiceResponse{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValueAddedServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValueAddedServiceResponse) ProtoMessage() {}

func (x *CreateValueAddedServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValueAddedServiceResponse.ProtoReflect.Descriptor instead.
func (*CreateValueAddedServiceResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{17}
}

func (x *CreateValueAddedServiceResponse) GetValueAddedServiceRequest() *ValueAddedServiceRequest {
	if x != nil {
		return x.ValueAddedServiceRequest
	}
	return nil
}

type CreateRequestedEquipmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId                  uint32 `protobuf:"varint,1,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	ShipmentId                 uint32 `protobuf:"varint,2,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	RequestedEquipmentSizetype string `protobuf:"bytes,3,opt,name=requested_equipment_sizetype,json=requestedEquipmentSizetype,proto3" json:"requested_equipment_sizetype,omitempty"`
	RequestedEquipmentUnits    int32  `protobuf:"varint,4,opt,name=requested_equipment_units,json=requestedEquipmentUnits,proto3" json:"requested_equipment_units,omitempty"`
	ConfirmedEquipmentSizetype string `protobuf:"bytes,5,opt,name=confirmed_equipment_sizetype,json=confirmedEquipmentSizetype,proto3" json:"confirmed_equipment_sizetype,omitempty"`
	ConfirmedEquipmentUnits    int32  `protobuf:"varint,6,opt,name=confirmed_equipment_units,json=confirmedEquipmentUnits,proto3" json:"confirmed_equipment_units,omitempty"`
	IsShipperOwned             bool   `protobuf:"varint,7,opt,name=is_shipper_owned,json=isShipperOwned,proto3" json:"is_shipper_owned,omitempty"`
	UserId                     string `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                  string `protobuf:"bytes,9,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                  string `protobuf:"bytes,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateRequestedEquipmentRequest) Reset() {
	*x = CreateRequestedEquipmentRequest{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRequestedEquipmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequestedEquipmentRequest) ProtoMessage() {}

func (x *CreateRequestedEquipmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequestedEquipmentRequest.ProtoReflect.Descriptor instead.
func (*CreateRequestedEquipmentRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{18}
}

func (x *CreateRequestedEquipmentRequest) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

func (x *CreateRequestedEquipmentRequest) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *CreateRequestedEquipmentRequest) GetRequestedEquipmentSizetype() string {
	if x != nil {
		return x.RequestedEquipmentSizetype
	}
	return ""
}

func (x *CreateRequestedEquipmentRequest) GetRequestedEquipmentUnits() int32 {
	if x != nil {
		return x.RequestedEquipmentUnits
	}
	return 0
}

func (x *CreateRequestedEquipmentRequest) GetConfirmedEquipmentSizetype() string {
	if x != nil {
		return x.ConfirmedEquipmentSizetype
	}
	return ""
}

func (x *CreateRequestedEquipmentRequest) GetConfirmedEquipmentUnits() int32 {
	if x != nil {
		return x.ConfirmedEquipmentUnits
	}
	return 0
}

func (x *CreateRequestedEquipmentRequest) GetIsShipperOwned() bool {
	if x != nil {
		return x.IsShipperOwned
	}
	return false
}

func (x *CreateRequestedEquipmentRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateRequestedEquipmentRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateRequestedEquipmentRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateRequestedEquipmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedEquipment *RequestedEquipment `protobuf:"bytes,1,opt,name=requested_equipment,json=requestedEquipment,proto3" json:"requested_equipment,omitempty"`
}

func (x *CreateRequestedEquipmentResponse) Reset() {
	*x = CreateRequestedEquipmentResponse{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRequestedEquipmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequestedEquipmentResponse) ProtoMessage() {}

func (x *CreateRequestedEquipmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequestedEquipmentResponse.ProtoReflect.Descriptor instead.
func (*CreateRequestedEquipmentResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{19}
}

func (x *CreateRequestedEquipmentResponse) GetRequestedEquipment() *RequestedEquipment {
	if x != nil {
		return x.RequestedEquipment
	}
	return nil
}

type CreateShipmentLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentId               uint32 `protobuf:"varint,1,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	BookingId                uint32 `protobuf:"varint,2,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	LocationId               uint32 `protobuf:"varint,3,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	ShipmentLocationTypeCode string `protobuf:"bytes,4,opt,name=shipment_location_type_code,json=shipmentLocationTypeCode,proto3" json:"shipment_location_type_code,omitempty"`
	DisplayedName            string `protobuf:"bytes,5,opt,name=displayed_name,json=displayedName,proto3" json:"displayed_name,omitempty"`
	EventDateTime            string `protobuf:"bytes,6,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
	UserId                   string `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                string `protobuf:"bytes,8,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                string `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateShipmentLocationRequest) Reset() {
	*x = CreateShipmentLocationRequest{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShipmentLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentLocationRequest) ProtoMessage() {}

func (x *CreateShipmentLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentLocationRequest.ProtoReflect.Descriptor instead.
func (*CreateShipmentLocationRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{20}
}

func (x *CreateShipmentLocationRequest) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *CreateShipmentLocationRequest) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

func (x *CreateShipmentLocationRequest) GetLocationId() uint32 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *CreateShipmentLocationRequest) GetShipmentLocationTypeCode() string {
	if x != nil {
		return x.ShipmentLocationTypeCode
	}
	return ""
}

func (x *CreateShipmentLocationRequest) GetDisplayedName() string {
	if x != nil {
		return x.DisplayedName
	}
	return ""
}

func (x *CreateShipmentLocationRequest) GetEventDateTime() string {
	if x != nil {
		return x.EventDateTime
	}
	return ""
}

func (x *CreateShipmentLocationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateShipmentLocationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateShipmentLocationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateShipmentLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentLocation *ShipmentLocation `protobuf:"bytes,1,opt,name=shipment_location,json=shipmentLocation,proto3" json:"shipment_location,omitempty"`
}

func (x *CreateShipmentLocationResponse) Reset() {
	*x = CreateShipmentLocationResponse{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShipmentLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentLocationResponse) ProtoMessage() {}

func (x *CreateShipmentLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentLocationResponse.ProtoReflect.Descriptor instead.
func (*CreateShipmentLocationResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{21}
}

func (x *CreateShipmentLocationResponse) GetShipmentLocation() *ShipmentLocation {
	if x != nil {
		return x.ShipmentLocation
	}
	return nil
}

type CreateShipmentLocationsByBookingIDAndTOsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateShipmentLocationRequest *CreateShipmentLocationRequest `protobuf:"bytes,1,opt,name=create_shipment_location_request,json=createShipmentLocationRequest,proto3" json:"create_shipment_location_request,omitempty"`
}

func (x *CreateShipmentLocationsByBookingIDAndTOsRequest) Reset() {
	*x = CreateShipmentLocationsByBookingIDAndTOsRequest{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShipmentLocationsByBookingIDAndTOsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentLocationsByBookingIDAndTOsRequest) ProtoMessage() {}

func (x *CreateShipmentLocationsByBookingIDAndTOsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentLocationsByBookingIDAndTOsRequest.ProtoReflect.Descriptor instead.
func (*CreateShipmentLocationsByBookingIDAndTOsRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{22}
}

func (x *CreateShipmentLocationsByBookingIDAndTOsRequest) GetCreateShipmentLocationRequest() *CreateShipmentLocationRequest {
	if x != nil {
		return x.CreateShipmentLocationRequest
	}
	return nil
}

type CreateShipmentLocationsByBookingIDAndTOsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentLocation *ShipmentLocation `protobuf:"bytes,1,opt,name=shipment_location,json=shipmentLocation,proto3" json:"shipment_location,omitempty"`
}

func (x *CreateShipmentLocationsByBookingIDAndTOsResponse) Reset() {
	*x = CreateShipmentLocationsByBookingIDAndTOsResponse{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShipmentLocationsByBookingIDAndTOsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentLocationsByBookingIDAndTOsResponse) ProtoMessage() {}

func (x *CreateShipmentLocationsByBookingIDAndTOsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentLocationsByBookingIDAndTOsResponse.ProtoReflect.Descriptor instead.
func (*CreateShipmentLocationsByBookingIDAndTOsResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{23}
}

func (x *CreateShipmentLocationsByBookingIDAndTOsResponse) GetShipmentLocation() *ShipmentLocation {
	if x != nil {
		return x.ShipmentLocation
	}
	return nil
}

type FetchShipmentLocationsByBookingIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId uint32 `protobuf:"varint,1,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	UserEmail string `protobuf:"bytes,2,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *FetchShipmentLocationsByBookingIDRequest) Reset() {
	*x = FetchShipmentLocationsByBookingIDRequest{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchShipmentLocationsByBookingIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchShipmentLocationsByBookingIDRequest) ProtoMessage() {}

func (x *FetchShipmentLocationsByBookingIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchShipmentLocationsByBookingIDRequest.ProtoReflect.Descriptor instead.
func (*FetchShipmentLocationsByBookingIDRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{24}
}

func (x *FetchShipmentLocationsByBookingIDRequest) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

func (x *FetchShipmentLocationsByBookingIDRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *FetchShipmentLocationsByBookingIDRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type FetchShipmentLocationsByBookingIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentLocation *ShipmentLocation `protobuf:"bytes,1,opt,name=shipment_location,json=shipmentLocation,proto3" json:"shipment_location,omitempty"`
}

func (x *FetchShipmentLocationsByBookingIDResponse) Reset() {
	*x = FetchShipmentLocationsByBookingIDResponse{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchShipmentLocationsByBookingIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchShipmentLocationsByBookingIDResponse) ProtoMessage() {}

func (x *FetchShipmentLocationsByBookingIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchShipmentLocationsByBookingIDResponse.ProtoReflect.Descriptor instead.
func (*FetchShipmentLocationsByBookingIDResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{25}
}

func (x *FetchShipmentLocationsByBookingIDResponse) GetShipmentLocation() *ShipmentLocation {
	if x != nil {
		return x.ShipmentLocation
	}
	return nil
}

type Booking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingD                  *BookingD                   `protobuf:"bytes,1,opt,name=booking_d,json=bookingD,proto3" json:"booking_d,omitempty"`
	BookingT                  *BookingT                   `protobuf:"bytes,2,opt,name=booking_t,json=bookingT,proto3" json:"booking_t,omitempty"`
	CrUpdUser                 *v1.CrUpdUser               `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                 *v1.CrUpdTime               `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
	Commodities               []*Commodity                `protobuf:"bytes,5,rep,name=commodities,proto3" json:"commodities,omitempty"`
	ValueAddedServiceRequests []*ValueAddedServiceRequest `protobuf:"bytes,6,rep,name=value_added_service_requests,json=valueAddedServiceRequests,proto3" json:"value_added_service_requests,omitempty"`
	References                []*Reference1               `protobuf:"bytes,7,rep,name=references,proto3" json:"references,omitempty"`
	RequestedEquipments       []*RequestedEquipment       `protobuf:"bytes,8,rep,name=requested_equipments,json=requestedEquipments,proto3" json:"requested_equipments,omitempty"`
	ShipmentLocations         []*ShipmentLocation         `protobuf:"bytes,9,rep,name=shipment_locations,json=shipmentLocations,proto3" json:"shipment_locations,omitempty"`
}

func (x *Booking) Reset() {
	*x = Booking{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Booking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Booking) ProtoMessage() {}

func (x *Booking) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Booking.ProtoReflect.Descriptor instead.
func (*Booking) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{26}
}

func (x *Booking) GetBookingD() *BookingD {
	if x != nil {
		return x.BookingD
	}
	return nil
}

func (x *Booking) GetBookingT() *BookingT {
	if x != nil {
		return x.BookingT
	}
	return nil
}

func (x *Booking) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Booking) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

func (x *Booking) GetCommodities() []*Commodity {
	if x != nil {
		return x.Commodities
	}
	return nil
}

func (x *Booking) GetValueAddedServiceRequests() []*ValueAddedServiceRequest {
	if x != nil {
		return x.ValueAddedServiceRequests
	}
	return nil
}

func (x *Booking) GetReferences() []*Reference1 {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *Booking) GetRequestedEquipments() []*RequestedEquipment {
	if x != nil {
		return x.RequestedEquipments
	}
	return nil
}

func (x *Booking) GetShipmentLocations() []*ShipmentLocation {
	if x != nil {
		return x.ShipmentLocations
	}
	return nil
}

type BookingD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                          []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                            string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	CarrierBookingRequestReference string  `protobuf:"bytes,4,opt,name=carrier_booking_request_reference,json=carrierBookingRequestReference,proto3" json:"carrier_booking_request_reference,omitempty"`
	DocumentStatus                 string  `protobuf:"bytes,5,opt,name=document_status,json=documentStatus,proto3" json:"document_status,omitempty"`
	ReceiptTypeAtOrigin            string  `protobuf:"bytes,6,opt,name=receipt_type_at_origin,json=receiptTypeAtOrigin,proto3" json:"receipt_type_at_origin,omitempty"`
	DeliveryTypeAtDestination      string  `protobuf:"bytes,7,opt,name=delivery_type_at_destination,json=deliveryTypeAtDestination,proto3" json:"delivery_type_at_destination,omitempty"`
	CargoMovementTypeAtOrigin      string  `protobuf:"bytes,8,opt,name=cargo_movement_type_at_origin,json=cargoMovementTypeAtOrigin,proto3" json:"cargo_movement_type_at_origin,omitempty"`
	CargoMovementTypeAtDestination string  `protobuf:"bytes,9,opt,name=cargo_movement_type_at_destination,json=cargoMovementTypeAtDestination,proto3" json:"cargo_movement_type_at_destination,omitempty"`
	ServiceContractReference       string  `protobuf:"bytes,10,opt,name=service_contract_reference,json=serviceContractReference,proto3" json:"service_contract_reference,omitempty"`
	PaymentTermCode                string  `protobuf:"bytes,11,opt,name=payment_term_code,json=paymentTermCode,proto3" json:"payment_term_code,omitempty"`
	IsPartialLoadAllowed           bool    `protobuf:"varint,12,opt,name=is_partial_load_allowed,json=isPartialLoadAllowed,proto3" json:"is_partial_load_allowed,omitempty"`
	IsExportDeclarationRequired    bool    `protobuf:"varint,13,opt,name=is_export_declaration_required,json=isExportDeclarationRequired,proto3" json:"is_export_declaration_required,omitempty"`
	ExportDeclarationReference     string  `protobuf:"bytes,14,opt,name=export_declaration_reference,json=exportDeclarationReference,proto3" json:"export_declaration_reference,omitempty"`
	IsImportLicenseRequired        bool    `protobuf:"varint,15,opt,name=is_import_license_required,json=isImportLicenseRequired,proto3" json:"is_import_license_required,omitempty"`
	ImportLicenseReference         string  `protobuf:"bytes,16,opt,name=import_license_reference,json=importLicenseReference,proto3" json:"import_license_reference,omitempty"`
	IsAmsAciFilingRequired         bool    `protobuf:"varint,17,opt,name=is_ams_aci_filing_required,json=isAmsAciFilingRequired,proto3" json:"is_ams_aci_filing_required,omitempty"`
	IsDestinationFilingRequired    bool    `protobuf:"varint,18,opt,name=is_destination_filing_required,json=isDestinationFilingRequired,proto3" json:"is_destination_filing_required,omitempty"`
	ContractQuotationReference     string  `protobuf:"bytes,19,opt,name=contract_quotation_reference,json=contractQuotationReference,proto3" json:"contract_quotation_reference,omitempty"`
	TransportDocumentTypeCode      string  `protobuf:"bytes,20,opt,name=transport_document_type_code,json=transportDocumentTypeCode,proto3" json:"transport_document_type_code,omitempty"`
	TransportDocumentReference     string  `protobuf:"bytes,21,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	BookingChannelReference        string  `protobuf:"bytes,22,opt,name=booking_channel_reference,json=bookingChannelReference,proto3" json:"booking_channel_reference,omitempty"`
	IncoTerms                      string  `protobuf:"bytes,23,opt,name=inco_terms,json=incoTerms,proto3" json:"inco_terms,omitempty"`
	CommunicationChannelCode       string  `protobuf:"bytes,24,opt,name=communication_channel_code,json=communicationChannelCode,proto3" json:"communication_channel_code,omitempty"`
	IsEquipmentSubstitutionAllowed bool    `protobuf:"varint,25,opt,name=is_equipment_substitution_allowed,json=isEquipmentSubstitutionAllowed,proto3" json:"is_equipment_substitution_allowed,omitempty"`
	VesselName                     string  `protobuf:"bytes,26,opt,name=vessel_name,json=vesselName,proto3" json:"vessel_name,omitempty"`
	VesselImoNumber                string  `protobuf:"bytes,27,opt,name=vessel_imo_number,json=vesselImoNumber,proto3" json:"vessel_imo_number,omitempty"`
	ExportVoyageNumber             string  `protobuf:"bytes,28,opt,name=export_voyage_number,json=exportVoyageNumber,proto3" json:"export_voyage_number,omitempty"`
	PreCarriageModeOfTransportCode string  `protobuf:"bytes,29,opt,name=pre_carriage_mode_of_transport_code,json=preCarriageModeOfTransportCode,proto3" json:"pre_carriage_mode_of_transport_code,omitempty"`
	VesselId                       uint32  `protobuf:"varint,30,opt,name=vessel_id,json=vesselId,proto3" json:"vessel_id,omitempty"`
	DeclaredValueCurrencyCode      string  `protobuf:"bytes,31,opt,name=declared_value_currency_code,json=declaredValueCurrencyCode,proto3" json:"declared_value_currency_code,omitempty"`
	DeclaredValue                  float64 `protobuf:"fixed64,32,opt,name=declared_value,json=declaredValue,proto3" json:"declared_value,omitempty"`
	VoyageId                       uint32  `protobuf:"varint,33,opt,name=voyage_id,json=voyageId,proto3" json:"voyage_id,omitempty"`
	LocationId                     uint32  `protobuf:"varint,34,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	InvoicePayableAt               string  `protobuf:"bytes,35,opt,name=invoice_payable_at,json=invoicePayableAt,proto3" json:"invoice_payable_at,omitempty"`
}

func (x *BookingD) Reset() {
	*x = BookingD{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BookingD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingD) ProtoMessage() {}

func (x *BookingD) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingD.ProtoReflect.Descriptor instead.
func (*BookingD) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{27}
}

func (x *BookingD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BookingD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *BookingD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *BookingD) GetCarrierBookingRequestReference() string {
	if x != nil {
		return x.CarrierBookingRequestReference
	}
	return ""
}

func (x *BookingD) GetDocumentStatus() string {
	if x != nil {
		return x.DocumentStatus
	}
	return ""
}

func (x *BookingD) GetReceiptTypeAtOrigin() string {
	if x != nil {
		return x.ReceiptTypeAtOrigin
	}
	return ""
}

func (x *BookingD) GetDeliveryTypeAtDestination() string {
	if x != nil {
		return x.DeliveryTypeAtDestination
	}
	return ""
}

func (x *BookingD) GetCargoMovementTypeAtOrigin() string {
	if x != nil {
		return x.CargoMovementTypeAtOrigin
	}
	return ""
}

func (x *BookingD) GetCargoMovementTypeAtDestination() string {
	if x != nil {
		return x.CargoMovementTypeAtDestination
	}
	return ""
}

func (x *BookingD) GetServiceContractReference() string {
	if x != nil {
		return x.ServiceContractReference
	}
	return ""
}

func (x *BookingD) GetPaymentTermCode() string {
	if x != nil {
		return x.PaymentTermCode
	}
	return ""
}

func (x *BookingD) GetIsPartialLoadAllowed() bool {
	if x != nil {
		return x.IsPartialLoadAllowed
	}
	return false
}

func (x *BookingD) GetIsExportDeclarationRequired() bool {
	if x != nil {
		return x.IsExportDeclarationRequired
	}
	return false
}

func (x *BookingD) GetExportDeclarationReference() string {
	if x != nil {
		return x.ExportDeclarationReference
	}
	return ""
}

func (x *BookingD) GetIsImportLicenseRequired() bool {
	if x != nil {
		return x.IsImportLicenseRequired
	}
	return false
}

func (x *BookingD) GetImportLicenseReference() string {
	if x != nil {
		return x.ImportLicenseReference
	}
	return ""
}

func (x *BookingD) GetIsAmsAciFilingRequired() bool {
	if x != nil {
		return x.IsAmsAciFilingRequired
	}
	return false
}

func (x *BookingD) GetIsDestinationFilingRequired() bool {
	if x != nil {
		return x.IsDestinationFilingRequired
	}
	return false
}

func (x *BookingD) GetContractQuotationReference() string {
	if x != nil {
		return x.ContractQuotationReference
	}
	return ""
}

func (x *BookingD) GetTransportDocumentTypeCode() string {
	if x != nil {
		return x.TransportDocumentTypeCode
	}
	return ""
}

func (x *BookingD) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *BookingD) GetBookingChannelReference() string {
	if x != nil {
		return x.BookingChannelReference
	}
	return ""
}

func (x *BookingD) GetIncoTerms() string {
	if x != nil {
		return x.IncoTerms
	}
	return ""
}

func (x *BookingD) GetCommunicationChannelCode() string {
	if x != nil {
		return x.CommunicationChannelCode
	}
	return ""
}

func (x *BookingD) GetIsEquipmentSubstitutionAllowed() bool {
	if x != nil {
		return x.IsEquipmentSubstitutionAllowed
	}
	return false
}

func (x *BookingD) GetVesselName() string {
	if x != nil {
		return x.VesselName
	}
	return ""
}

func (x *BookingD) GetVesselImoNumber() string {
	if x != nil {
		return x.VesselImoNumber
	}
	return ""
}

func (x *BookingD) GetExportVoyageNumber() string {
	if x != nil {
		return x.ExportVoyageNumber
	}
	return ""
}

func (x *BookingD) GetPreCarriageModeOfTransportCode() string {
	if x != nil {
		return x.PreCarriageModeOfTransportCode
	}
	return ""
}

func (x *BookingD) GetVesselId() uint32 {
	if x != nil {
		return x.VesselId
	}
	return 0
}

func (x *BookingD) GetDeclaredValueCurrencyCode() string {
	if x != nil {
		return x.DeclaredValueCurrencyCode
	}
	return ""
}

func (x *BookingD) GetDeclaredValue() float64 {
	if x != nil {
		return x.DeclaredValue
	}
	return 0
}

func (x *BookingD) GetVoyageId() uint32 {
	if x != nil {
		return x.VoyageId
	}
	return 0
}

func (x *BookingD) GetLocationId() uint32 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *BookingD) GetInvoicePayableAt() string {
	if x != nil {
		return x.InvoicePayableAt
	}
	return ""
}

type BookingT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionDateTime                        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=submission_date_time,json=submissionDateTime,proto3" json:"submission_date_time,omitempty"`
	ExpectedDepartureDate                     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expected_departure_date,json=expectedDepartureDate,proto3" json:"expected_departure_date,omitempty"`
	ExpectedArrivalAtPlaceOfDeliveryStartDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expected_arrival_at_place_of_delivery_start_date,json=expectedArrivalAtPlaceOfDeliveryStartDate,proto3" json:"expected_arrival_at_place_of_delivery_start_date,omitempty"`
	ExpectedArrivalAtPlaceOfDeliveryEndDate   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expected_arrival_at_place_of_delivery_end_date,json=expectedArrivalAtPlaceOfDeliveryEndDate,proto3" json:"expected_arrival_at_place_of_delivery_end_date,omitempty"`
}

func (x *BookingT) Reset() {
	*x = BookingT{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BookingT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingT) ProtoMessage() {}

func (x *BookingT) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingT.ProtoReflect.Descriptor instead.
func (*BookingT) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{28}
}

func (x *BookingT) GetSubmissionDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmissionDateTime
	}
	return nil
}

func (x *BookingT) GetExpectedDepartureDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedDepartureDate
	}
	return nil
}

func (x *BookingT) GetExpectedArrivalAtPlaceOfDeliveryStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedArrivalAtPlaceOfDeliveryStartDate
	}
	return nil
}

func (x *BookingT) GetExpectedArrivalAtPlaceOfDeliveryEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedArrivalAtPlaceOfDeliveryEndDate
	}
	return nil
}

type Commodity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommodityD *CommodityD   `protobuf:"bytes,1,opt,name=commodity_d,json=commodityD,proto3" json:"commodity_d,omitempty"`
	CommodityT *CommodityT   `protobuf:"bytes,2,opt,name=commodity_t,json=commodityT,proto3" json:"commodity_t,omitempty"`
	CrUpdUser  *v1.CrUpdUser `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime  *v1.CrUpdTime `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *Commodity) Reset() {
	*x = Commodity{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commodity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commodity) ProtoMessage() {}

func (x *Commodity) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commodity.ProtoReflect.Descriptor instead.
func (*Commodity) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{29}
}

func (x *Commodity) GetCommodityD() *CommodityD {
	if x != nil {
		return x.CommodityD
	}
	return nil
}

func (x *Commodity) GetCommodityT() *CommodityT {
	if x != nil {
		return x.CommodityT
	}
	return nil
}

func (x *Commodity) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Commodity) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type CommodityD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                  string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	BookingId            uint32  `protobuf:"varint,4,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	CommodityType        string  `protobuf:"bytes,5,opt,name=commodity_type,json=commodityType,proto3" json:"commodity_type,omitempty"`
	HsCode               string  `protobuf:"bytes,6,opt,name=hs_code,json=hsCode,proto3" json:"hs_code,omitempty"`
	CargoGrossWeight     float64 `protobuf:"fixed64,7,opt,name=cargo_gross_weight,json=cargoGrossWeight,proto3" json:"cargo_gross_weight,omitempty"`
	CargoGrossWeightUnit string  `protobuf:"bytes,8,opt,name=cargo_gross_weight_unit,json=cargoGrossWeightUnit,proto3" json:"cargo_gross_weight_unit,omitempty"`
	CargoGrossVolume     float64 `protobuf:"fixed64,9,opt,name=cargo_gross_volume,json=cargoGrossVolume,proto3" json:"cargo_gross_volume,omitempty"`
	CargoGrossVolumeUnit string  `protobuf:"bytes,10,opt,name=cargo_gross_volume_unit,json=cargoGrossVolumeUnit,proto3" json:"cargo_gross_volume_unit,omitempty"`
	NumberOfPackages     uint32  `protobuf:"varint,11,opt,name=number_of_packages,json=numberOfPackages,proto3" json:"number_of_packages,omitempty"`
}

func (x *CommodityD) Reset() {
	*x = CommodityD{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityD) ProtoMessage() {}

func (x *CommodityD) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityD.ProtoReflect.Descriptor instead.
func (*CommodityD) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{30}
}

func (x *CommodityD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommodityD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *CommodityD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *CommodityD) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

func (x *CommodityD) GetCommodityType() string {
	if x != nil {
		return x.CommodityType
	}
	return ""
}

func (x *CommodityD) GetHsCode() string {
	if x != nil {
		return x.HsCode
	}
	return ""
}

func (x *CommodityD) GetCargoGrossWeight() float64 {
	if x != nil {
		return x.CargoGrossWeight
	}
	return 0
}

func (x *CommodityD) GetCargoGrossWeightUnit() string {
	if x != nil {
		return x.CargoGrossWeightUnit
	}
	return ""
}

func (x *CommodityD) GetCargoGrossVolume() float64 {
	if x != nil {
		return x.CargoGrossVolume
	}
	return 0
}

func (x *CommodityD) GetCargoGrossVolumeUnit() string {
	if x != nil {
		return x.CargoGrossVolumeUnit
	}
	return ""
}

func (x *CommodityD) GetNumberOfPackages() uint32 {
	if x != nil {
		return x.NumberOfPackages
	}
	return 0
}

type CommodityT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportLicenseIssueDate  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=export_license_issue_date,json=exportLicenseIssueDate,proto3" json:"export_license_issue_date,omitempty"`
	ExportLicenseExpiryDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=export_license_expiry_date,json=exportLicenseExpiryDate,proto3" json:"export_license_expiry_date,omitempty"`
}

func (x *CommodityT) Reset() {
	*x = CommodityT{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityT) ProtoMessage() {}

func (x *CommodityT) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityT.ProtoReflect.Descriptor instead.
func (*CommodityT) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{31}
}

func (x *CommodityT) GetExportLicenseIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExportLicenseIssueDate
	}
	return nil
}

func (x *CommodityT) GetExportLicenseExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExportLicenseExpiryDate
	}
	return nil
}

type RequestedEquipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedEquipmentD *RequestedEquipmentD `protobuf:"bytes,1,opt,name=requested_equipment_d,json=requestedEquipmentD,proto3" json:"requested_equipment_d,omitempty"`
	CrUpdUser           *v1.CrUpdUser        `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime           *v1.CrUpdTime        `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *RequestedEquipment) Reset() {
	*x = RequestedEquipment{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestedEquipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestedEquipment) ProtoMessage() {}

func (x *RequestedEquipment) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestedEquipment.ProtoReflect.Descriptor instead.
func (*RequestedEquipment) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{32}
}

func (x *RequestedEquipment) GetRequestedEquipmentD() *RequestedEquipmentD {
	if x != nil {
		return x.RequestedEquipmentD
	}
	return nil
}

func (x *RequestedEquipment) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *RequestedEquipment) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type RequestedEquipmentD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                      []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                        string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	BookingId                  uint32 `protobuf:"varint,4,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	ShipmentId                 uint32 `protobuf:"varint,5,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	RequestedEquipmentSizetype string `protobuf:"bytes,6,opt,name=requested_equipment_sizetype,json=requestedEquipmentSizetype,proto3" json:"requested_equipment_sizetype,omitempty"`
	RequestedEquipmentUnits    int32  `protobuf:"varint,7,opt,name=requested_equipment_units,json=requestedEquipmentUnits,proto3" json:"requested_equipment_units,omitempty"`
	ConfirmedEquipmentSizetype string `protobuf:"bytes,8,opt,name=confirmed_equipment_sizetype,json=confirmedEquipmentSizetype,proto3" json:"confirmed_equipment_sizetype,omitempty"`
	ConfirmedEquipmentUnits    int32  `protobuf:"varint,9,opt,name=confirmed_equipment_units,json=confirmedEquipmentUnits,proto3" json:"confirmed_equipment_units,omitempty"`
	IsShipperOwned             bool   `protobuf:"varint,10,opt,name=is_shipper_owned,json=isShipperOwned,proto3" json:"is_shipper_owned,omitempty"`
}

func (x *RequestedEquipmentD) Reset() {
	*x = RequestedEquipmentD{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestedEquipmentD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestedEquipmentD) ProtoMessage() {}

func (x *RequestedEquipmentD) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestedEquipmentD.ProtoReflect.Descriptor instead.
func (*RequestedEquipmentD) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{33}
}

func (x *RequestedEquipmentD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RequestedEquipmentD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *RequestedEquipmentD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *RequestedEquipmentD) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

func (x *RequestedEquipmentD) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *RequestedEquipmentD) GetRequestedEquipmentSizetype() string {
	if x != nil {
		return x.RequestedEquipmentSizetype
	}
	return ""
}

func (x *RequestedEquipmentD) GetRequestedEquipmentUnits() int32 {
	if x != nil {
		return x.RequestedEquipmentUnits
	}
	return 0
}

func (x *RequestedEquipmentD) GetConfirmedEquipmentSizetype() string {
	if x != nil {
		return x.ConfirmedEquipmentSizetype
	}
	return ""
}

func (x *RequestedEquipmentD) GetConfirmedEquipmentUnits() int32 {
	if x != nil {
		return x.ConfirmedEquipmentUnits
	}
	return 0
}

func (x *RequestedEquipmentD) GetIsShipperOwned() bool {
	if x != nil {
		return x.IsShipperOwned
	}
	return false
}

type ShipmentLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentLocationD *ShipmentLocationD `protobuf:"bytes,1,opt,name=shipment_location_d,json=shipmentLocationD,proto3" json:"shipment_location_d,omitempty"`
	ShipmentLocationT *ShipmentLocationT `protobuf:"bytes,2,opt,name=shipment_location_t,json=shipmentLocationT,proto3" json:"shipment_location_t,omitempty"`
}

func (x *ShipmentLocation) Reset() {
	*x = ShipmentLocation{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShipmentLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentLocation) ProtoMessage() {}

func (x *ShipmentLocation) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentLocation.ProtoReflect.Descriptor instead.
func (*ShipmentLocation) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{34}
}

func (x *ShipmentLocation) GetShipmentLocationD() *ShipmentLocationD {
	if x != nil {
		return x.ShipmentLocationD
	}
	return nil
}

func (x *ShipmentLocation) GetShipmentLocationT() *ShipmentLocationT {
	if x != nil {
		return x.ShipmentLocationT
	}
	return nil
}

type ShipmentLocationD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentId               uint32 `protobuf:"varint,1,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	BookingId                uint32 `protobuf:"varint,2,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	LocationId               uint32 `protobuf:"varint,3,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	ShipmentLocationTypeCode string `protobuf:"bytes,4,opt,name=shipment_location_type_code,json=shipmentLocationTypeCode,proto3" json:"shipment_location_type_code,omitempty"`
	DisplayedName            string `protobuf:"bytes,5,opt,name=displayed_name,json=displayedName,proto3" json:"displayed_name,omitempty"`
}

func (x *ShipmentLocationD) Reset() {
	*x = ShipmentLocationD{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShipmentLocationD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentLocationD) ProtoMessage() {}

func (x *ShipmentLocationD) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentLocationD.ProtoReflect.Descriptor instead.
func (*ShipmentLocationD) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{35}
}

func (x *ShipmentLocationD) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *ShipmentLocationD) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

func (x *ShipmentLocationD) GetLocationId() uint32 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *ShipmentLocationD) GetShipmentLocationTypeCode() string {
	if x != nil {
		return x.ShipmentLocationTypeCode
	}
	return ""
}

func (x *ShipmentLocationD) GetDisplayedName() string {
	if x != nil {
		return x.DisplayedName
	}
	return ""
}

type ShipmentLocationT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
}

func (x *ShipmentLocationT) Reset() {
	*x = ShipmentLocationT{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShipmentLocationT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentLocationT) ProtoMessage() {}

func (x *ShipmentLocationT) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentLocationT.ProtoReflect.Descriptor instead.
func (*ShipmentLocationT) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{36}
}

func (x *ShipmentLocationT) GetEventDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventDateTime
	}
	return nil
}

type ValueAddedServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                 []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                   string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	BookingId             uint32 `protobuf:"varint,4,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	ValueAddedServiceCode string `protobuf:"bytes,5,opt,name=value_added_service_code,json=valueAddedServiceCode,proto3" json:"value_added_service_code,omitempty"`
}

func (x *ValueAddedServiceRequest) Reset() {
	*x = ValueAddedServiceRequest{}
	mi := &file_bkg_v2_bkg_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueAddedServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueAddedServiceRequest) ProtoMessage() {}

func (x *ValueAddedServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueAddedServiceRequest.ProtoReflect.Descriptor instead.
func (*ValueAddedServiceRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_proto_rawDescGZIP(), []int{37}
}

func (x *ValueAddedServiceRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ValueAddedServiceRequest) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ValueAddedServiceRequest) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ValueAddedServiceRequest) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

func (x *ValueAddedServiceRequest) GetValueAddedServiceCode() string {
	if x != nil {
		return x.ValueAddedServiceCode
	}
	return ""
}

var File_bkg_v2_bkg_proto protoreflect.FileDescriptor

var file_bkg_v2_bkg_proto_rawDesc = []byte{
	0x0a, 0x10, 0x62, 0x6b, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x62, 0x6b, 0x67, 0x2f, 0x76, 0x32,
	0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x15, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x52, 0x0a, 0x21, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x1e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c,
	0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61,
	0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x1c,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x19, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x1d, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f,
	0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x74,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x19, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x4d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x53, 0x0a, 0x22, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x1e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x4d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x18, 0x1e, 0x52, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x1c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x18, 0x23, 0x52, 0x1a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x38, 0x0a,
	0x18, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f,
	0x61, 0x6d, 0x73, 0x5f, 0x61, 0x63, 0x69, 0x5f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69,
	0x73, 0x41, 0x6d, 0x73, 0x41, 0x63, 0x69, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69,
	0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x1c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x23, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a,
	0x30, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x29, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f,
	0x66, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x5f, 0x0a, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x27, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x6f, 0x54, 0x65, 0x72, 0x6d,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x49, 0x0a, 0x21, 0x69, 0x73, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x69, 0x73, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6d,
	0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x12,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x4b, 0x0a, 0x23, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1e, 0x70, 0x72, 0x65, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x4f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x1c,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x03, 0x52, 0x19, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x50, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x67, 0x0a, 0x1c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x19, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x14, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6b, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x42, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x63, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x22, 0x4b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x3f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x22, 0x5d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74,
	0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x43, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x50,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6b, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x22, 0xbc, 0x01, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x21, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6b, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x22, 0xd1, 0x01, 0x0a, 0x2d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x21, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6b,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0xae, 0x05, 0x0a, 0x3d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x21, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x1e, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x13, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x48, 0x0a, 0x1c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x19, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x41,
	0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x1d,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x19, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41,
	0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x53, 0x0a, 0x22, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61,
	0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x1e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41,
	0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x1a,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x1e, 0x52, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x3e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x04, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x68, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0x48, 0x10, 0x72,
	0x0e, 0x10, 0x06, 0x18, 0x1e, 0x32, 0x08, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52,
	0x06, 0x68, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x67,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x47, 0x72, 0x6f,
	0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x47,
	0x72, 0x6f, 0x73, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x19, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x4a,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62,
	0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x22, 0xcf, 0x01, 0x0a, 0x1e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a,
	0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5f, 0x0a, 0x1b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x18, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xde, 0x03, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53,
	0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x6f, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xee, 0x02, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x18, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x01,
	0x0a, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x54, 0x4f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x6e, 0x0a, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6b,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x1d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x79, 0x0a, 0x30, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x54, 0x4f, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a,
	0x28, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x29, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x04, 0x0a, 0x07, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6b, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x52, 0x08, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x12, 0x2d, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72,
	0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x1c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6b,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62,
	0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x31,
	0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x14,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6b, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc1, 0x0e, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x49, 0x0a, 0x21, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33,
	0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61,
	0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1d, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x6d, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x22, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f,
	0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17,
	0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69,
	0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73,
	0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x69, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x61, 0x6d, 0x73, 0x5f, 0x61, 0x63, 0x69, 0x5f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x41, 0x6d, 0x73, 0x41, 0x63, 0x69, 0x46,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x43, 0x0a,
	0x1e, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x6f, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x49, 0x0a, 0x21, 0x69, 0x73, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x69, 0x73, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49,
	0x6d, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f,
	0x79, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x23, 0x70, 0x72,
	0x65, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x72, 0x65, 0x43, 0x61, 0x72, 0x72,
	0x69, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50,
	0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x22, 0xaa, 0x03, 0x0a, 0x08, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a, 0x30, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x29, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x7b, 0x0a, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x27, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x54, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09,
	0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9c, 0x03, 0x0a, 0x0a, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64,
	0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11,
	0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64,
	0x53, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35,
	0x0a, 0x17, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x67,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x6f,
	0x73, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x47, 0x72, 0x6f, 0x73, 0x73,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x12, 0x55, 0x0a, 0x19, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x57,
	0x0a, 0x1a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4f,
	0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb4, 0x03, 0x0a, 0x13,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1c,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a,
	0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x19,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x77, 0x6e,
	0x65, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x52,
	0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x12, 0x49, 0x0a, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x22, 0xda, 0x01,
	0x0a, 0x11, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x11, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x12,
	0x42, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x32, 0x85, 0x0c, 0x0a, 0x0a, 0x42, 0x6b, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x1c, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x2e,
	0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6b, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x50, 0x6b, 0x12, 0x1d, 0x2e,
	0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62,
	0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a,
	0x2a, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x2e, 0x62, 0x6b,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x26, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x2e,
	0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xc7, 0x01, 0x0a,
	0x36, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46,
	0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x2e, 0x62, 0x6b, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6b, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x27, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6b,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9d,
	0x01, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x54, 0x4f, 0x73, 0x12, 0x37, 0x2e, 0x62, 0x6b,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x54, 0x4f, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44,
	0x41, 0x6e, 0x64, 0x54, 0x4f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88,
	0x01, 0x0a, 0x21, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x44, 0x12, 0x30, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x64, 0x63, 0x73, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x62, 0x6b,
	0x67, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bkg_v2_bkg_proto_rawDescOnce sync.Once
	file_bkg_v2_bkg_proto_rawDescData = file_bkg_v2_bkg_proto_rawDesc
)

func file_bkg_v2_bkg_proto_rawDescGZIP() []byte {
	file_bkg_v2_bkg_proto_rawDescOnce.Do(func() {
		file_bkg_v2_bkg_proto_rawDescData = protoimpl.X.CompressGZIP(file_bkg_v2_bkg_proto_rawDescData)
	})
	return file_bkg_v2_bkg_proto_rawDescData
}

var file_bkg_v2_bkg_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_bkg_v2_bkg_proto_goTypes = []any{
	(*CreateBookingRequest)(nil),                                           // 0: bkg.v2.CreateBookingRequest
	(*CreateBookingResponse)(nil),                                          // 1: bkg.v2.CreateBookingResponse
	(*GetBookingsRequest)(nil),                                             // 2: bkg.v2.GetBookingsRequest
	(*GetBookingsResponse)(nil),                                            // 3: bkg.v2.GetBookingsResponse
	(*GetBookingRequest)(nil),                                              // 4: bkg.v2.GetBookingRequest
	(*GetBookingResponse)(nil),                                             // 5: bkg.v2.GetBookingResponse
	(*GetBookingByPkRequest)(nil),                                          // 6: bkg.v2.GetBookingByPkRequest
	(*GetBookingByPkResponse)(nil),                                         // 7: bkg.v2.GetBookingByPkResponse
	(*GetBookingByCarrierBookingRequestReferenceRequest)(nil),              // 8: bkg.v2.GetBookingByCarrierBookingRequestReferenceRequest
	(*GetBookingByCarrierBookingRequestReferenceResponse)(nil),             // 9: bkg.v2.GetBookingByCarrierBookingRequestReferenceResponse
	(*CancelBookingByCarrierBookingReferenceRequest)(nil),                  // 10: bkg.v2.CancelBookingByCarrierBookingReferenceRequest
	(*CancelBookingByCarrierBookingReferenceResponse)(nil),                 // 11: bkg.v2.CancelBookingByCarrierBookingReferenceResponse
	(*UpdateBookingByReferenceCarrierBookingRequestReferenceRequest)(nil),  // 12: bkg.v2.UpdateBookingByReferenceCarrierBookingRequestReferenceRequest
	(*UpdateBookingByReferenceCarrierBookingRequestReferenceResponse)(nil), // 13: bkg.v2.UpdateBookingByReferenceCarrierBookingRequestReferenceResponse
	(*CreateCommodityRequest)(nil),                                         // 14: bkg.v2.CreateCommodityRequest
	(*CreateCommodityResponse)(nil),                                        // 15: bkg.v2.CreateCommodityResponse
	(*CreateValueAddedServiceRequest)(nil),                                 // 16: bkg.v2.CreateValueAddedServiceRequest
	(*CreateValueAddedServiceResponse)(nil),                                // 17: bkg.v2.CreateValueAddedServiceResponse
	(*CreateRequestedEquipmentRequest)(nil),                                // 18: bkg.v2.CreateRequestedEquipmentRequest
	(*CreateRequestedEquipmentResponse)(nil),                               // 19: bkg.v2.CreateRequestedEquipmentResponse
	(*CreateShipmentLocationRequest)(nil),                                  // 20: bkg.v2.CreateShipmentLocationRequest
	(*CreateShipmentLocationResponse)(nil),                                 // 21: bkg.v2.CreateShipmentLocationResponse
	(*CreateShipmentLocationsByBookingIDAndTOsRequest)(nil),                // 22: bkg.v2.CreateShipmentLocationsByBookingIDAndTOsRequest
	(*CreateShipmentLocationsByBookingIDAndTOsResponse)(nil),               // 23: bkg.v2.CreateShipmentLocationsByBookingIDAndTOsResponse
	(*FetchShipmentLocationsByBookingIDRequest)(nil),                       // 24: bkg.v2.FetchShipmentLocationsByBookingIDRequest
	(*FetchShipmentLocationsByBookingIDResponse)(nil),                      // 25: bkg.v2.FetchShipmentLocationsByBookingIDResponse
	(*Booking)(nil),                  // 26: bkg.v2.Booking
	(*BookingD)(nil),                 // 27: bkg.v2.BookingD
	(*BookingT)(nil),                 // 28: bkg.v2.BookingT
	(*Commodity)(nil),                // 29: bkg.v2.Commodity
	(*CommodityD)(nil),               // 30: bkg.v2.CommodityD
	(*CommodityT)(nil),               // 31: bkg.v2.CommodityT
	(*RequestedEquipment)(nil),       // 32: bkg.v2.RequestedEquipment
	(*RequestedEquipmentD)(nil),      // 33: bkg.v2.RequestedEquipmentD
	(*ShipmentLocation)(nil),         // 34: bkg.v2.ShipmentLocation
	(*ShipmentLocationD)(nil),        // 35: bkg.v2.ShipmentLocationD
	(*ShipmentLocationT)(nil),        // 36: bkg.v2.ShipmentLocationT
	(*ValueAddedServiceRequest)(nil), // 37: bkg.v2.ValueAddedServiceRequest
	(*CreateReferenceRequest)(nil),   // 38: bkg.v2.CreateReferenceRequest
	(*v1.GetRequest)(nil),            // 39: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),        // 40: common.v1.GetByIdRequest
	(*v1.CrUpdUser)(nil),             // 41: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),             // 42: common.v1.CrUpdTime
	(*Reference1)(nil),               // 43: bkg.v2.Reference1
	(*timestamppb.Timestamp)(nil),    // 44: google.protobuf.Timestamp
}
var file_bkg_v2_bkg_proto_depIdxs = []int32{
	14, // 0: bkg.v2.CreateBookingRequest.commodities:type_name -> bkg.v2.CreateCommodityRequest
	16, // 1: bkg.v2.CreateBookingRequest.value_added_service_requests:type_name -> bkg.v2.CreateValueAddedServiceRequest
	38, // 2: bkg.v2.CreateBookingRequest.references:type_name -> bkg.v2.CreateReferenceRequest
	18, // 3: bkg.v2.CreateBookingRequest.requested_equipments:type_name -> bkg.v2.CreateRequestedEquipmentRequest
	20, // 4: bkg.v2.CreateBookingRequest.shipment_locations:type_name -> bkg.v2.CreateShipmentLocationRequest
	26, // 5: bkg.v2.CreateBookingResponse.booking:type_name -> bkg.v2.Booking
	26, // 6: bkg.v2.GetBookingsResponse.bookings:type_name -> bkg.v2.Booking
	39, // 7: bkg.v2.GetBookingRequest.get_request:type_name -> common.v1.GetRequest
	26, // 8: bkg.v2.GetBookingResponse.booking:type_name -> bkg.v2.Booking
	40, // 9: bkg.v2.GetBookingByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	26, // 10: bkg.v2.GetBookingByPkResponse.booking:type_name -> bkg.v2.Booking
	26, // 11: bkg.v2.GetBookingByCarrierBookingRequestReferenceResponse.booking:type_name -> bkg.v2.Booking
	26, // 12: bkg.v2.CancelBookingByCarrierBookingReferenceResponse.booking:type_name -> bkg.v2.Booking
	29, // 13: bkg.v2.CreateCommodityResponse.commodity:type_name -> bkg.v2.Commodity
	37, // 14: bkg.v2.CreateValueAddedServiceResponse.value_added_service_request:type_name -> bkg.v2.ValueAddedServiceRequest
	32, // 15: bkg.v2.CreateRequestedEquipmentResponse.requested_equipment:type_name -> bkg.v2.RequestedEquipment
	34, // 16: bkg.v2.CreateShipmentLocationResponse.shipment_location:type_name -> bkg.v2.ShipmentLocation
	20, // 17: bkg.v2.CreateShipmentLocationsByBookingIDAndTOsRequest.create_shipment_location_request:type_name -> bkg.v2.CreateShipmentLocationRequest
	34, // 18: bkg.v2.CreateShipmentLocationsByBookingIDAndTOsResponse.shipment_location:type_name -> bkg.v2.ShipmentLocation
	34, // 19: bkg.v2.FetchShipmentLocationsByBookingIDResponse.shipment_location:type_name -> bkg.v2.ShipmentLocation
	27, // 20: bkg.v2.Booking.booking_d:type_name -> bkg.v2.BookingD
	28, // 21: bkg.v2.Booking.booking_t:type_name -> bkg.v2.BookingT
	41, // 22: bkg.v2.Booking.cr_upd_user:type_name -> common.v1.CrUpdUser
	42, // 23: bkg.v2.Booking.cr_upd_time:type_name -> common.v1.CrUpdTime
	29, // 24: bkg.v2.Booking.commodities:type_name -> bkg.v2.Commodity
	37, // 25: bkg.v2.Booking.value_added_service_requests:type_name -> bkg.v2.ValueAddedServiceRequest
	43, // 26: bkg.v2.Booking.references:type_name -> bkg.v2.Reference1
	32, // 27: bkg.v2.Booking.requested_equipments:type_name -> bkg.v2.RequestedEquipment
	34, // 28: bkg.v2.Booking.shipment_locations:type_name -> bkg.v2.ShipmentLocation
	44, // 29: bkg.v2.BookingT.submission_date_time:type_name -> google.protobuf.Timestamp
	44, // 30: bkg.v2.BookingT.expected_departure_date:type_name -> google.protobuf.Timestamp
	44, // 31: bkg.v2.BookingT.expected_arrival_at_place_of_delivery_start_date:type_name -> google.protobuf.Timestamp
	44, // 32: bkg.v2.BookingT.expected_arrival_at_place_of_delivery_end_date:type_name -> google.protobuf.Timestamp
	30, // 33: bkg.v2.Commodity.commodity_d:type_name -> bkg.v2.CommodityD
	31, // 34: bkg.v2.Commodity.commodity_t:type_name -> bkg.v2.CommodityT
	41, // 35: bkg.v2.Commodity.cr_upd_user:type_name -> common.v1.CrUpdUser
	42, // 36: bkg.v2.Commodity.cr_upd_time:type_name -> common.v1.CrUpdTime
	44, // 37: bkg.v2.CommodityT.export_license_issue_date:type_name -> google.protobuf.Timestamp
	44, // 38: bkg.v2.CommodityT.export_license_expiry_date:type_name -> google.protobuf.Timestamp
	33, // 39: bkg.v2.RequestedEquipment.requested_equipment_d:type_name -> bkg.v2.RequestedEquipmentD
	41, // 40: bkg.v2.RequestedEquipment.cr_upd_user:type_name -> common.v1.CrUpdUser
	42, // 41: bkg.v2.RequestedEquipment.cr_upd_time:type_name -> common.v1.CrUpdTime
	35, // 42: bkg.v2.ShipmentLocation.shipment_location_d:type_name -> bkg.v2.ShipmentLocationD
	36, // 43: bkg.v2.ShipmentLocation.shipment_location_t:type_name -> bkg.v2.ShipmentLocationT
	44, // 44: bkg.v2.ShipmentLocationT.event_date_time:type_name -> google.protobuf.Timestamp
	0,  // 45: bkg.v2.BkgService.CreateBooking:input_type -> bkg.v2.CreateBookingRequest
	2,  // 46: bkg.v2.BkgService.GetBookings:input_type -> bkg.v2.GetBookingsRequest
	4,  // 47: bkg.v2.BkgService.GetBooking:input_type -> bkg.v2.GetBookingRequest
	6,  // 48: bkg.v2.BkgService.GetBookingByPk:input_type -> bkg.v2.GetBookingByPkRequest
	8,  // 49: bkg.v2.BkgService.GetBookingByCarrierBookingRequestReference:input_type -> bkg.v2.GetBookingByCarrierBookingRequestReferenceRequest
	10, // 50: bkg.v2.BkgService.CancelBookingByCarrierBookingReference:input_type -> bkg.v2.CancelBookingByCarrierBookingReferenceRequest
	12, // 51: bkg.v2.BkgService.UpdateBookingByReferenceCarrierBookingRequestReference:input_type -> bkg.v2.UpdateBookingByReferenceCarrierBookingRequestReferenceRequest
	14, // 52: bkg.v2.BkgService.CreateCommodity:input_type -> bkg.v2.CreateCommodityRequest
	16, // 53: bkg.v2.BkgService.CreateValueAddedService:input_type -> bkg.v2.CreateValueAddedServiceRequest
	18, // 54: bkg.v2.BkgService.CreateRequestedEquipment:input_type -> bkg.v2.CreateRequestedEquipmentRequest
	20, // 55: bkg.v2.BkgService.CreateShipmentLocation:input_type -> bkg.v2.CreateShipmentLocationRequest
	22, // 56: bkg.v2.BkgService.CreateShipmentLocationsByBookingIDAndTOs:input_type -> bkg.v2.CreateShipmentLocationsByBookingIDAndTOsRequest
	24, // 57: bkg.v2.BkgService.FetchShipmentLocationsByBookingID:input_type -> bkg.v2.FetchShipmentLocationsByBookingIDRequest
	1,  // 58: bkg.v2.BkgService.CreateBooking:output_type -> bkg.v2.CreateBookingResponse
	3,  // 59: bkg.v2.BkgService.GetBookings:output_type -> bkg.v2.GetBookingsResponse
	5,  // 60: bkg.v2.BkgService.GetBooking:output_type -> bkg.v2.GetBookingResponse
	7,  // 61: bkg.v2.BkgService.GetBookingByPk:output_type -> bkg.v2.GetBookingByPkResponse
	9,  // 62: bkg.v2.BkgService.GetBookingByCarrierBookingRequestReference:output_type -> bkg.v2.GetBookingByCarrierBookingRequestReferenceResponse
	11, // 63: bkg.v2.BkgService.CancelBookingByCarrierBookingReference:output_type -> bkg.v2.CancelBookingByCarrierBookingReferenceResponse
	13, // 64: bkg.v2.BkgService.UpdateBookingByReferenceCarrierBookingRequestReference:output_type -> bkg.v2.UpdateBookingByReferenceCarrierBookingRequestReferenceResponse
	15, // 65: bkg.v2.BkgService.CreateCommodity:output_type -> bkg.v2.CreateCommodityResponse
	17, // 66: bkg.v2.BkgService.CreateValueAddedService:output_type -> bkg.v2.CreateValueAddedServiceResponse
	19, // 67: bkg.v2.BkgService.CreateRequestedEquipment:output_type -> bkg.v2.CreateRequestedEquipmentResponse
	21, // 68: bkg.v2.BkgService.CreateShipmentLocation:output_type -> bkg.v2.CreateShipmentLocationResponse
	23, // 69: bkg.v2.BkgService.CreateShipmentLocationsByBookingIDAndTOs:output_type -> bkg.v2.CreateShipmentLocationsByBookingIDAndTOsResponse
	25, // 70: bkg.v2.BkgService.FetchShipmentLocationsByBookingID:output_type -> bkg.v2.FetchShipmentLocationsByBookingIDResponse
	58, // [58:71] is the sub-list for method output_type
	45, // [45:58] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_bkg_v2_bkg_proto_init() }
func file_bkg_v2_bkg_proto_init() {
	if File_bkg_v2_bkg_proto != nil {
		return
	}
	file_bkg_v2_reference_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bkg_v2_bkg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bkg_v2_bkg_proto_goTypes,
		DependencyIndexes: file_bkg_v2_bkg_proto_depIdxs,
		MessageInfos:      file_bkg_v2_bkg_proto_msgTypes,
	}.Build()
	File_bkg_v2_bkg_proto = out.File
	file_bkg_v2_bkg_proto_rawDesc = nil
	file_bkg_v2_bkg_proto_goTypes = nil
	file_bkg_v2_bkg_proto_depIdxs = nil
}
