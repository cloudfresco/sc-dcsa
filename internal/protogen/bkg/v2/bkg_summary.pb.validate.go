// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bkg/v2/bkg_summary.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateBookingSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBookingSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBookingSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBookingSummaryRequestMultiError, or nil if none found.
func (m *CreateBookingSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBookingSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierBookingRequestReference

	// no validation rules for DocumentStatus

	// no validation rules for BookingRequestCreatedDateTime

	// no validation rules for BookingRequestUpdatedDateTime

	// no validation rules for ReceiptTypeAtOrigin

	// no validation rules for DeliveryTypeAtDestination

	// no validation rules for CargoMovementTypeAtOrigin

	// no validation rules for CargoMovementTypeAtDestination

	// no validation rules for ServiceContractReference

	// no validation rules for VesselName

	// no validation rules for CarrierExportVoyageNumber

	// no validation rules for UniversalExportVoyageReference

	// no validation rules for DeclaredValue

	// no validation rules for DeliveryValueCurrency

	// no validation rules for PaymentTermCode

	// no validation rules for IsPartialLoadAllowed

	// no validation rules for IsExportDeclarationRequired

	// no validation rules for ExportDeclarationReference

	// no validation rules for IsImportLicenseRequired

	// no validation rules for ImportLicenseReference

	// no validation rules for SubmissionDateTime

	// no validation rules for IsAmsAciFilingRequired

	// no validation rules for IsDestinationFilingRequired

	// no validation rules for ContractQuotationReference

	// no validation rules for ExpectedDepartureDate

	// no validation rules for ExpectedArrivalAtPlaceOfDeliveryStartDate

	// no validation rules for ExpectedArrivalAtPlaceOfDeliveryEndDate

	// no validation rules for TransportDocumentTypeCode

	// no validation rules for TransportDocumentReference

	// no validation rules for BookingChannelReference

	// no validation rules for IncoTerms

	// no validation rules for CommunicationChannelCode

	// no validation rules for IsEquipmentSubstitutionAllowed

	// no validation rules for VesselImoNumber

	// no validation rules for PreCarriageModeOfTransportCode

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateBookingSummaryRequestMultiError(errors)
	}

	return nil
}

// CreateBookingSummaryRequestMultiError is an error wrapping multiple
// validation errors returned by CreateBookingSummaryRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateBookingSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBookingSummaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBookingSummaryRequestMultiError) AllErrors() []error { return m }

// CreateBookingSummaryRequestValidationError is the validation error returned
// by CreateBookingSummaryRequest.Validate if the designated constraints
// aren't met.
type CreateBookingSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookingSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookingSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookingSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookingSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookingSummaryRequestValidationError) ErrorName() string {
	return "CreateBookingSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookingSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookingSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookingSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookingSummaryRequestValidationError{}

// Validate checks the field values on CreateBookingSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBookingSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBookingSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBookingSummaryResponseMultiError, or nil if none found.
func (m *CreateBookingSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBookingSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBookingSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBookingSummaryResponseValidationError{
					field:  "BookingSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBookingSummaryResponseValidationError{
					field:  "BookingSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookingSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBookingSummaryResponseValidationError{
				field:  "BookingSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBookingSummaryResponseMultiError(errors)
	}

	return nil
}

// CreateBookingSummaryResponseMultiError is an error wrapping multiple
// validation errors returned by CreateBookingSummaryResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateBookingSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBookingSummaryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBookingSummaryResponseMultiError) AllErrors() []error { return m }

// CreateBookingSummaryResponseValidationError is the validation error returned
// by CreateBookingSummaryResponse.Validate if the designated constraints
// aren't met.
type CreateBookingSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookingSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookingSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookingSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookingSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookingSummaryResponseValidationError) ErrorName() string {
	return "CreateBookingSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookingSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookingSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookingSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookingSummaryResponseValidationError{}

// Validate checks the field values on GetBookingSummariesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingSummariesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingSummariesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingSummariesResponseMultiError, or nil if none found.
func (m *GetBookingSummariesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingSummariesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBookingSummaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBookingSummariesResponseValidationError{
						field:  fmt.Sprintf("BookingSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBookingSummariesResponseValidationError{
						field:  fmt.Sprintf("BookingSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBookingSummariesResponseValidationError{
					field:  fmt.Sprintf("BookingSummaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetBookingSummariesResponseMultiError(errors)
	}

	return nil
}

// GetBookingSummariesResponseMultiError is an error wrapping multiple
// validation errors returned by GetBookingSummariesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetBookingSummariesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingSummariesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingSummariesResponseMultiError) AllErrors() []error { return m }

// GetBookingSummariesResponseValidationError is the validation error returned
// by GetBookingSummariesResponse.Validate if the designated constraints
// aren't met.
type GetBookingSummariesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingSummariesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingSummariesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingSummariesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingSummariesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingSummariesResponseValidationError) ErrorName() string {
	return "GetBookingSummariesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingSummariesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingSummariesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingSummariesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingSummariesResponseValidationError{}

// Validate checks the field values on GetBookingSummariesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingSummariesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingSummariesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingSummariesRequestMultiError, or nil if none found.
func (m *GetBookingSummariesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingSummariesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetBookingSummariesRequestMultiError(errors)
	}

	return nil
}

// GetBookingSummariesRequestMultiError is an error wrapping multiple
// validation errors returned by GetBookingSummariesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetBookingSummariesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingSummariesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingSummariesRequestMultiError) AllErrors() []error { return m }

// GetBookingSummariesRequestValidationError is the validation error returned
// by GetBookingSummariesRequest.Validate if the designated constraints aren't met.
type GetBookingSummariesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingSummariesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingSummariesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingSummariesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingSummariesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingSummariesRequestValidationError) ErrorName() string {
	return "GetBookingSummariesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingSummariesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingSummariesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingSummariesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingSummariesRequestValidationError{}

// Validate checks the field values on BookingSummary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BookingSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookingSummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BookingSummaryMultiError,
// or nil if none found.
func (m *BookingSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *BookingSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBookingSummaryD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingSummaryValidationError{
					field:  "BookingSummaryD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingSummaryValidationError{
					field:  "BookingSummaryD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookingSummaryD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingSummaryValidationError{
				field:  "BookingSummaryD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBookingSummaryT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingSummaryValidationError{
					field:  "BookingSummaryT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingSummaryValidationError{
					field:  "BookingSummaryT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookingSummaryT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingSummaryValidationError{
				field:  "BookingSummaryT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingSummaryValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingSummaryValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingSummaryValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingSummaryValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingSummaryValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingSummaryValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookingSummaryMultiError(errors)
	}

	return nil
}

// BookingSummaryMultiError is an error wrapping multiple validation errors
// returned by BookingSummary.ValidateAll() if the designated constraints
// aren't met.
type BookingSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookingSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookingSummaryMultiError) AllErrors() []error { return m }

// BookingSummaryValidationError is the validation error returned by
// BookingSummary.Validate if the designated constraints aren't met.
type BookingSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookingSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookingSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookingSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookingSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookingSummaryValidationError) ErrorName() string { return "BookingSummaryValidationError" }

// Error satisfies the builtin error interface
func (e BookingSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookingSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookingSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookingSummaryValidationError{}

// Validate checks the field values on BookingSummaryD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BookingSummaryD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookingSummaryD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BookingSummaryDMultiError, or nil if none found.
func (m *BookingSummaryD) ValidateAll() error {
	return m.validate(true)
}

func (m *BookingSummaryD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for CarrierBookingRequestReference

	// no validation rules for DocumentStatus

	// no validation rules for ReceiptTypeAtOrigin

	// no validation rules for DeliveryTypeAtDestination

	// no validation rules for CargoMovementTypeAtOrigin

	// no validation rules for CargoMovementTypeAtDestination

	// no validation rules for ServiceContractReference

	// no validation rules for VesselName

	// no validation rules for CarrierExportVoyageNumber

	// no validation rules for UniversalExportVoyageReference

	// no validation rules for DeclaredValue

	// no validation rules for DeliveryValueCurrency

	// no validation rules for PaymentTermCode

	// no validation rules for IsPartialLoadAllowed

	// no validation rules for IsExportDeclarationRequired

	// no validation rules for ExportDeclarationReference

	// no validation rules for IsImportLicenseRequired

	// no validation rules for ImportLicenseReference

	// no validation rules for IsAmsAciFilingRequired

	// no validation rules for IsDestinationFilingRequired

	// no validation rules for ContractQuotationReference

	// no validation rules for TransportDocumentTypeCode

	// no validation rules for TransportDocumentReference

	// no validation rules for BookingChannelReference

	// no validation rules for IncoTerms

	// no validation rules for CommunicationChannelCode

	// no validation rules for IsEquipmentSubstitutionAllowed

	// no validation rules for VesselImoNumber

	// no validation rules for PreCarriageModeOfTransportCode

	if len(errors) > 0 {
		return BookingSummaryDMultiError(errors)
	}

	return nil
}

// BookingSummaryDMultiError is an error wrapping multiple validation errors
// returned by BookingSummaryD.ValidateAll() if the designated constraints
// aren't met.
type BookingSummaryDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookingSummaryDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookingSummaryDMultiError) AllErrors() []error { return m }

// BookingSummaryDValidationError is the validation error returned by
// BookingSummaryD.Validate if the designated constraints aren't met.
type BookingSummaryDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookingSummaryDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookingSummaryDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookingSummaryDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookingSummaryDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookingSummaryDValidationError) ErrorName() string { return "BookingSummaryDValidationError" }

// Error satisfies the builtin error interface
func (e BookingSummaryDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookingSummaryD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookingSummaryDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookingSummaryDValidationError{}

// Validate checks the field values on BookingSummaryT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BookingSummaryT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookingSummaryT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BookingSummaryTMultiError, or nil if none found.
func (m *BookingSummaryT) ValidateAll() error {
	return m.validate(true)
}

func (m *BookingSummaryT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBookingRequestCreatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingSummaryTValidationError{
					field:  "BookingRequestCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingSummaryTValidationError{
					field:  "BookingRequestCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookingRequestCreatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingSummaryTValidationError{
				field:  "BookingRequestCreatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBookingRequestUpdatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingSummaryTValidationError{
					field:  "BookingRequestUpdatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingSummaryTValidationError{
					field:  "BookingRequestUpdatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookingRequestUpdatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingSummaryTValidationError{
				field:  "BookingRequestUpdatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSubmissionDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingSummaryTValidationError{
					field:  "SubmissionDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingSummaryTValidationError{
					field:  "SubmissionDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubmissionDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingSummaryTValidationError{
				field:  "SubmissionDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpectedDepartureDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingSummaryTValidationError{
					field:  "ExpectedDepartureDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingSummaryTValidationError{
					field:  "ExpectedDepartureDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpectedDepartureDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingSummaryTValidationError{
				field:  "ExpectedDepartureDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpectedArrivalAtPlaceOfDeliveryStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingSummaryTValidationError{
					field:  "ExpectedArrivalAtPlaceOfDeliveryStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingSummaryTValidationError{
					field:  "ExpectedArrivalAtPlaceOfDeliveryStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpectedArrivalAtPlaceOfDeliveryStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingSummaryTValidationError{
				field:  "ExpectedArrivalAtPlaceOfDeliveryStartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpectedArrivalAtPlaceOfDeliveryEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingSummaryTValidationError{
					field:  "ExpectedArrivalAtPlaceOfDeliveryEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingSummaryTValidationError{
					field:  "ExpectedArrivalAtPlaceOfDeliveryEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpectedArrivalAtPlaceOfDeliveryEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingSummaryTValidationError{
				field:  "ExpectedArrivalAtPlaceOfDeliveryEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookingSummaryTMultiError(errors)
	}

	return nil
}

// BookingSummaryTMultiError is an error wrapping multiple validation errors
// returned by BookingSummaryT.ValidateAll() if the designated constraints
// aren't met.
type BookingSummaryTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookingSummaryTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookingSummaryTMultiError) AllErrors() []error { return m }

// BookingSummaryTValidationError is the validation error returned by
// BookingSummaryT.Validate if the designated constraints aren't met.
type BookingSummaryTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookingSummaryTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookingSummaryTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookingSummaryTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookingSummaryTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookingSummaryTValidationError) ErrorName() string { return "BookingSummaryTValidationError" }

// Error satisfies the builtin error interface
func (e BookingSummaryTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookingSummaryT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookingSummaryTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookingSummaryTValidationError{}

// Validate checks the field values on
// GetBookingSummaryByCarrierBookingRequestReferenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingSummaryByCarrierBookingRequestReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBookingSummaryByCarrierBookingRequestReferenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingSummaryByCarrierBookingRequestReferenceRequestMultiError, or nil
// if none found.
func (m *GetBookingSummaryByCarrierBookingRequestReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingSummaryByCarrierBookingRequestReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierBookingRequestReference

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetBookingSummaryByCarrierBookingRequestReferenceRequestMultiError(errors)
	}

	return nil
}

// GetBookingSummaryByCarrierBookingRequestReferenceRequestMultiError is an
// error wrapping multiple validation errors returned by
// GetBookingSummaryByCarrierBookingRequestReferenceRequest.ValidateAll() if
// the designated constraints aren't met.
type GetBookingSummaryByCarrierBookingRequestReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingSummaryByCarrierBookingRequestReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingSummaryByCarrierBookingRequestReferenceRequestMultiError) AllErrors() []error {
	return m
}

// GetBookingSummaryByCarrierBookingRequestReferenceRequestValidationError is
// the validation error returned by
// GetBookingSummaryByCarrierBookingRequestReferenceRequest.Validate if the
// designated constraints aren't met.
type GetBookingSummaryByCarrierBookingRequestReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingSummaryByCarrierBookingRequestReferenceRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetBookingSummaryByCarrierBookingRequestReferenceRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetBookingSummaryByCarrierBookingRequestReferenceRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetBookingSummaryByCarrierBookingRequestReferenceRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetBookingSummaryByCarrierBookingRequestReferenceRequestValidationError) ErrorName() string {
	return "GetBookingSummaryByCarrierBookingRequestReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingSummaryByCarrierBookingRequestReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingSummaryByCarrierBookingRequestReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingSummaryByCarrierBookingRequestReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingSummaryByCarrierBookingRequestReferenceRequestValidationError{}

// Validate checks the field values on
// GetBookingSummaryByCarrierBookingRequestReferenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingSummaryByCarrierBookingRequestReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBookingSummaryByCarrierBookingRequestReferenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingSummaryByCarrierBookingRequestReferenceResponseMultiError, or nil
// if none found.
func (m *GetBookingSummaryByCarrierBookingRequestReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingSummaryByCarrierBookingRequestReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBookingSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBookingSummaryByCarrierBookingRequestReferenceResponseValidationError{
					field:  "BookingSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBookingSummaryByCarrierBookingRequestReferenceResponseValidationError{
					field:  "BookingSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookingSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBookingSummaryByCarrierBookingRequestReferenceResponseValidationError{
				field:  "BookingSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBookingSummaryByCarrierBookingRequestReferenceResponseMultiError(errors)
	}

	return nil
}

// GetBookingSummaryByCarrierBookingRequestReferenceResponseMultiError is an
// error wrapping multiple validation errors returned by
// GetBookingSummaryByCarrierBookingRequestReferenceResponse.ValidateAll() if
// the designated constraints aren't met.
type GetBookingSummaryByCarrierBookingRequestReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingSummaryByCarrierBookingRequestReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingSummaryByCarrierBookingRequestReferenceResponseMultiError) AllErrors() []error {
	return m
}

// GetBookingSummaryByCarrierBookingRequestReferenceResponseValidationError is
// the validation error returned by
// GetBookingSummaryByCarrierBookingRequestReferenceResponse.Validate if the
// designated constraints aren't met.
type GetBookingSummaryByCarrierBookingRequestReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingSummaryByCarrierBookingRequestReferenceResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetBookingSummaryByCarrierBookingRequestReferenceResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetBookingSummaryByCarrierBookingRequestReferenceResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetBookingSummaryByCarrierBookingRequestReferenceResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetBookingSummaryByCarrierBookingRequestReferenceResponseValidationError) ErrorName() string {
	return "GetBookingSummaryByCarrierBookingRequestReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingSummaryByCarrierBookingRequestReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingSummaryByCarrierBookingRequestReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingSummaryByCarrierBookingRequestReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingSummaryByCarrierBookingRequestReferenceResponseValidationError{}
