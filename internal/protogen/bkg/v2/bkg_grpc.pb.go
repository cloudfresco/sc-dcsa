// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bkg/v2/bkg.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BkgService_CreateBooking_FullMethodName                                          = "/bkg.v2.BkgService/CreateBooking"
	BkgService_GetBookings_FullMethodName                                            = "/bkg.v2.BkgService/GetBookings"
	BkgService_GetBooking_FullMethodName                                             = "/bkg.v2.BkgService/GetBooking"
	BkgService_GetBookingByPk_FullMethodName                                         = "/bkg.v2.BkgService/GetBookingByPk"
	BkgService_GetBookingByCarrierBookingRequestReference_FullMethodName             = "/bkg.v2.BkgService/GetBookingByCarrierBookingRequestReference"
	BkgService_CancelBookingByCarrierBookingReference_FullMethodName                 = "/bkg.v2.BkgService/CancelBookingByCarrierBookingReference"
	BkgService_UpdateBookingByReferenceCarrierBookingRequestReference_FullMethodName = "/bkg.v2.BkgService/UpdateBookingByReferenceCarrierBookingRequestReference"
	BkgService_CreateCommodity_FullMethodName                                        = "/bkg.v2.BkgService/CreateCommodity"
	BkgService_CreateValueAddedService_FullMethodName                                = "/bkg.v2.BkgService/CreateValueAddedService"
	BkgService_CreateRequestedEquipment_FullMethodName                               = "/bkg.v2.BkgService/CreateRequestedEquipment"
	BkgService_CreateShipmentLocation_FullMethodName                                 = "/bkg.v2.BkgService/CreateShipmentLocation"
	BkgService_CreateShipmentLocationsByBookingIDAndTOs_FullMethodName               = "/bkg.v2.BkgService/CreateShipmentLocationsByBookingIDAndTOs"
	BkgService_FetchShipmentLocationsByBookingID_FullMethodName                      = "/bkg.v2.BkgService/FetchShipmentLocationsByBookingID"
)

// BkgServiceClient is the client API for BkgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The BkgService service definition.
type BkgServiceClient interface {
	CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*CreateBookingResponse, error)
	GetBookings(ctx context.Context, in *GetBookingsRequest, opts ...grpc.CallOption) (*GetBookingsResponse, error)
	GetBooking(ctx context.Context, in *GetBookingRequest, opts ...grpc.CallOption) (*GetBookingResponse, error)
	GetBookingByPk(ctx context.Context, in *GetBookingByPkRequest, opts ...grpc.CallOption) (*GetBookingByPkResponse, error)
	GetBookingByCarrierBookingRequestReference(ctx context.Context, in *GetBookingByCarrierBookingRequestReferenceRequest, opts ...grpc.CallOption) (*GetBookingByCarrierBookingRequestReferenceResponse, error)
	CancelBookingByCarrierBookingReference(ctx context.Context, in *CancelBookingByCarrierBookingReferenceRequest, opts ...grpc.CallOption) (*CancelBookingByCarrierBookingReferenceResponse, error)
	UpdateBookingByReferenceCarrierBookingRequestReference(ctx context.Context, in *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest, opts ...grpc.CallOption) (*UpdateBookingByReferenceCarrierBookingRequestReferenceResponse, error)
	CreateCommodity(ctx context.Context, in *CreateCommodityRequest, opts ...grpc.CallOption) (*CreateCommodityResponse, error)
	CreateValueAddedService(ctx context.Context, in *CreateValueAddedServiceRequest, opts ...grpc.CallOption) (*CreateValueAddedServiceResponse, error)
	CreateRequestedEquipment(ctx context.Context, in *CreateRequestedEquipmentRequest, opts ...grpc.CallOption) (*CreateRequestedEquipmentResponse, error)
	CreateShipmentLocation(ctx context.Context, in *CreateShipmentLocationRequest, opts ...grpc.CallOption) (*CreateShipmentLocationResponse, error)
	CreateShipmentLocationsByBookingIDAndTOs(ctx context.Context, in *CreateShipmentLocationsByBookingIDAndTOsRequest, opts ...grpc.CallOption) (*CreateShipmentLocationsByBookingIDAndTOsResponse, error)
	FetchShipmentLocationsByBookingID(ctx context.Context, in *FetchShipmentLocationsByBookingIDRequest, opts ...grpc.CallOption) (*FetchShipmentLocationsByBookingIDResponse, error)
}

type bkgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBkgServiceClient(cc grpc.ClientConnInterface) BkgServiceClient {
	return &bkgServiceClient{cc}
}

func (c *bkgServiceClient) CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*CreateBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBookingResponse)
	err := c.cc.Invoke(ctx, BkgService_CreateBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bkgServiceClient) GetBookings(ctx context.Context, in *GetBookingsRequest, opts ...grpc.CallOption) (*GetBookingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookingsResponse)
	err := c.cc.Invoke(ctx, BkgService_GetBookings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bkgServiceClient) GetBooking(ctx context.Context, in *GetBookingRequest, opts ...grpc.CallOption) (*GetBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookingResponse)
	err := c.cc.Invoke(ctx, BkgService_GetBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bkgServiceClient) GetBookingByPk(ctx context.Context, in *GetBookingByPkRequest, opts ...grpc.CallOption) (*GetBookingByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookingByPkResponse)
	err := c.cc.Invoke(ctx, BkgService_GetBookingByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bkgServiceClient) GetBookingByCarrierBookingRequestReference(ctx context.Context, in *GetBookingByCarrierBookingRequestReferenceRequest, opts ...grpc.CallOption) (*GetBookingByCarrierBookingRequestReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookingByCarrierBookingRequestReferenceResponse)
	err := c.cc.Invoke(ctx, BkgService_GetBookingByCarrierBookingRequestReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bkgServiceClient) CancelBookingByCarrierBookingReference(ctx context.Context, in *CancelBookingByCarrierBookingReferenceRequest, opts ...grpc.CallOption) (*CancelBookingByCarrierBookingReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelBookingByCarrierBookingReferenceResponse)
	err := c.cc.Invoke(ctx, BkgService_CancelBookingByCarrierBookingReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bkgServiceClient) UpdateBookingByReferenceCarrierBookingRequestReference(ctx context.Context, in *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest, opts ...grpc.CallOption) (*UpdateBookingByReferenceCarrierBookingRequestReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBookingByReferenceCarrierBookingRequestReferenceResponse)
	err := c.cc.Invoke(ctx, BkgService_UpdateBookingByReferenceCarrierBookingRequestReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bkgServiceClient) CreateCommodity(ctx context.Context, in *CreateCommodityRequest, opts ...grpc.CallOption) (*CreateCommodityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCommodityResponse)
	err := c.cc.Invoke(ctx, BkgService_CreateCommodity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bkgServiceClient) CreateValueAddedService(ctx context.Context, in *CreateValueAddedServiceRequest, opts ...grpc.CallOption) (*CreateValueAddedServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateValueAddedServiceResponse)
	err := c.cc.Invoke(ctx, BkgService_CreateValueAddedService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bkgServiceClient) CreateRequestedEquipment(ctx context.Context, in *CreateRequestedEquipmentRequest, opts ...grpc.CallOption) (*CreateRequestedEquipmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRequestedEquipmentResponse)
	err := c.cc.Invoke(ctx, BkgService_CreateRequestedEquipment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bkgServiceClient) CreateShipmentLocation(ctx context.Context, in *CreateShipmentLocationRequest, opts ...grpc.CallOption) (*CreateShipmentLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShipmentLocationResponse)
	err := c.cc.Invoke(ctx, BkgService_CreateShipmentLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bkgServiceClient) CreateShipmentLocationsByBookingIDAndTOs(ctx context.Context, in *CreateShipmentLocationsByBookingIDAndTOsRequest, opts ...grpc.CallOption) (*CreateShipmentLocationsByBookingIDAndTOsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShipmentLocationsByBookingIDAndTOsResponse)
	err := c.cc.Invoke(ctx, BkgService_CreateShipmentLocationsByBookingIDAndTOs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bkgServiceClient) FetchShipmentLocationsByBookingID(ctx context.Context, in *FetchShipmentLocationsByBookingIDRequest, opts ...grpc.CallOption) (*FetchShipmentLocationsByBookingIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchShipmentLocationsByBookingIDResponse)
	err := c.cc.Invoke(ctx, BkgService_FetchShipmentLocationsByBookingID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BkgServiceServer is the server API for BkgService service.
// All implementations must embed UnimplementedBkgServiceServer
// for forward compatibility.
//
// The BkgService service definition.
type BkgServiceServer interface {
	CreateBooking(context.Context, *CreateBookingRequest) (*CreateBookingResponse, error)
	GetBookings(context.Context, *GetBookingsRequest) (*GetBookingsResponse, error)
	GetBooking(context.Context, *GetBookingRequest) (*GetBookingResponse, error)
	GetBookingByPk(context.Context, *GetBookingByPkRequest) (*GetBookingByPkResponse, error)
	GetBookingByCarrierBookingRequestReference(context.Context, *GetBookingByCarrierBookingRequestReferenceRequest) (*GetBookingByCarrierBookingRequestReferenceResponse, error)
	CancelBookingByCarrierBookingReference(context.Context, *CancelBookingByCarrierBookingReferenceRequest) (*CancelBookingByCarrierBookingReferenceResponse, error)
	UpdateBookingByReferenceCarrierBookingRequestReference(context.Context, *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) (*UpdateBookingByReferenceCarrierBookingRequestReferenceResponse, error)
	CreateCommodity(context.Context, *CreateCommodityRequest) (*CreateCommodityResponse, error)
	CreateValueAddedService(context.Context, *CreateValueAddedServiceRequest) (*CreateValueAddedServiceResponse, error)
	CreateRequestedEquipment(context.Context, *CreateRequestedEquipmentRequest) (*CreateRequestedEquipmentResponse, error)
	CreateShipmentLocation(context.Context, *CreateShipmentLocationRequest) (*CreateShipmentLocationResponse, error)
	CreateShipmentLocationsByBookingIDAndTOs(context.Context, *CreateShipmentLocationsByBookingIDAndTOsRequest) (*CreateShipmentLocationsByBookingIDAndTOsResponse, error)
	FetchShipmentLocationsByBookingID(context.Context, *FetchShipmentLocationsByBookingIDRequest) (*FetchShipmentLocationsByBookingIDResponse, error)
	mustEmbedUnimplementedBkgServiceServer()
}

// UnimplementedBkgServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBkgServiceServer struct{}

func (UnimplementedBkgServiceServer) CreateBooking(context.Context, *CreateBookingRequest) (*CreateBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooking not implemented")
}
func (UnimplementedBkgServiceServer) GetBookings(context.Context, *GetBookingsRequest) (*GetBookingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookings not implemented")
}
func (UnimplementedBkgServiceServer) GetBooking(context.Context, *GetBookingRequest) (*GetBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooking not implemented")
}
func (UnimplementedBkgServiceServer) GetBookingByPk(context.Context, *GetBookingByPkRequest) (*GetBookingByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingByPk not implemented")
}
func (UnimplementedBkgServiceServer) GetBookingByCarrierBookingRequestReference(context.Context, *GetBookingByCarrierBookingRequestReferenceRequest) (*GetBookingByCarrierBookingRequestReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingByCarrierBookingRequestReference not implemented")
}
func (UnimplementedBkgServiceServer) CancelBookingByCarrierBookingReference(context.Context, *CancelBookingByCarrierBookingReferenceRequest) (*CancelBookingByCarrierBookingReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBookingByCarrierBookingReference not implemented")
}
func (UnimplementedBkgServiceServer) UpdateBookingByReferenceCarrierBookingRequestReference(context.Context, *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) (*UpdateBookingByReferenceCarrierBookingRequestReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookingByReferenceCarrierBookingRequestReference not implemented")
}
func (UnimplementedBkgServiceServer) CreateCommodity(context.Context, *CreateCommodityRequest) (*CreateCommodityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommodity not implemented")
}
func (UnimplementedBkgServiceServer) CreateValueAddedService(context.Context, *CreateValueAddedServiceRequest) (*CreateValueAddedServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValueAddedService not implemented")
}
func (UnimplementedBkgServiceServer) CreateRequestedEquipment(context.Context, *CreateRequestedEquipmentRequest) (*CreateRequestedEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequestedEquipment not implemented")
}
func (UnimplementedBkgServiceServer) CreateShipmentLocation(context.Context, *CreateShipmentLocationRequest) (*CreateShipmentLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShipmentLocation not implemented")
}
func (UnimplementedBkgServiceServer) CreateShipmentLocationsByBookingIDAndTOs(context.Context, *CreateShipmentLocationsByBookingIDAndTOsRequest) (*CreateShipmentLocationsByBookingIDAndTOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShipmentLocationsByBookingIDAndTOs not implemented")
}
func (UnimplementedBkgServiceServer) FetchShipmentLocationsByBookingID(context.Context, *FetchShipmentLocationsByBookingIDRequest) (*FetchShipmentLocationsByBookingIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchShipmentLocationsByBookingID not implemented")
}
func (UnimplementedBkgServiceServer) mustEmbedUnimplementedBkgServiceServer() {}
func (UnimplementedBkgServiceServer) testEmbeddedByValue()                    {}

// UnsafeBkgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BkgServiceServer will
// result in compilation errors.
type UnsafeBkgServiceServer interface {
	mustEmbedUnimplementedBkgServiceServer()
}

func RegisterBkgServiceServer(s grpc.ServiceRegistrar, srv BkgServiceServer) {
	// If the following call pancis, it indicates UnimplementedBkgServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BkgService_ServiceDesc, srv)
}

func _BkgService_CreateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BkgServiceServer).CreateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BkgService_CreateBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BkgServiceServer).CreateBooking(ctx, req.(*CreateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BkgService_GetBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BkgServiceServer).GetBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BkgService_GetBookings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BkgServiceServer).GetBookings(ctx, req.(*GetBookingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BkgService_GetBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BkgServiceServer).GetBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BkgService_GetBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BkgServiceServer).GetBooking(ctx, req.(*GetBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BkgService_GetBookingByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BkgServiceServer).GetBookingByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BkgService_GetBookingByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BkgServiceServer).GetBookingByPk(ctx, req.(*GetBookingByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BkgService_GetBookingByCarrierBookingRequestReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingByCarrierBookingRequestReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BkgServiceServer).GetBookingByCarrierBookingRequestReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BkgService_GetBookingByCarrierBookingRequestReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BkgServiceServer).GetBookingByCarrierBookingRequestReference(ctx, req.(*GetBookingByCarrierBookingRequestReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BkgService_CancelBookingByCarrierBookingReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBookingByCarrierBookingReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BkgServiceServer).CancelBookingByCarrierBookingReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BkgService_CancelBookingByCarrierBookingReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BkgServiceServer).CancelBookingByCarrierBookingReference(ctx, req.(*CancelBookingByCarrierBookingReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BkgService_UpdateBookingByReferenceCarrierBookingRequestReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookingByReferenceCarrierBookingRequestReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BkgServiceServer).UpdateBookingByReferenceCarrierBookingRequestReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BkgService_UpdateBookingByReferenceCarrierBookingRequestReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BkgServiceServer).UpdateBookingByReferenceCarrierBookingRequestReference(ctx, req.(*UpdateBookingByReferenceCarrierBookingRequestReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BkgService_CreateCommodity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommodityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BkgServiceServer).CreateCommodity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BkgService_CreateCommodity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BkgServiceServer).CreateCommodity(ctx, req.(*CreateCommodityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BkgService_CreateValueAddedService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateValueAddedServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BkgServiceServer).CreateValueAddedService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BkgService_CreateValueAddedService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BkgServiceServer).CreateValueAddedService(ctx, req.(*CreateValueAddedServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BkgService_CreateRequestedEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestedEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BkgServiceServer).CreateRequestedEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BkgService_CreateRequestedEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BkgServiceServer).CreateRequestedEquipment(ctx, req.(*CreateRequestedEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BkgService_CreateShipmentLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShipmentLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BkgServiceServer).CreateShipmentLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BkgService_CreateShipmentLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BkgServiceServer).CreateShipmentLocation(ctx, req.(*CreateShipmentLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BkgService_CreateShipmentLocationsByBookingIDAndTOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShipmentLocationsByBookingIDAndTOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BkgServiceServer).CreateShipmentLocationsByBookingIDAndTOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BkgService_CreateShipmentLocationsByBookingIDAndTOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BkgServiceServer).CreateShipmentLocationsByBookingIDAndTOs(ctx, req.(*CreateShipmentLocationsByBookingIDAndTOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BkgService_FetchShipmentLocationsByBookingID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchShipmentLocationsByBookingIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BkgServiceServer).FetchShipmentLocationsByBookingID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BkgService_FetchShipmentLocationsByBookingID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BkgServiceServer).FetchShipmentLocationsByBookingID(ctx, req.(*FetchShipmentLocationsByBookingIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BkgService_ServiceDesc is the grpc.ServiceDesc for BkgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BkgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bkg.v2.BkgService",
	HandlerType: (*BkgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBooking",
			Handler:    _BkgService_CreateBooking_Handler,
		},
		{
			MethodName: "GetBookings",
			Handler:    _BkgService_GetBookings_Handler,
		},
		{
			MethodName: "GetBooking",
			Handler:    _BkgService_GetBooking_Handler,
		},
		{
			MethodName: "GetBookingByPk",
			Handler:    _BkgService_GetBookingByPk_Handler,
		},
		{
			MethodName: "GetBookingByCarrierBookingRequestReference",
			Handler:    _BkgService_GetBookingByCarrierBookingRequestReference_Handler,
		},
		{
			MethodName: "CancelBookingByCarrierBookingReference",
			Handler:    _BkgService_CancelBookingByCarrierBookingReference_Handler,
		},
		{
			MethodName: "UpdateBookingByReferenceCarrierBookingRequestReference",
			Handler:    _BkgService_UpdateBookingByReferenceCarrierBookingRequestReference_Handler,
		},
		{
			MethodName: "CreateCommodity",
			Handler:    _BkgService_CreateCommodity_Handler,
		},
		{
			MethodName: "CreateValueAddedService",
			Handler:    _BkgService_CreateValueAddedService_Handler,
		},
		{
			MethodName: "CreateRequestedEquipment",
			Handler:    _BkgService_CreateRequestedEquipment_Handler,
		},
		{
			MethodName: "CreateShipmentLocation",
			Handler:    _BkgService_CreateShipmentLocation_Handler,
		},
		{
			MethodName: "CreateShipmentLocationsByBookingIDAndTOs",
			Handler:    _BkgService_CreateShipmentLocationsByBookingIDAndTOs_Handler,
		},
		{
			MethodName: "FetchShipmentLocationsByBookingID",
			Handler:    _BkgService_FetchShipmentLocationsByBookingID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bkg/v2/bkg.proto",
}
