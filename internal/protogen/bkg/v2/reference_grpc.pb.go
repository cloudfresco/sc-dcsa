// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bkg/v2/reference.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReferenceService_CreateReference_FullMethodName                                                      = "/bkg.v2.ReferenceService/CreateReference"
	ReferenceService_CreateReferencesByBookingIdAndTOs_FullMethodName                                    = "/bkg.v2.ReferenceService/CreateReferencesByBookingIdAndTOs"
	ReferenceService_CreateReferencesByShippingInstructionIdAndTOs_FullMethodName                        = "/bkg.v2.ReferenceService/CreateReferencesByShippingInstructionIdAndTOs"
	ReferenceService_CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOs_FullMethodName = "/bkg.v2.ReferenceService/CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOs"
	ReferenceService_FindByBookingId_FullMethodName                                                      = "/bkg.v2.ReferenceService/FindByBookingId"
	ReferenceService_FindByShippingInstructionId_FullMethodName                                          = "/bkg.v2.ReferenceService/FindByShippingInstructionId"
	ReferenceService_ResolveReferencesForBookingId_FullMethodName                                        = "/bkg.v2.ReferenceService/ResolveReferencesForBookingId"
	ReferenceService_ResolveReferencesForShippingInstructionReference_FullMethodName                     = "/bkg.v2.ReferenceService/ResolveReferencesForShippingInstructionReference"
	ReferenceService_FindByShipmentId_FullMethodName                                                     = "/bkg.v2.ReferenceService/FindByShipmentId"
	ReferenceService_FindByTransportDocumentReference_FullMethodName                                     = "/bkg.v2.ReferenceService/FindByTransportDocumentReference"
	ReferenceService_FindByCarrierBookingReference_FullMethodName                                        = "/bkg.v2.ReferenceService/FindByCarrierBookingReference"
)

// ReferenceServiceClient is the client API for ReferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The ReferenceService service definition.
type ReferenceServiceClient interface {
	CreateReference(ctx context.Context, in *CreateReferenceRequest, opts ...grpc.CallOption) (*CreateReferenceResponse, error)
	CreateReferencesByBookingIdAndTOs(ctx context.Context, in *CreateReferencesByBookingIdAndTOsRequest, opts ...grpc.CallOption) (*CreateReferencesByBookingIdAndTOsResponse, error)
	CreateReferencesByShippingInstructionIdAndTOs(ctx context.Context, in *CreateReferencesByShippingInstructionIdAndTOsRequest, opts ...grpc.CallOption) (*CreateReferencesByShippingInstructionIdAndTOsResponse, error)
	CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOs(ctx context.Context, in *CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequest, opts ...grpc.CallOption) (*CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponse, error)
	FindByBookingId(ctx context.Context, in *FindByBookingIdRequest, opts ...grpc.CallOption) (*FindByBookingIdResponse, error)
	FindByShippingInstructionId(ctx context.Context, in *FindByShippingInstructionIdRequest, opts ...grpc.CallOption) (*FindByShippingInstructionIdResponse, error)
	ResolveReferencesForBookingId(ctx context.Context, in *ResolveReferencesForBookingIdRequest, opts ...grpc.CallOption) (*ResolveReferencesForBookingIdResponse, error)
	ResolveReferencesForShippingInstructionReference(ctx context.Context, in *ResolveReferencesForShippingInstructionReferenceRequest, opts ...grpc.CallOption) (*ResolveReferencesForShippingInstructionReferenceResponse, error)
	FindByShipmentId(ctx context.Context, in *FindByShipmentIdRequest, opts ...grpc.CallOption) (*FindByShipmentIdResponse, error)
	FindByTransportDocumentReference(ctx context.Context, in *FindByTransportDocumentReferenceRequest, opts ...grpc.CallOption) (*FindByTransportDocumentReferenceResponse, error)
	FindByCarrierBookingReference(ctx context.Context, in *FindByCarrierBookingReferenceRequest, opts ...grpc.CallOption) (*FindByCarrierBookingReferenceResponse, error)
}

type referenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReferenceServiceClient(cc grpc.ClientConnInterface) ReferenceServiceClient {
	return &referenceServiceClient{cc}
}

func (c *referenceServiceClient) CreateReference(ctx context.Context, in *CreateReferenceRequest, opts ...grpc.CallOption) (*CreateReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReferenceResponse)
	err := c.cc.Invoke(ctx, ReferenceService_CreateReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) CreateReferencesByBookingIdAndTOs(ctx context.Context, in *CreateReferencesByBookingIdAndTOsRequest, opts ...grpc.CallOption) (*CreateReferencesByBookingIdAndTOsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReferencesByBookingIdAndTOsResponse)
	err := c.cc.Invoke(ctx, ReferenceService_CreateReferencesByBookingIdAndTOs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) CreateReferencesByShippingInstructionIdAndTOs(ctx context.Context, in *CreateReferencesByShippingInstructionIdAndTOsRequest, opts ...grpc.CallOption) (*CreateReferencesByShippingInstructionIdAndTOsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReferencesByShippingInstructionIdAndTOsResponse)
	err := c.cc.Invoke(ctx, ReferenceService_CreateReferencesByShippingInstructionIdAndTOs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOs(ctx context.Context, in *CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequest, opts ...grpc.CallOption) (*CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponse)
	err := c.cc.Invoke(ctx, ReferenceService_CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) FindByBookingId(ctx context.Context, in *FindByBookingIdRequest, opts ...grpc.CallOption) (*FindByBookingIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByBookingIdResponse)
	err := c.cc.Invoke(ctx, ReferenceService_FindByBookingId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) FindByShippingInstructionId(ctx context.Context, in *FindByShippingInstructionIdRequest, opts ...grpc.CallOption) (*FindByShippingInstructionIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByShippingInstructionIdResponse)
	err := c.cc.Invoke(ctx, ReferenceService_FindByShippingInstructionId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) ResolveReferencesForBookingId(ctx context.Context, in *ResolveReferencesForBookingIdRequest, opts ...grpc.CallOption) (*ResolveReferencesForBookingIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveReferencesForBookingIdResponse)
	err := c.cc.Invoke(ctx, ReferenceService_ResolveReferencesForBookingId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) ResolveReferencesForShippingInstructionReference(ctx context.Context, in *ResolveReferencesForShippingInstructionReferenceRequest, opts ...grpc.CallOption) (*ResolveReferencesForShippingInstructionReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveReferencesForShippingInstructionReferenceResponse)
	err := c.cc.Invoke(ctx, ReferenceService_ResolveReferencesForShippingInstructionReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) FindByShipmentId(ctx context.Context, in *FindByShipmentIdRequest, opts ...grpc.CallOption) (*FindByShipmentIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByShipmentIdResponse)
	err := c.cc.Invoke(ctx, ReferenceService_FindByShipmentId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) FindByTransportDocumentReference(ctx context.Context, in *FindByTransportDocumentReferenceRequest, opts ...grpc.CallOption) (*FindByTransportDocumentReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByTransportDocumentReferenceResponse)
	err := c.cc.Invoke(ctx, ReferenceService_FindByTransportDocumentReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) FindByCarrierBookingReference(ctx context.Context, in *FindByCarrierBookingReferenceRequest, opts ...grpc.CallOption) (*FindByCarrierBookingReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByCarrierBookingReferenceResponse)
	err := c.cc.Invoke(ctx, ReferenceService_FindByCarrierBookingReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferenceServiceServer is the server API for ReferenceService service.
// All implementations must embed UnimplementedReferenceServiceServer
// for forward compatibility.
//
// The ReferenceService service definition.
type ReferenceServiceServer interface {
	CreateReference(context.Context, *CreateReferenceRequest) (*CreateReferenceResponse, error)
	CreateReferencesByBookingIdAndTOs(context.Context, *CreateReferencesByBookingIdAndTOsRequest) (*CreateReferencesByBookingIdAndTOsResponse, error)
	CreateReferencesByShippingInstructionIdAndTOs(context.Context, *CreateReferencesByShippingInstructionIdAndTOsRequest) (*CreateReferencesByShippingInstructionIdAndTOsResponse, error)
	CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOs(context.Context, *CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequest) (*CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponse, error)
	FindByBookingId(context.Context, *FindByBookingIdRequest) (*FindByBookingIdResponse, error)
	FindByShippingInstructionId(context.Context, *FindByShippingInstructionIdRequest) (*FindByShippingInstructionIdResponse, error)
	ResolveReferencesForBookingId(context.Context, *ResolveReferencesForBookingIdRequest) (*ResolveReferencesForBookingIdResponse, error)
	ResolveReferencesForShippingInstructionReference(context.Context, *ResolveReferencesForShippingInstructionReferenceRequest) (*ResolveReferencesForShippingInstructionReferenceResponse, error)
	FindByShipmentId(context.Context, *FindByShipmentIdRequest) (*FindByShipmentIdResponse, error)
	FindByTransportDocumentReference(context.Context, *FindByTransportDocumentReferenceRequest) (*FindByTransportDocumentReferenceResponse, error)
	FindByCarrierBookingReference(context.Context, *FindByCarrierBookingReferenceRequest) (*FindByCarrierBookingReferenceResponse, error)
	mustEmbedUnimplementedReferenceServiceServer()
}

// UnimplementedReferenceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReferenceServiceServer struct{}

func (UnimplementedReferenceServiceServer) CreateReference(context.Context, *CreateReferenceRequest) (*CreateReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReference not implemented")
}
func (UnimplementedReferenceServiceServer) CreateReferencesByBookingIdAndTOs(context.Context, *CreateReferencesByBookingIdAndTOsRequest) (*CreateReferencesByBookingIdAndTOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReferencesByBookingIdAndTOs not implemented")
}
func (UnimplementedReferenceServiceServer) CreateReferencesByShippingInstructionIdAndTOs(context.Context, *CreateReferencesByShippingInstructionIdAndTOsRequest) (*CreateReferencesByShippingInstructionIdAndTOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReferencesByShippingInstructionIdAndTOs not implemented")
}
func (UnimplementedReferenceServiceServer) CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOs(context.Context, *CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequest) (*CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOs not implemented")
}
func (UnimplementedReferenceServiceServer) FindByBookingId(context.Context, *FindByBookingIdRequest) (*FindByBookingIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByBookingId not implemented")
}
func (UnimplementedReferenceServiceServer) FindByShippingInstructionId(context.Context, *FindByShippingInstructionIdRequest) (*FindByShippingInstructionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByShippingInstructionId not implemented")
}
func (UnimplementedReferenceServiceServer) ResolveReferencesForBookingId(context.Context, *ResolveReferencesForBookingIdRequest) (*ResolveReferencesForBookingIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveReferencesForBookingId not implemented")
}
func (UnimplementedReferenceServiceServer) ResolveReferencesForShippingInstructionReference(context.Context, *ResolveReferencesForShippingInstructionReferenceRequest) (*ResolveReferencesForShippingInstructionReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveReferencesForShippingInstructionReference not implemented")
}
func (UnimplementedReferenceServiceServer) FindByShipmentId(context.Context, *FindByShipmentIdRequest) (*FindByShipmentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByShipmentId not implemented")
}
func (UnimplementedReferenceServiceServer) FindByTransportDocumentReference(context.Context, *FindByTransportDocumentReferenceRequest) (*FindByTransportDocumentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTransportDocumentReference not implemented")
}
func (UnimplementedReferenceServiceServer) FindByCarrierBookingReference(context.Context, *FindByCarrierBookingReferenceRequest) (*FindByCarrierBookingReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCarrierBookingReference not implemented")
}
func (UnimplementedReferenceServiceServer) mustEmbedUnimplementedReferenceServiceServer() {}
func (UnimplementedReferenceServiceServer) testEmbeddedByValue()                          {}

// UnsafeReferenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReferenceServiceServer will
// result in compilation errors.
type UnsafeReferenceServiceServer interface {
	mustEmbedUnimplementedReferenceServiceServer()
}

func RegisterReferenceServiceServer(s grpc.ServiceRegistrar, srv ReferenceServiceServer) {
	// If the following call pancis, it indicates UnimplementedReferenceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReferenceService_ServiceDesc, srv)
}

func _ReferenceService_CreateReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).CreateReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceService_CreateReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).CreateReference(ctx, req.(*CreateReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_CreateReferencesByBookingIdAndTOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReferencesByBookingIdAndTOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).CreateReferencesByBookingIdAndTOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceService_CreateReferencesByBookingIdAndTOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).CreateReferencesByBookingIdAndTOs(ctx, req.(*CreateReferencesByBookingIdAndTOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_CreateReferencesByShippingInstructionIdAndTOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReferencesByShippingInstructionIdAndTOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).CreateReferencesByShippingInstructionIdAndTOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceService_CreateReferencesByShippingInstructionIdAndTOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).CreateReferencesByShippingInstructionIdAndTOs(ctx, req.(*CreateReferencesByShippingInstructionIdAndTOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceService_CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOs(ctx, req.(*CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_FindByBookingId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByBookingIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).FindByBookingId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceService_FindByBookingId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).FindByBookingId(ctx, req.(*FindByBookingIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_FindByShippingInstructionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByShippingInstructionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).FindByShippingInstructionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceService_FindByShippingInstructionId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).FindByShippingInstructionId(ctx, req.(*FindByShippingInstructionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_ResolveReferencesForBookingId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveReferencesForBookingIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).ResolveReferencesForBookingId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceService_ResolveReferencesForBookingId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).ResolveReferencesForBookingId(ctx, req.(*ResolveReferencesForBookingIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_ResolveReferencesForShippingInstructionReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveReferencesForShippingInstructionReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).ResolveReferencesForShippingInstructionReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceService_ResolveReferencesForShippingInstructionReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).ResolveReferencesForShippingInstructionReference(ctx, req.(*ResolveReferencesForShippingInstructionReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_FindByShipmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByShipmentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).FindByShipmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceService_FindByShipmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).FindByShipmentId(ctx, req.(*FindByShipmentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_FindByTransportDocumentReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByTransportDocumentReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).FindByTransportDocumentReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceService_FindByTransportDocumentReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).FindByTransportDocumentReference(ctx, req.(*FindByTransportDocumentReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_FindByCarrierBookingReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByCarrierBookingReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).FindByCarrierBookingReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceService_FindByCarrierBookingReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).FindByCarrierBookingReference(ctx, req.(*FindByCarrierBookingReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReferenceService_ServiceDesc is the grpc.ServiceDesc for ReferenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReferenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bkg.v2.ReferenceService",
	HandlerType: (*ReferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReference",
			Handler:    _ReferenceService_CreateReference_Handler,
		},
		{
			MethodName: "CreateReferencesByBookingIdAndTOs",
			Handler:    _ReferenceService_CreateReferencesByBookingIdAndTOs_Handler,
		},
		{
			MethodName: "CreateReferencesByShippingInstructionIdAndTOs",
			Handler:    _ReferenceService_CreateReferencesByShippingInstructionIdAndTOs_Handler,
		},
		{
			MethodName: "CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOs",
			Handler:    _ReferenceService_CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOs_Handler,
		},
		{
			MethodName: "FindByBookingId",
			Handler:    _ReferenceService_FindByBookingId_Handler,
		},
		{
			MethodName: "FindByShippingInstructionId",
			Handler:    _ReferenceService_FindByShippingInstructionId_Handler,
		},
		{
			MethodName: "ResolveReferencesForBookingId",
			Handler:    _ReferenceService_ResolveReferencesForBookingId_Handler,
		},
		{
			MethodName: "ResolveReferencesForShippingInstructionReference",
			Handler:    _ReferenceService_ResolveReferencesForShippingInstructionReference_Handler,
		},
		{
			MethodName: "FindByShipmentId",
			Handler:    _ReferenceService_FindByShipmentId_Handler,
		},
		{
			MethodName: "FindByTransportDocumentReference",
			Handler:    _ReferenceService_FindByTransportDocumentReference_Handler,
		},
		{
			MethodName: "FindByCarrierBookingReference",
			Handler:    _ReferenceService_FindByCarrierBookingReference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bkg/v2/reference.proto",
}
