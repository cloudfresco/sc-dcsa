// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bkg/v2/bkg.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBookingRequestMultiError, or nil if none found.
func (m *CreateBookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierBookingRequestReference

	// no validation rules for DocumentStatus

	// no validation rules for ReceiptTypeAtOrigin

	// no validation rules for DeliveryTypeAtDestination

	// no validation rules for CargoMovementTypeAtOrigin

	// no validation rules for CargoMovementTypeAtDestination

	// no validation rules for ServiceContractReference

	// no validation rules for PaymentTermCode

	// no validation rules for IsPartialLoadAllowed

	// no validation rules for IsExportDeclarationRequired

	// no validation rules for ExportDeclarationReference

	// no validation rules for IsImportLicenseRequired

	// no validation rules for ImportLicenseReference

	// no validation rules for SubmissionDateTime

	// no validation rules for IsAmsAciFilingRequired

	// no validation rules for IsDestinationFilingRequired

	// no validation rules for ContractQuotationReference

	// no validation rules for ExpectedDepartureDate

	// no validation rules for ExpectedArrivalAtPlaceOfDeliveryStartDate

	// no validation rules for ExpectedArrivalAtPlaceOfDeliveryEndDate

	// no validation rules for TransportDocumentTypeCode

	// no validation rules for TransportDocumentReference

	// no validation rules for BookingChannelReference

	// no validation rules for IncoTerms

	// no validation rules for CommunicationChannelCode

	// no validation rules for IsEquipmentSubstitutionAllowed

	// no validation rules for VesselName

	// no validation rules for VesselImoNumber

	// no validation rules for ExportVoyageNumber

	// no validation rules for PreCarriageModeOfTransportCode

	// no validation rules for VesselId

	// no validation rules for DeclaredValueCurrency

	// no validation rules for DeclaredValue

	// no validation rules for VoyageId

	// no validation rules for LocationId

	// no validation rules for InvoicePayableAt

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	for idx, item := range m.GetCommodities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateBookingRequestValidationError{
						field:  fmt.Sprintf("Commodities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateBookingRequestValidationError{
						field:  fmt.Sprintf("Commodities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateBookingRequestValidationError{
					field:  fmt.Sprintf("Commodities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetValueAddedServiceRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateBookingRequestValidationError{
						field:  fmt.Sprintf("ValueAddedServiceRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateBookingRequestValidationError{
						field:  fmt.Sprintf("ValueAddedServiceRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateBookingRequestValidationError{
					field:  fmt.Sprintf("ValueAddedServiceRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetReferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateBookingRequestValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateBookingRequestValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateBookingRequestValidationError{
					field:  fmt.Sprintf("References[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRequestedEquipments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateBookingRequestValidationError{
						field:  fmt.Sprintf("RequestedEquipments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateBookingRequestValidationError{
						field:  fmt.Sprintf("RequestedEquipments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateBookingRequestValidationError{
					field:  fmt.Sprintf("RequestedEquipments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetShipmentLocations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateBookingRequestValidationError{
						field:  fmt.Sprintf("ShipmentLocations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateBookingRequestValidationError{
						field:  fmt.Sprintf("ShipmentLocations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateBookingRequestValidationError{
					field:  fmt.Sprintf("ShipmentLocations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateBookingRequestMultiError(errors)
	}

	return nil
}

// CreateBookingRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBookingRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBookingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBookingRequestMultiError) AllErrors() []error { return m }

// CreateBookingRequestValidationError is the validation error returned by
// CreateBookingRequest.Validate if the designated constraints aren't met.
type CreateBookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookingRequestValidationError) ErrorName() string {
	return "CreateBookingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookingRequestValidationError{}

// Validate checks the field values on CreateBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBookingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBookingResponseMultiError, or nil if none found.
func (m *CreateBookingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBookingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBooking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBookingResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBookingResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBookingResponseValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBookingResponseMultiError(errors)
	}

	return nil
}

// CreateBookingResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBookingResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBookingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBookingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBookingResponseMultiError) AllErrors() []error { return m }

// CreateBookingResponseValidationError is the validation error returned by
// CreateBookingResponse.Validate if the designated constraints aren't met.
type CreateBookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookingResponseValidationError) ErrorName() string {
	return "CreateBookingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookingResponseValidationError{}

// Validate checks the field values on GetBookingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingsRequestMultiError, or nil if none found.
func (m *GetBookingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetBookingsRequestMultiError(errors)
	}

	return nil
}

// GetBookingsRequestMultiError is an error wrapping multiple validation errors
// returned by GetBookingsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBookingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingsRequestMultiError) AllErrors() []error { return m }

// GetBookingsRequestValidationError is the validation error returned by
// GetBookingsRequest.Validate if the designated constraints aren't met.
type GetBookingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingsRequestValidationError) ErrorName() string {
	return "GetBookingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingsRequestValidationError{}

// Validate checks the field values on GetBookingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingsResponseMultiError, or nil if none found.
func (m *GetBookingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBookings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBookingsResponseValidationError{
						field:  fmt.Sprintf("Bookings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBookingsResponseValidationError{
						field:  fmt.Sprintf("Bookings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBookingsResponseValidationError{
					field:  fmt.Sprintf("Bookings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetBookingsResponseMultiError(errors)
	}

	return nil
}

// GetBookingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetBookingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBookingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingsResponseMultiError) AllErrors() []error { return m }

// GetBookingsResponseValidationError is the validation error returned by
// GetBookingsResponse.Validate if the designated constraints aren't met.
type GetBookingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingsResponseValidationError) ErrorName() string {
	return "GetBookingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingsResponseValidationError{}

// Validate checks the field values on GetBookingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingRequestMultiError, or nil if none found.
func (m *GetBookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBookingRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBookingRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBookingRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBookingRequestMultiError(errors)
	}

	return nil
}

// GetBookingRequestMultiError is an error wrapping multiple validation errors
// returned by GetBookingRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingRequestMultiError) AllErrors() []error { return m }

// GetBookingRequestValidationError is the validation error returned by
// GetBookingRequest.Validate if the designated constraints aren't met.
type GetBookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingRequestValidationError) ErrorName() string {
	return "GetBookingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingRequestValidationError{}

// Validate checks the field values on GetBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingResponseMultiError, or nil if none found.
func (m *GetBookingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBooking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBookingResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBookingResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBookingResponseValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBookingResponseMultiError(errors)
	}

	return nil
}

// GetBookingResponseMultiError is an error wrapping multiple validation errors
// returned by GetBookingResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBookingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingResponseMultiError) AllErrors() []error { return m }

// GetBookingResponseValidationError is the validation error returned by
// GetBookingResponse.Validate if the designated constraints aren't met.
type GetBookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingResponseValidationError) ErrorName() string {
	return "GetBookingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingResponseValidationError{}

// Validate checks the field values on GetBookingByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingByPkRequestMultiError, or nil if none found.
func (m *GetBookingByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBookingByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBookingByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBookingByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBookingByPkRequestMultiError(errors)
	}

	return nil
}

// GetBookingByPkRequestMultiError is an error wrapping multiple validation
// errors returned by GetBookingByPkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBookingByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingByPkRequestMultiError) AllErrors() []error { return m }

// GetBookingByPkRequestValidationError is the validation error returned by
// GetBookingByPkRequest.Validate if the designated constraints aren't met.
type GetBookingByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingByPkRequestValidationError) ErrorName() string {
	return "GetBookingByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingByPkRequestValidationError{}

// Validate checks the field values on GetBookingByPkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingByPkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingByPkResponseMultiError, or nil if none found.
func (m *GetBookingByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBooking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBookingByPkResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBookingByPkResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBookingByPkResponseValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBookingByPkResponseMultiError(errors)
	}

	return nil
}

// GetBookingByPkResponseMultiError is an error wrapping multiple validation
// errors returned by GetBookingByPkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBookingByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingByPkResponseMultiError) AllErrors() []error { return m }

// GetBookingByPkResponseValidationError is the validation error returned by
// GetBookingByPkResponse.Validate if the designated constraints aren't met.
type GetBookingByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingByPkResponseValidationError) ErrorName() string {
	return "GetBookingByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingByPkResponseValidationError{}

// Validate checks the field values on
// GetBookingByCarrierBookingRequestReferenceRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBookingByCarrierBookingRequestReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBookingByCarrierBookingRequestReferenceRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetBookingByCarrierBookingRequestReferenceRequestMultiError, or nil if none found.
func (m *GetBookingByCarrierBookingRequestReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingByCarrierBookingRequestReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierBookingRequestReference

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetBookingByCarrierBookingRequestReferenceRequestMultiError(errors)
	}

	return nil
}

// GetBookingByCarrierBookingRequestReferenceRequestMultiError is an error
// wrapping multiple validation errors returned by
// GetBookingByCarrierBookingRequestReferenceRequest.ValidateAll() if the
// designated constraints aren't met.
type GetBookingByCarrierBookingRequestReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingByCarrierBookingRequestReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingByCarrierBookingRequestReferenceRequestMultiError) AllErrors() []error { return m }

// GetBookingByCarrierBookingRequestReferenceRequestValidationError is the
// validation error returned by
// GetBookingByCarrierBookingRequestReferenceRequest.Validate if the
// designated constraints aren't met.
type GetBookingByCarrierBookingRequestReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingByCarrierBookingRequestReferenceRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetBookingByCarrierBookingRequestReferenceRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetBookingByCarrierBookingRequestReferenceRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetBookingByCarrierBookingRequestReferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingByCarrierBookingRequestReferenceRequestValidationError) ErrorName() string {
	return "GetBookingByCarrierBookingRequestReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingByCarrierBookingRequestReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingByCarrierBookingRequestReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingByCarrierBookingRequestReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingByCarrierBookingRequestReferenceRequestValidationError{}

// Validate checks the field values on
// GetBookingByCarrierBookingRequestReferenceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBookingByCarrierBookingRequestReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBookingByCarrierBookingRequestReferenceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetBookingByCarrierBookingRequestReferenceResponseMultiError, or nil if
// none found.
func (m *GetBookingByCarrierBookingRequestReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingByCarrierBookingRequestReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBooking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBookingByCarrierBookingRequestReferenceResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBookingByCarrierBookingRequestReferenceResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBookingByCarrierBookingRequestReferenceResponseValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBookingByCarrierBookingRequestReferenceResponseMultiError(errors)
	}

	return nil
}

// GetBookingByCarrierBookingRequestReferenceResponseMultiError is an error
// wrapping multiple validation errors returned by
// GetBookingByCarrierBookingRequestReferenceResponse.ValidateAll() if the
// designated constraints aren't met.
type GetBookingByCarrierBookingRequestReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingByCarrierBookingRequestReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingByCarrierBookingRequestReferenceResponseMultiError) AllErrors() []error { return m }

// GetBookingByCarrierBookingRequestReferenceResponseValidationError is the
// validation error returned by
// GetBookingByCarrierBookingRequestReferenceResponse.Validate if the
// designated constraints aren't met.
type GetBookingByCarrierBookingRequestReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingByCarrierBookingRequestReferenceResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetBookingByCarrierBookingRequestReferenceResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetBookingByCarrierBookingRequestReferenceResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetBookingByCarrierBookingRequestReferenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingByCarrierBookingRequestReferenceResponseValidationError) ErrorName() string {
	return "GetBookingByCarrierBookingRequestReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingByCarrierBookingRequestReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingByCarrierBookingRequestReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingByCarrierBookingRequestReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingByCarrierBookingRequestReferenceResponseValidationError{}

// Validate checks the field values on
// CancelBookingByCarrierBookingReferenceRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelBookingByCarrierBookingReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CancelBookingByCarrierBookingReferenceRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CancelBookingByCarrierBookingReferenceRequestMultiError, or nil if none found.
func (m *CancelBookingByCarrierBookingReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelBookingByCarrierBookingReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierBookingRequestReference

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CancelBookingByCarrierBookingReferenceRequestMultiError(errors)
	}

	return nil
}

// CancelBookingByCarrierBookingReferenceRequestMultiError is an error wrapping
// multiple validation errors returned by
// CancelBookingByCarrierBookingReferenceRequest.ValidateAll() if the
// designated constraints aren't met.
type CancelBookingByCarrierBookingReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelBookingByCarrierBookingReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelBookingByCarrierBookingReferenceRequestMultiError) AllErrors() []error { return m }

// CancelBookingByCarrierBookingReferenceRequestValidationError is the
// validation error returned by
// CancelBookingByCarrierBookingReferenceRequest.Validate if the designated
// constraints aren't met.
type CancelBookingByCarrierBookingReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelBookingByCarrierBookingReferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelBookingByCarrierBookingReferenceRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CancelBookingByCarrierBookingReferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelBookingByCarrierBookingReferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelBookingByCarrierBookingReferenceRequestValidationError) ErrorName() string {
	return "CancelBookingByCarrierBookingReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelBookingByCarrierBookingReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelBookingByCarrierBookingReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelBookingByCarrierBookingReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelBookingByCarrierBookingReferenceRequestValidationError{}

// Validate checks the field values on
// CancelBookingByCarrierBookingReferenceResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelBookingByCarrierBookingReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CancelBookingByCarrierBookingReferenceResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CancelBookingByCarrierBookingReferenceResponseMultiError, or nil if none found.
func (m *CancelBookingByCarrierBookingReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelBookingByCarrierBookingReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBooking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelBookingByCarrierBookingReferenceResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelBookingByCarrierBookingReferenceResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelBookingByCarrierBookingReferenceResponseValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CancelBookingByCarrierBookingReferenceResponseMultiError(errors)
	}

	return nil
}

// CancelBookingByCarrierBookingReferenceResponseMultiError is an error
// wrapping multiple validation errors returned by
// CancelBookingByCarrierBookingReferenceResponse.ValidateAll() if the
// designated constraints aren't met.
type CancelBookingByCarrierBookingReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelBookingByCarrierBookingReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelBookingByCarrierBookingReferenceResponseMultiError) AllErrors() []error { return m }

// CancelBookingByCarrierBookingReferenceResponseValidationError is the
// validation error returned by
// CancelBookingByCarrierBookingReferenceResponse.Validate if the designated
// constraints aren't met.
type CancelBookingByCarrierBookingReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelBookingByCarrierBookingReferenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelBookingByCarrierBookingReferenceResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CancelBookingByCarrierBookingReferenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelBookingByCarrierBookingReferenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelBookingByCarrierBookingReferenceResponseValidationError) ErrorName() string {
	return "CancelBookingByCarrierBookingReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelBookingByCarrierBookingReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelBookingByCarrierBookingReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelBookingByCarrierBookingReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelBookingByCarrierBookingReferenceResponseValidationError{}

// Validate checks the field values on
// UpdateBookingByReferenceCarrierBookingRequestReferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateBookingByReferenceCarrierBookingRequestReferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBookingByReferenceCarrierBookingRequestReferenceRequestMultiError, or
// nil if none found.
func (m *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookingByReferenceCarrierBookingRequestReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierBookingRequestReference

	// no validation rules for DocumentStatus

	// no validation rules for ReceiptTypeAtOrigin

	// no validation rules for DeliveryTypeAtDestination

	// no validation rules for CargoMovementTypeAtOrigin

	// no validation rules for CargoMovementTypeAtDestination

	// no validation rules for ServiceContractReference

	// no validation rules for PaymentTermCode

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateBookingByReferenceCarrierBookingRequestReferenceRequestMultiError(errors)
	}

	return nil
}

// UpdateBookingByReferenceCarrierBookingRequestReferenceRequestMultiError is
// an error wrapping multiple validation errors returned by
// UpdateBookingByReferenceCarrierBookingRequestReferenceRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateBookingByReferenceCarrierBookingRequestReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookingByReferenceCarrierBookingRequestReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookingByReferenceCarrierBookingRequestReferenceRequestMultiError) AllErrors() []error {
	return m
}

// UpdateBookingByReferenceCarrierBookingRequestReferenceRequestValidationError
// is the validation error returned by
// UpdateBookingByReferenceCarrierBookingRequestReferenceRequest.Validate if
// the designated constraints aren't met.
type UpdateBookingByReferenceCarrierBookingRequestReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookingByReferenceCarrierBookingRequestReferenceRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateBookingByReferenceCarrierBookingRequestReferenceRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateBookingByReferenceCarrierBookingRequestReferenceRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateBookingByReferenceCarrierBookingRequestReferenceRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e UpdateBookingByReferenceCarrierBookingRequestReferenceRequestValidationError) ErrorName() string {
	return "UpdateBookingByReferenceCarrierBookingRequestReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookingByReferenceCarrierBookingRequestReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookingByReferenceCarrierBookingRequestReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookingByReferenceCarrierBookingRequestReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookingByReferenceCarrierBookingRequestReferenceRequestValidationError{}

// Validate checks the field values on
// UpdateBookingByReferenceCarrierBookingRequestReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookingByReferenceCarrierBookingRequestReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateBookingByReferenceCarrierBookingRequestReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBookingByReferenceCarrierBookingRequestReferenceResponseMultiError,
// or nil if none found.
func (m *UpdateBookingByReferenceCarrierBookingRequestReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookingByReferenceCarrierBookingRequestReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBookingByReferenceCarrierBookingRequestReferenceResponseMultiError(errors)
	}

	return nil
}

// UpdateBookingByReferenceCarrierBookingRequestReferenceResponseMultiError is
// an error wrapping multiple validation errors returned by
// UpdateBookingByReferenceCarrierBookingRequestReferenceResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateBookingByReferenceCarrierBookingRequestReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookingByReferenceCarrierBookingRequestReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookingByReferenceCarrierBookingRequestReferenceResponseMultiError) AllErrors() []error {
	return m
}

// UpdateBookingByReferenceCarrierBookingRequestReferenceResponseValidationError
// is the validation error returned by
// UpdateBookingByReferenceCarrierBookingRequestReferenceResponse.Validate if
// the designated constraints aren't met.
type UpdateBookingByReferenceCarrierBookingRequestReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookingByReferenceCarrierBookingRequestReferenceResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateBookingByReferenceCarrierBookingRequestReferenceResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateBookingByReferenceCarrierBookingRequestReferenceResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateBookingByReferenceCarrierBookingRequestReferenceResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e UpdateBookingByReferenceCarrierBookingRequestReferenceResponseValidationError) ErrorName() string {
	return "UpdateBookingByReferenceCarrierBookingRequestReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookingByReferenceCarrierBookingRequestReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookingByReferenceCarrierBookingRequestReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookingByReferenceCarrierBookingRequestReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookingByReferenceCarrierBookingRequestReferenceResponseValidationError{}

// Validate checks the field values on CreateCommodityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommodityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommodityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommodityRequestMultiError, or nil if none found.
func (m *CreateCommodityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommodityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookingId

	// no validation rules for CommodityType

	// no validation rules for HsCode

	// no validation rules for CargoGrossWeight

	// no validation rules for CargoGrossWeightUnit

	// no validation rules for CargoGrossVolume

	// no validation rules for CargoGrossVolumeUnit

	// no validation rules for NumberOfPackages

	// no validation rules for ExportLicenseIssueDate

	// no validation rules for ExportLicenseExpiryDate

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateCommodityRequestMultiError(errors)
	}

	return nil
}

// CreateCommodityRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommodityRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommodityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommodityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommodityRequestMultiError) AllErrors() []error { return m }

// CreateCommodityRequestValidationError is the validation error returned by
// CreateCommodityRequest.Validate if the designated constraints aren't met.
type CreateCommodityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommodityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommodityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommodityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommodityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommodityRequestValidationError) ErrorName() string {
	return "CreateCommodityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommodityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommodityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommodityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommodityRequestValidationError{}

// Validate checks the field values on CreateCommodityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommodityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommodityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommodityResponseMultiError, or nil if none found.
func (m *CreateCommodityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommodityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommodity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommodityResponseValidationError{
					field:  "Commodity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommodityResponseValidationError{
					field:  "Commodity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommodity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommodityResponseValidationError{
				field:  "Commodity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommodityResponseMultiError(errors)
	}

	return nil
}

// CreateCommodityResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCommodityResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCommodityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommodityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommodityResponseMultiError) AllErrors() []error { return m }

// CreateCommodityResponseValidationError is the validation error returned by
// CreateCommodityResponse.Validate if the designated constraints aren't met.
type CreateCommodityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommodityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommodityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommodityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommodityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommodityResponseValidationError) ErrorName() string {
	return "CreateCommodityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommodityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommodityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommodityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommodityResponseValidationError{}

// Validate checks the field values on CreateValueAddedServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateValueAddedServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateValueAddedServiceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateValueAddedServiceRequestMultiError, or nil if none found.
func (m *CreateValueAddedServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateValueAddedServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookingId

	// no validation rules for ValueAddedServiceCode

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateValueAddedServiceRequestMultiError(errors)
	}

	return nil
}

// CreateValueAddedServiceRequestMultiError is an error wrapping multiple
// validation errors returned by CreateValueAddedServiceRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateValueAddedServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateValueAddedServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateValueAddedServiceRequestMultiError) AllErrors() []error { return m }

// CreateValueAddedServiceRequestValidationError is the validation error
// returned by CreateValueAddedServiceRequest.Validate if the designated
// constraints aren't met.
type CreateValueAddedServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateValueAddedServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateValueAddedServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateValueAddedServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateValueAddedServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateValueAddedServiceRequestValidationError) ErrorName() string {
	return "CreateValueAddedServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateValueAddedServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateValueAddedServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateValueAddedServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateValueAddedServiceRequestValidationError{}

// Validate checks the field values on CreateValueAddedServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateValueAddedServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateValueAddedServiceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateValueAddedServiceResponseMultiError, or nil if none found.
func (m *CreateValueAddedServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateValueAddedServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValueAddedServiceRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateValueAddedServiceResponseValidationError{
					field:  "ValueAddedServiceRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateValueAddedServiceResponseValidationError{
					field:  "ValueAddedServiceRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValueAddedServiceRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateValueAddedServiceResponseValidationError{
				field:  "ValueAddedServiceRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateValueAddedServiceResponseMultiError(errors)
	}

	return nil
}

// CreateValueAddedServiceResponseMultiError is an error wrapping multiple
// validation errors returned by CreateValueAddedServiceResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateValueAddedServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateValueAddedServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateValueAddedServiceResponseMultiError) AllErrors() []error { return m }

// CreateValueAddedServiceResponseValidationError is the validation error
// returned by CreateValueAddedServiceResponse.Validate if the designated
// constraints aren't met.
type CreateValueAddedServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateValueAddedServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateValueAddedServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateValueAddedServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateValueAddedServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateValueAddedServiceResponseValidationError) ErrorName() string {
	return "CreateValueAddedServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateValueAddedServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateValueAddedServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateValueAddedServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateValueAddedServiceResponseValidationError{}

// Validate checks the field values on CreateRequestedEquipmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRequestedEquipmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequestedEquipmentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateRequestedEquipmentRequestMultiError, or nil if none found.
func (m *CreateRequestedEquipmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequestedEquipmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookingId

	// no validation rules for ShipmentId

	// no validation rules for RequestedEquipmentSizetype

	// no validation rules for RequestedEquipmentUnits

	// no validation rules for ConfirmedEquipmentSizetype

	// no validation rules for ConfirmedEquipmentUnits

	// no validation rules for IsShipperOwned

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateRequestedEquipmentRequestMultiError(errors)
	}

	return nil
}

// CreateRequestedEquipmentRequestMultiError is an error wrapping multiple
// validation errors returned by CreateRequestedEquipmentRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateRequestedEquipmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestedEquipmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestedEquipmentRequestMultiError) AllErrors() []error { return m }

// CreateRequestedEquipmentRequestValidationError is the validation error
// returned by CreateRequestedEquipmentRequest.Validate if the designated
// constraints aren't met.
type CreateRequestedEquipmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestedEquipmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestedEquipmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestedEquipmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestedEquipmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestedEquipmentRequestValidationError) ErrorName() string {
	return "CreateRequestedEquipmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRequestedEquipmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequestedEquipmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestedEquipmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestedEquipmentRequestValidationError{}

// Validate checks the field values on CreateRequestedEquipmentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateRequestedEquipmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequestedEquipmentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateRequestedEquipmentResponseMultiError, or nil if none found.
func (m *CreateRequestedEquipmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequestedEquipmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequestedEquipment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRequestedEquipmentResponseValidationError{
					field:  "RequestedEquipment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRequestedEquipmentResponseValidationError{
					field:  "RequestedEquipment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedEquipment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestedEquipmentResponseValidationError{
				field:  "RequestedEquipment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRequestedEquipmentResponseMultiError(errors)
	}

	return nil
}

// CreateRequestedEquipmentResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateRequestedEquipmentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateRequestedEquipmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestedEquipmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestedEquipmentResponseMultiError) AllErrors() []error { return m }

// CreateRequestedEquipmentResponseValidationError is the validation error
// returned by CreateRequestedEquipmentResponse.Validate if the designated
// constraints aren't met.
type CreateRequestedEquipmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestedEquipmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestedEquipmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestedEquipmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestedEquipmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestedEquipmentResponseValidationError) ErrorName() string {
	return "CreateRequestedEquipmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRequestedEquipmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequestedEquipmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestedEquipmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestedEquipmentResponseValidationError{}

// Validate checks the field values on CreateShipmentLocationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShipmentLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShipmentLocationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateShipmentLocationRequestMultiError, or nil if none found.
func (m *CreateShipmentLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShipmentLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShipmentId

	// no validation rules for BookingId

	// no validation rules for LocationId

	// no validation rules for ShipmentLocationTypeCode

	// no validation rules for DisplayedName

	// no validation rules for EventDateTime

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateShipmentLocationRequestMultiError(errors)
	}

	return nil
}

// CreateShipmentLocationRequestMultiError is an error wrapping multiple
// validation errors returned by CreateShipmentLocationRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateShipmentLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShipmentLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShipmentLocationRequestMultiError) AllErrors() []error { return m }

// CreateShipmentLocationRequestValidationError is the validation error
// returned by CreateShipmentLocationRequest.Validate if the designated
// constraints aren't met.
type CreateShipmentLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShipmentLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShipmentLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShipmentLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShipmentLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShipmentLocationRequestValidationError) ErrorName() string {
	return "CreateShipmentLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShipmentLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShipmentLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShipmentLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShipmentLocationRequestValidationError{}

// Validate checks the field values on CreateShipmentLocationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShipmentLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShipmentLocationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateShipmentLocationResponseMultiError, or nil if none found.
func (m *CreateShipmentLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShipmentLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShipmentLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShipmentLocationResponseValidationError{
					field:  "ShipmentLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShipmentLocationResponseValidationError{
					field:  "ShipmentLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipmentLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShipmentLocationResponseValidationError{
				field:  "ShipmentLocation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShipmentLocationResponseMultiError(errors)
	}

	return nil
}

// CreateShipmentLocationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateShipmentLocationResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateShipmentLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShipmentLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShipmentLocationResponseMultiError) AllErrors() []error { return m }

// CreateShipmentLocationResponseValidationError is the validation error
// returned by CreateShipmentLocationResponse.Validate if the designated
// constraints aren't met.
type CreateShipmentLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShipmentLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShipmentLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShipmentLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShipmentLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShipmentLocationResponseValidationError) ErrorName() string {
	return "CreateShipmentLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShipmentLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShipmentLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShipmentLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShipmentLocationResponseValidationError{}

// Validate checks the field values on
// CreateShipmentLocationsByBookingIDAndTOsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateShipmentLocationsByBookingIDAndTOsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateShipmentLocationsByBookingIDAndTOsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateShipmentLocationsByBookingIDAndTOsRequestMultiError, or nil if none found.
func (m *CreateShipmentLocationsByBookingIDAndTOsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShipmentLocationsByBookingIDAndTOsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreateShipmentLocationRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShipmentLocationsByBookingIDAndTOsRequestValidationError{
					field:  "CreateShipmentLocationRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShipmentLocationsByBookingIDAndTOsRequestValidationError{
					field:  "CreateShipmentLocationRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateShipmentLocationRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShipmentLocationsByBookingIDAndTOsRequestValidationError{
				field:  "CreateShipmentLocationRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShipmentLocationsByBookingIDAndTOsRequestMultiError(errors)
	}

	return nil
}

// CreateShipmentLocationsByBookingIDAndTOsRequestMultiError is an error
// wrapping multiple validation errors returned by
// CreateShipmentLocationsByBookingIDAndTOsRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateShipmentLocationsByBookingIDAndTOsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShipmentLocationsByBookingIDAndTOsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShipmentLocationsByBookingIDAndTOsRequestMultiError) AllErrors() []error { return m }

// CreateShipmentLocationsByBookingIDAndTOsRequestValidationError is the
// validation error returned by
// CreateShipmentLocationsByBookingIDAndTOsRequest.Validate if the designated
// constraints aren't met.
type CreateShipmentLocationsByBookingIDAndTOsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShipmentLocationsByBookingIDAndTOsRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateShipmentLocationsByBookingIDAndTOsRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateShipmentLocationsByBookingIDAndTOsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShipmentLocationsByBookingIDAndTOsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShipmentLocationsByBookingIDAndTOsRequestValidationError) ErrorName() string {
	return "CreateShipmentLocationsByBookingIDAndTOsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShipmentLocationsByBookingIDAndTOsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShipmentLocationsByBookingIDAndTOsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShipmentLocationsByBookingIDAndTOsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShipmentLocationsByBookingIDAndTOsRequestValidationError{}

// Validate checks the field values on
// CreateShipmentLocationsByBookingIDAndTOsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateShipmentLocationsByBookingIDAndTOsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateShipmentLocationsByBookingIDAndTOsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateShipmentLocationsByBookingIDAndTOsResponseMultiError, or nil if none found.
func (m *CreateShipmentLocationsByBookingIDAndTOsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShipmentLocationsByBookingIDAndTOsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShipmentLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShipmentLocationsByBookingIDAndTOsResponseValidationError{
					field:  "ShipmentLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShipmentLocationsByBookingIDAndTOsResponseValidationError{
					field:  "ShipmentLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipmentLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShipmentLocationsByBookingIDAndTOsResponseValidationError{
				field:  "ShipmentLocation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShipmentLocationsByBookingIDAndTOsResponseMultiError(errors)
	}

	return nil
}

// CreateShipmentLocationsByBookingIDAndTOsResponseMultiError is an error
// wrapping multiple validation errors returned by
// CreateShipmentLocationsByBookingIDAndTOsResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateShipmentLocationsByBookingIDAndTOsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShipmentLocationsByBookingIDAndTOsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShipmentLocationsByBookingIDAndTOsResponseMultiError) AllErrors() []error { return m }

// CreateShipmentLocationsByBookingIDAndTOsResponseValidationError is the
// validation error returned by
// CreateShipmentLocationsByBookingIDAndTOsResponse.Validate if the designated
// constraints aren't met.
type CreateShipmentLocationsByBookingIDAndTOsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShipmentLocationsByBookingIDAndTOsResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateShipmentLocationsByBookingIDAndTOsResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateShipmentLocationsByBookingIDAndTOsResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateShipmentLocationsByBookingIDAndTOsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShipmentLocationsByBookingIDAndTOsResponseValidationError) ErrorName() string {
	return "CreateShipmentLocationsByBookingIDAndTOsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShipmentLocationsByBookingIDAndTOsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShipmentLocationsByBookingIDAndTOsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShipmentLocationsByBookingIDAndTOsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShipmentLocationsByBookingIDAndTOsResponseValidationError{}

// Validate checks the field values on FetchShipmentLocationsByBookingIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FetchShipmentLocationsByBookingIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FetchShipmentLocationsByBookingIDRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// FetchShipmentLocationsByBookingIDRequestMultiError, or nil if none found.
func (m *FetchShipmentLocationsByBookingIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchShipmentLocationsByBookingIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookingId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FetchShipmentLocationsByBookingIDRequestMultiError(errors)
	}

	return nil
}

// FetchShipmentLocationsByBookingIDRequestMultiError is an error wrapping
// multiple validation errors returned by
// FetchShipmentLocationsByBookingIDRequest.ValidateAll() if the designated
// constraints aren't met.
type FetchShipmentLocationsByBookingIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchShipmentLocationsByBookingIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchShipmentLocationsByBookingIDRequestMultiError) AllErrors() []error { return m }

// FetchShipmentLocationsByBookingIDRequestValidationError is the validation
// error returned by FetchShipmentLocationsByBookingIDRequest.Validate if the
// designated constraints aren't met.
type FetchShipmentLocationsByBookingIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchShipmentLocationsByBookingIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchShipmentLocationsByBookingIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchShipmentLocationsByBookingIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchShipmentLocationsByBookingIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchShipmentLocationsByBookingIDRequestValidationError) ErrorName() string {
	return "FetchShipmentLocationsByBookingIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchShipmentLocationsByBookingIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchShipmentLocationsByBookingIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchShipmentLocationsByBookingIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchShipmentLocationsByBookingIDRequestValidationError{}

// Validate checks the field values on
// FetchShipmentLocationsByBookingIDResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FetchShipmentLocationsByBookingIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FetchShipmentLocationsByBookingIDResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// FetchShipmentLocationsByBookingIDResponseMultiError, or nil if none found.
func (m *FetchShipmentLocationsByBookingIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchShipmentLocationsByBookingIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShipmentLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FetchShipmentLocationsByBookingIDResponseValidationError{
					field:  "ShipmentLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FetchShipmentLocationsByBookingIDResponseValidationError{
					field:  "ShipmentLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipmentLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FetchShipmentLocationsByBookingIDResponseValidationError{
				field:  "ShipmentLocation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FetchShipmentLocationsByBookingIDResponseMultiError(errors)
	}

	return nil
}

// FetchShipmentLocationsByBookingIDResponseMultiError is an error wrapping
// multiple validation errors returned by
// FetchShipmentLocationsByBookingIDResponse.ValidateAll() if the designated
// constraints aren't met.
type FetchShipmentLocationsByBookingIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchShipmentLocationsByBookingIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchShipmentLocationsByBookingIDResponseMultiError) AllErrors() []error { return m }

// FetchShipmentLocationsByBookingIDResponseValidationError is the validation
// error returned by FetchShipmentLocationsByBookingIDResponse.Validate if the
// designated constraints aren't met.
type FetchShipmentLocationsByBookingIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchShipmentLocationsByBookingIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchShipmentLocationsByBookingIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchShipmentLocationsByBookingIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchShipmentLocationsByBookingIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchShipmentLocationsByBookingIDResponseValidationError) ErrorName() string {
	return "FetchShipmentLocationsByBookingIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchShipmentLocationsByBookingIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchShipmentLocationsByBookingIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchShipmentLocationsByBookingIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchShipmentLocationsByBookingIDResponseValidationError{}

// Validate checks the field values on Booking with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Booking) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Booking with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BookingMultiError, or nil if none found.
func (m *Booking) ValidateAll() error {
	return m.validate(true)
}

func (m *Booking) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBookingD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingValidationError{
					field:  "BookingD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingValidationError{
					field:  "BookingD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookingD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingValidationError{
				field:  "BookingD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBookingT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingValidationError{
					field:  "BookingT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingValidationError{
					field:  "BookingT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookingT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingValidationError{
				field:  "BookingT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCommodities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BookingValidationError{
						field:  fmt.Sprintf("Commodities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BookingValidationError{
						field:  fmt.Sprintf("Commodities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BookingValidationError{
					field:  fmt.Sprintf("Commodities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetValueAddedServiceRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BookingValidationError{
						field:  fmt.Sprintf("ValueAddedServiceRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BookingValidationError{
						field:  fmt.Sprintf("ValueAddedServiceRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BookingValidationError{
					field:  fmt.Sprintf("ValueAddedServiceRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetReferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BookingValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BookingValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BookingValidationError{
					field:  fmt.Sprintf("References[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRequestedEquipments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BookingValidationError{
						field:  fmt.Sprintf("RequestedEquipments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BookingValidationError{
						field:  fmt.Sprintf("RequestedEquipments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BookingValidationError{
					field:  fmt.Sprintf("RequestedEquipments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetShipmentLocations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BookingValidationError{
						field:  fmt.Sprintf("ShipmentLocations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BookingValidationError{
						field:  fmt.Sprintf("ShipmentLocations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BookingValidationError{
					field:  fmt.Sprintf("ShipmentLocations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BookingMultiError(errors)
	}

	return nil
}

// BookingMultiError is an error wrapping multiple validation errors returned
// by Booking.ValidateAll() if the designated constraints aren't met.
type BookingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookingMultiError) AllErrors() []error { return m }

// BookingValidationError is the validation error returned by Booking.Validate
// if the designated constraints aren't met.
type BookingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookingValidationError) ErrorName() string { return "BookingValidationError" }

// Error satisfies the builtin error interface
func (e BookingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBooking.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookingValidationError{}

// Validate checks the field values on BookingD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BookingD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookingD with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BookingDMultiError, or nil
// if none found.
func (m *BookingD) ValidateAll() error {
	return m.validate(true)
}

func (m *BookingD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for CarrierBookingRequestReference

	// no validation rules for DocumentStatus

	// no validation rules for ReceiptTypeAtOrigin

	// no validation rules for DeliveryTypeAtDestination

	// no validation rules for CargoMovementTypeAtOrigin

	// no validation rules for CargoMovementTypeAtDestination

	// no validation rules for ServiceContractReference

	// no validation rules for PaymentTermCode

	// no validation rules for IsPartialLoadAllowed

	// no validation rules for IsExportDeclarationRequired

	// no validation rules for ExportDeclarationReference

	// no validation rules for IsImportLicenseRequired

	// no validation rules for ImportLicenseReference

	// no validation rules for IsAmsAciFilingRequired

	// no validation rules for IsDestinationFilingRequired

	// no validation rules for ContractQuotationReference

	// no validation rules for TransportDocumentTypeCode

	// no validation rules for TransportDocumentReference

	// no validation rules for BookingChannelReference

	// no validation rules for IncoTerms

	// no validation rules for CommunicationChannelCode

	// no validation rules for IsEquipmentSubstitutionAllowed

	// no validation rules for VesselName

	// no validation rules for VesselImoNumber

	// no validation rules for ExportVoyageNumber

	// no validation rules for PreCarriageModeOfTransportCode

	// no validation rules for VesselId

	// no validation rules for DeclaredValueCurrency

	// no validation rules for DeclaredValue

	// no validation rules for DeclaredValueString

	// no validation rules for VoyageId

	// no validation rules for LocationId

	// no validation rules for InvoicePayableAt

	if len(errors) > 0 {
		return BookingDMultiError(errors)
	}

	return nil
}

// BookingDMultiError is an error wrapping multiple validation errors returned
// by BookingD.ValidateAll() if the designated constraints aren't met.
type BookingDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookingDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookingDMultiError) AllErrors() []error { return m }

// BookingDValidationError is the validation error returned by
// BookingD.Validate if the designated constraints aren't met.
type BookingDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookingDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookingDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookingDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookingDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookingDValidationError) ErrorName() string { return "BookingDValidationError" }

// Error satisfies the builtin error interface
func (e BookingDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookingD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookingDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookingDValidationError{}

// Validate checks the field values on BookingT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BookingT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookingT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BookingTMultiError, or nil
// if none found.
func (m *BookingT) ValidateAll() error {
	return m.validate(true)
}

func (m *BookingT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubmissionDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingTValidationError{
					field:  "SubmissionDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingTValidationError{
					field:  "SubmissionDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubmissionDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingTValidationError{
				field:  "SubmissionDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpectedDepartureDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingTValidationError{
					field:  "ExpectedDepartureDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingTValidationError{
					field:  "ExpectedDepartureDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpectedDepartureDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingTValidationError{
				field:  "ExpectedDepartureDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpectedArrivalAtPlaceOfDeliveryStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingTValidationError{
					field:  "ExpectedArrivalAtPlaceOfDeliveryStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingTValidationError{
					field:  "ExpectedArrivalAtPlaceOfDeliveryStartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpectedArrivalAtPlaceOfDeliveryStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingTValidationError{
				field:  "ExpectedArrivalAtPlaceOfDeliveryStartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpectedArrivalAtPlaceOfDeliveryEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingTValidationError{
					field:  "ExpectedArrivalAtPlaceOfDeliveryEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingTValidationError{
					field:  "ExpectedArrivalAtPlaceOfDeliveryEndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpectedArrivalAtPlaceOfDeliveryEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingTValidationError{
				field:  "ExpectedArrivalAtPlaceOfDeliveryEndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookingTMultiError(errors)
	}

	return nil
}

// BookingTMultiError is an error wrapping multiple validation errors returned
// by BookingT.ValidateAll() if the designated constraints aren't met.
type BookingTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookingTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookingTMultiError) AllErrors() []error { return m }

// BookingTValidationError is the validation error returned by
// BookingT.Validate if the designated constraints aren't met.
type BookingTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookingTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookingTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookingTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookingTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookingTValidationError) ErrorName() string { return "BookingTValidationError" }

// Error satisfies the builtin error interface
func (e BookingTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookingT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookingTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookingTValidationError{}

// Validate checks the field values on Commodity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Commodity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Commodity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommodityMultiError, or nil
// if none found.
func (m *Commodity) ValidateAll() error {
	return m.validate(true)
}

func (m *Commodity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommodityD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommodityValidationError{
					field:  "CommodityD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommodityValidationError{
					field:  "CommodityD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommodityD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommodityValidationError{
				field:  "CommodityD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCommodityT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommodityValidationError{
					field:  "CommodityT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommodityValidationError{
					field:  "CommodityT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommodityT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommodityValidationError{
				field:  "CommodityT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommodityValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommodityValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommodityValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommodityValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommodityValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommodityValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommodityMultiError(errors)
	}

	return nil
}

// CommodityMultiError is an error wrapping multiple validation errors returned
// by Commodity.ValidateAll() if the designated constraints aren't met.
type CommodityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommodityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommodityMultiError) AllErrors() []error { return m }

// CommodityValidationError is the validation error returned by
// Commodity.Validate if the designated constraints aren't met.
type CommodityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommodityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommodityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommodityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommodityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommodityValidationError) ErrorName() string { return "CommodityValidationError" }

// Error satisfies the builtin error interface
func (e CommodityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommodity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommodityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommodityValidationError{}

// Validate checks the field values on CommodityD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommodityD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommodityD with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommodityDMultiError, or
// nil if none found.
func (m *CommodityD) ValidateAll() error {
	return m.validate(true)
}

func (m *CommodityD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for BookingId

	// no validation rules for CommodityType

	// no validation rules for HsCode

	// no validation rules for CargoGrossWeight

	// no validation rules for CargoGrossWeightUnit

	// no validation rules for CargoGrossVolume

	// no validation rules for CargoGrossVolumeUnit

	// no validation rules for NumberOfPackages

	if len(errors) > 0 {
		return CommodityDMultiError(errors)
	}

	return nil
}

// CommodityDMultiError is an error wrapping multiple validation errors
// returned by CommodityD.ValidateAll() if the designated constraints aren't met.
type CommodityDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommodityDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommodityDMultiError) AllErrors() []error { return m }

// CommodityDValidationError is the validation error returned by
// CommodityD.Validate if the designated constraints aren't met.
type CommodityDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommodityDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommodityDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommodityDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommodityDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommodityDValidationError) ErrorName() string { return "CommodityDValidationError" }

// Error satisfies the builtin error interface
func (e CommodityDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommodityD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommodityDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommodityDValidationError{}

// Validate checks the field values on CommodityT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommodityT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommodityT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommodityTMultiError, or
// nil if none found.
func (m *CommodityT) ValidateAll() error {
	return m.validate(true)
}

func (m *CommodityT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExportLicenseIssueDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommodityTValidationError{
					field:  "ExportLicenseIssueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommodityTValidationError{
					field:  "ExportLicenseIssueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExportLicenseIssueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommodityTValidationError{
				field:  "ExportLicenseIssueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExportLicenseExpiryDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommodityTValidationError{
					field:  "ExportLicenseExpiryDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommodityTValidationError{
					field:  "ExportLicenseExpiryDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExportLicenseExpiryDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommodityTValidationError{
				field:  "ExportLicenseExpiryDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommodityTMultiError(errors)
	}

	return nil
}

// CommodityTMultiError is an error wrapping multiple validation errors
// returned by CommodityT.ValidateAll() if the designated constraints aren't met.
type CommodityTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommodityTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommodityTMultiError) AllErrors() []error { return m }

// CommodityTValidationError is the validation error returned by
// CommodityT.Validate if the designated constraints aren't met.
type CommodityTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommodityTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommodityTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommodityTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommodityTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommodityTValidationError) ErrorName() string { return "CommodityTValidationError" }

// Error satisfies the builtin error interface
func (e CommodityTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommodityT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommodityTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommodityTValidationError{}

// Validate checks the field values on RequestedEquipment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestedEquipment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestedEquipment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestedEquipmentMultiError, or nil if none found.
func (m *RequestedEquipment) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestedEquipment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequestedEquipmentD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestedEquipmentValidationError{
					field:  "RequestedEquipmentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestedEquipmentValidationError{
					field:  "RequestedEquipmentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedEquipmentD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestedEquipmentValidationError{
				field:  "RequestedEquipmentD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestedEquipmentValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestedEquipmentValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestedEquipmentValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestedEquipmentValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestedEquipmentValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestedEquipmentValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestedEquipmentMultiError(errors)
	}

	return nil
}

// RequestedEquipmentMultiError is an error wrapping multiple validation errors
// returned by RequestedEquipment.ValidateAll() if the designated constraints
// aren't met.
type RequestedEquipmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestedEquipmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestedEquipmentMultiError) AllErrors() []error { return m }

// RequestedEquipmentValidationError is the validation error returned by
// RequestedEquipment.Validate if the designated constraints aren't met.
type RequestedEquipmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestedEquipmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestedEquipmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestedEquipmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestedEquipmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestedEquipmentValidationError) ErrorName() string {
	return "RequestedEquipmentValidationError"
}

// Error satisfies the builtin error interface
func (e RequestedEquipmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestedEquipment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestedEquipmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestedEquipmentValidationError{}

// Validate checks the field values on RequestedEquipmentD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestedEquipmentD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestedEquipmentD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestedEquipmentDMultiError, or nil if none found.
func (m *RequestedEquipmentD) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestedEquipmentD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for BookingId

	// no validation rules for ShipmentId

	// no validation rules for RequestedEquipmentSizetype

	// no validation rules for RequestedEquipmentUnits

	// no validation rules for ConfirmedEquipmentSizetype

	// no validation rules for ConfirmedEquipmentUnits

	// no validation rules for IsShipperOwned

	if len(errors) > 0 {
		return RequestedEquipmentDMultiError(errors)
	}

	return nil
}

// RequestedEquipmentDMultiError is an error wrapping multiple validation
// errors returned by RequestedEquipmentD.ValidateAll() if the designated
// constraints aren't met.
type RequestedEquipmentDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestedEquipmentDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestedEquipmentDMultiError) AllErrors() []error { return m }

// RequestedEquipmentDValidationError is the validation error returned by
// RequestedEquipmentD.Validate if the designated constraints aren't met.
type RequestedEquipmentDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestedEquipmentDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestedEquipmentDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestedEquipmentDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestedEquipmentDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestedEquipmentDValidationError) ErrorName() string {
	return "RequestedEquipmentDValidationError"
}

// Error satisfies the builtin error interface
func (e RequestedEquipmentDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestedEquipmentD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestedEquipmentDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestedEquipmentDValidationError{}

// Validate checks the field values on ShipmentLocation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShipmentLocation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShipmentLocation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShipmentLocationMultiError, or nil if none found.
func (m *ShipmentLocation) ValidateAll() error {
	return m.validate(true)
}

func (m *ShipmentLocation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShipmentLocationD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentLocationValidationError{
					field:  "ShipmentLocationD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentLocationValidationError{
					field:  "ShipmentLocationD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipmentLocationD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentLocationValidationError{
				field:  "ShipmentLocationD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShipmentLocationT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentLocationValidationError{
					field:  "ShipmentLocationT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentLocationValidationError{
					field:  "ShipmentLocationT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipmentLocationT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentLocationValidationError{
				field:  "ShipmentLocationT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShipmentLocationMultiError(errors)
	}

	return nil
}

// ShipmentLocationMultiError is an error wrapping multiple validation errors
// returned by ShipmentLocation.ValidateAll() if the designated constraints
// aren't met.
type ShipmentLocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipmentLocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipmentLocationMultiError) AllErrors() []error { return m }

// ShipmentLocationValidationError is the validation error returned by
// ShipmentLocation.Validate if the designated constraints aren't met.
type ShipmentLocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipmentLocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipmentLocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipmentLocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipmentLocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipmentLocationValidationError) ErrorName() string { return "ShipmentLocationValidationError" }

// Error satisfies the builtin error interface
func (e ShipmentLocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipmentLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipmentLocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipmentLocationValidationError{}

// Validate checks the field values on ShipmentLocationD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShipmentLocationD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShipmentLocationD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShipmentLocationDMultiError, or nil if none found.
func (m *ShipmentLocationD) ValidateAll() error {
	return m.validate(true)
}

func (m *ShipmentLocationD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShipmentId

	// no validation rules for BookingId

	// no validation rules for LocationId

	// no validation rules for ShipmentLocationTypeCode

	// no validation rules for DisplayedName

	if len(errors) > 0 {
		return ShipmentLocationDMultiError(errors)
	}

	return nil
}

// ShipmentLocationDMultiError is an error wrapping multiple validation errors
// returned by ShipmentLocationD.ValidateAll() if the designated constraints
// aren't met.
type ShipmentLocationDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipmentLocationDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipmentLocationDMultiError) AllErrors() []error { return m }

// ShipmentLocationDValidationError is the validation error returned by
// ShipmentLocationD.Validate if the designated constraints aren't met.
type ShipmentLocationDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipmentLocationDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipmentLocationDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipmentLocationDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipmentLocationDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipmentLocationDValidationError) ErrorName() string {
	return "ShipmentLocationDValidationError"
}

// Error satisfies the builtin error interface
func (e ShipmentLocationDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipmentLocationD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipmentLocationDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipmentLocationDValidationError{}

// Validate checks the field values on ShipmentLocationT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShipmentLocationT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShipmentLocationT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShipmentLocationTMultiError, or nil if none found.
func (m *ShipmentLocationT) ValidateAll() error {
	return m.validate(true)
}

func (m *ShipmentLocationT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEventDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentLocationTValidationError{
					field:  "EventDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentLocationTValidationError{
					field:  "EventDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentLocationTValidationError{
				field:  "EventDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShipmentLocationTMultiError(errors)
	}

	return nil
}

// ShipmentLocationTMultiError is an error wrapping multiple validation errors
// returned by ShipmentLocationT.ValidateAll() if the designated constraints
// aren't met.
type ShipmentLocationTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipmentLocationTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipmentLocationTMultiError) AllErrors() []error { return m }

// ShipmentLocationTValidationError is the validation error returned by
// ShipmentLocationT.Validate if the designated constraints aren't met.
type ShipmentLocationTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipmentLocationTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipmentLocationTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipmentLocationTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipmentLocationTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipmentLocationTValidationError) ErrorName() string {
	return "ShipmentLocationTValidationError"
}

// Error satisfies the builtin error interface
func (e ShipmentLocationTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipmentLocationT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipmentLocationTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipmentLocationTValidationError{}

// Validate checks the field values on ValueAddedServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValueAddedServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValueAddedServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValueAddedServiceRequestMultiError, or nil if none found.
func (m *ValueAddedServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValueAddedServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for BookingId

	// no validation rules for ValueAddedServiceCode

	if len(errors) > 0 {
		return ValueAddedServiceRequestMultiError(errors)
	}

	return nil
}

// ValueAddedServiceRequestMultiError is an error wrapping multiple validation
// errors returned by ValueAddedServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type ValueAddedServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValueAddedServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValueAddedServiceRequestMultiError) AllErrors() []error { return m }

// ValueAddedServiceRequestValidationError is the validation error returned by
// ValueAddedServiceRequest.Validate if the designated constraints aren't met.
type ValueAddedServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValueAddedServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValueAddedServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValueAddedServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValueAddedServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValueAddedServiceRequestValidationError) ErrorName() string {
	return "ValueAddedServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValueAddedServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValueAddedServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValueAddedServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValueAddedServiceRequestValidationError{}
