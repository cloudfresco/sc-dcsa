// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bkg/v2/bkg_shipment_summary.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateBkgShipmentSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBkgShipmentSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBkgShipmentSummaryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateBkgShipmentSummaryRequestMultiError, or nil if none found.
func (m *CreateBkgShipmentSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBkgShipmentSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierBookingReference

	// no validation rules for ShipmentCreatedDateTime

	// no validation rules for ShipmentUpdatedDateTime

	// no validation rules for TermsAndConditions

	// no validation rules for CarrierBookingRequestReference

	// no validation rules for BookingDocumentStatus

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateBkgShipmentSummaryRequestMultiError(errors)
	}

	return nil
}

// CreateBkgShipmentSummaryRequestMultiError is an error wrapping multiple
// validation errors returned by CreateBkgShipmentSummaryRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateBkgShipmentSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBkgShipmentSummaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBkgShipmentSummaryRequestMultiError) AllErrors() []error { return m }

// CreateBkgShipmentSummaryRequestValidationError is the validation error
// returned by CreateBkgShipmentSummaryRequest.Validate if the designated
// constraints aren't met.
type CreateBkgShipmentSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBkgShipmentSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBkgShipmentSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBkgShipmentSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBkgShipmentSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBkgShipmentSummaryRequestValidationError) ErrorName() string {
	return "CreateBkgShipmentSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBkgShipmentSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBkgShipmentSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBkgShipmentSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBkgShipmentSummaryRequestValidationError{}

// Validate checks the field values on CreateBkgShipmentSummaryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateBkgShipmentSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBkgShipmentSummaryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateBkgShipmentSummaryResponseMultiError, or nil if none found.
func (m *CreateBkgShipmentSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBkgShipmentSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBkgShipmentSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBkgShipmentSummaryResponseValidationError{
					field:  "BkgShipmentSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBkgShipmentSummaryResponseValidationError{
					field:  "BkgShipmentSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBkgShipmentSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBkgShipmentSummaryResponseValidationError{
				field:  "BkgShipmentSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBkgShipmentSummaryResponseMultiError(errors)
	}

	return nil
}

// CreateBkgShipmentSummaryResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateBkgShipmentSummaryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBkgShipmentSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBkgShipmentSummaryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBkgShipmentSummaryResponseMultiError) AllErrors() []error { return m }

// CreateBkgShipmentSummaryResponseValidationError is the validation error
// returned by CreateBkgShipmentSummaryResponse.Validate if the designated
// constraints aren't met.
type CreateBkgShipmentSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBkgShipmentSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBkgShipmentSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBkgShipmentSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBkgShipmentSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBkgShipmentSummaryResponseValidationError) ErrorName() string {
	return "CreateBkgShipmentSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBkgShipmentSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBkgShipmentSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBkgShipmentSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBkgShipmentSummaryResponseValidationError{}

// Validate checks the field values on GetBkgShipmentSummariesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBkgShipmentSummariesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBkgShipmentSummariesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBkgShipmentSummariesRequestMultiError, or nil if none found.
func (m *GetBkgShipmentSummariesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBkgShipmentSummariesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetBkgShipmentSummariesRequestMultiError(errors)
	}

	return nil
}

// GetBkgShipmentSummariesRequestMultiError is an error wrapping multiple
// validation errors returned by GetBkgShipmentSummariesRequest.ValidateAll()
// if the designated constraints aren't met.
type GetBkgShipmentSummariesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBkgShipmentSummariesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBkgShipmentSummariesRequestMultiError) AllErrors() []error { return m }

// GetBkgShipmentSummariesRequestValidationError is the validation error
// returned by GetBkgShipmentSummariesRequest.Validate if the designated
// constraints aren't met.
type GetBkgShipmentSummariesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBkgShipmentSummariesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBkgShipmentSummariesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBkgShipmentSummariesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBkgShipmentSummariesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBkgShipmentSummariesRequestValidationError) ErrorName() string {
	return "GetBkgShipmentSummariesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBkgShipmentSummariesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBkgShipmentSummariesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBkgShipmentSummariesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBkgShipmentSummariesRequestValidationError{}

// Validate checks the field values on GetBkgShipmentSummariesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBkgShipmentSummariesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBkgShipmentSummariesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBkgShipmentSummariesResponseMultiError, or nil if none found.
func (m *GetBkgShipmentSummariesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBkgShipmentSummariesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBkgShipmentSummaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBkgShipmentSummariesResponseValidationError{
						field:  fmt.Sprintf("BkgShipmentSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBkgShipmentSummariesResponseValidationError{
						field:  fmt.Sprintf("BkgShipmentSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBkgShipmentSummariesResponseValidationError{
					field:  fmt.Sprintf("BkgShipmentSummaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetBkgShipmentSummariesResponseMultiError(errors)
	}

	return nil
}

// GetBkgShipmentSummariesResponseMultiError is an error wrapping multiple
// validation errors returned by GetBkgShipmentSummariesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetBkgShipmentSummariesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBkgShipmentSummariesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBkgShipmentSummariesResponseMultiError) AllErrors() []error { return m }

// GetBkgShipmentSummariesResponseValidationError is the validation error
// returned by GetBkgShipmentSummariesResponse.Validate if the designated
// constraints aren't met.
type GetBkgShipmentSummariesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBkgShipmentSummariesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBkgShipmentSummariesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBkgShipmentSummariesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBkgShipmentSummariesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBkgShipmentSummariesResponseValidationError) ErrorName() string {
	return "GetBkgShipmentSummariesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBkgShipmentSummariesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBkgShipmentSummariesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBkgShipmentSummariesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBkgShipmentSummariesResponseValidationError{}

// Validate checks the field values on BkgShipmentSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BkgShipmentSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BkgShipmentSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BkgShipmentSummaryMultiError, or nil if none found.
func (m *BkgShipmentSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *BkgShipmentSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBkgShipmentSummaryD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BkgShipmentSummaryValidationError{
					field:  "BkgShipmentSummaryD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BkgShipmentSummaryValidationError{
					field:  "BkgShipmentSummaryD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBkgShipmentSummaryD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BkgShipmentSummaryValidationError{
				field:  "BkgShipmentSummaryD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBkgShipmentSummaryT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BkgShipmentSummaryValidationError{
					field:  "BkgShipmentSummaryT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BkgShipmentSummaryValidationError{
					field:  "BkgShipmentSummaryT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBkgShipmentSummaryT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BkgShipmentSummaryValidationError{
				field:  "BkgShipmentSummaryT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BkgShipmentSummaryValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BkgShipmentSummaryValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BkgShipmentSummaryValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BkgShipmentSummaryValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BkgShipmentSummaryValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BkgShipmentSummaryValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BkgShipmentSummaryMultiError(errors)
	}

	return nil
}

// BkgShipmentSummaryMultiError is an error wrapping multiple validation errors
// returned by BkgShipmentSummary.ValidateAll() if the designated constraints
// aren't met.
type BkgShipmentSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BkgShipmentSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BkgShipmentSummaryMultiError) AllErrors() []error { return m }

// BkgShipmentSummaryValidationError is the validation error returned by
// BkgShipmentSummary.Validate if the designated constraints aren't met.
type BkgShipmentSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BkgShipmentSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BkgShipmentSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BkgShipmentSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BkgShipmentSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BkgShipmentSummaryValidationError) ErrorName() string {
	return "BkgShipmentSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e BkgShipmentSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBkgShipmentSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BkgShipmentSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BkgShipmentSummaryValidationError{}

// Validate checks the field values on BkgShipmentSummaryD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BkgShipmentSummaryD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BkgShipmentSummaryD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BkgShipmentSummaryDMultiError, or nil if none found.
func (m *BkgShipmentSummaryD) ValidateAll() error {
	return m.validate(true)
}

func (m *BkgShipmentSummaryD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for CarrierBookingReference

	// no validation rules for TermsAndConditions

	// no validation rules for CarrierBookingRequestReference

	// no validation rules for BookingDocumentStatus

	if len(errors) > 0 {
		return BkgShipmentSummaryDMultiError(errors)
	}

	return nil
}

// BkgShipmentSummaryDMultiError is an error wrapping multiple validation
// errors returned by BkgShipmentSummaryD.ValidateAll() if the designated
// constraints aren't met.
type BkgShipmentSummaryDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BkgShipmentSummaryDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BkgShipmentSummaryDMultiError) AllErrors() []error { return m }

// BkgShipmentSummaryDValidationError is the validation error returned by
// BkgShipmentSummaryD.Validate if the designated constraints aren't met.
type BkgShipmentSummaryDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BkgShipmentSummaryDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BkgShipmentSummaryDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BkgShipmentSummaryDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BkgShipmentSummaryDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BkgShipmentSummaryDValidationError) ErrorName() string {
	return "BkgShipmentSummaryDValidationError"
}

// Error satisfies the builtin error interface
func (e BkgShipmentSummaryDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBkgShipmentSummaryD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BkgShipmentSummaryDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BkgShipmentSummaryDValidationError{}

// Validate checks the field values on BkgShipmentSummaryT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BkgShipmentSummaryT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BkgShipmentSummaryT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BkgShipmentSummaryTMultiError, or nil if none found.
func (m *BkgShipmentSummaryT) ValidateAll() error {
	return m.validate(true)
}

func (m *BkgShipmentSummaryT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShipmentCreatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BkgShipmentSummaryTValidationError{
					field:  "ShipmentCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BkgShipmentSummaryTValidationError{
					field:  "ShipmentCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipmentCreatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BkgShipmentSummaryTValidationError{
				field:  "ShipmentCreatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShipmentUpdatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BkgShipmentSummaryTValidationError{
					field:  "ShipmentUpdatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BkgShipmentSummaryTValidationError{
					field:  "ShipmentUpdatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipmentUpdatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BkgShipmentSummaryTValidationError{
				field:  "ShipmentUpdatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BkgShipmentSummaryTMultiError(errors)
	}

	return nil
}

// BkgShipmentSummaryTMultiError is an error wrapping multiple validation
// errors returned by BkgShipmentSummaryT.ValidateAll() if the designated
// constraints aren't met.
type BkgShipmentSummaryTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BkgShipmentSummaryTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BkgShipmentSummaryTMultiError) AllErrors() []error { return m }

// BkgShipmentSummaryTValidationError is the validation error returned by
// BkgShipmentSummaryT.Validate if the designated constraints aren't met.
type BkgShipmentSummaryTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BkgShipmentSummaryTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BkgShipmentSummaryTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BkgShipmentSummaryTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BkgShipmentSummaryTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BkgShipmentSummaryTValidationError) ErrorName() string {
	return "BkgShipmentSummaryTValidationError"
}

// Error satisfies the builtin error interface
func (e BkgShipmentSummaryTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBkgShipmentSummaryT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BkgShipmentSummaryTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BkgShipmentSummaryTValidationError{}

// Validate checks the field values on
// GetBkgShipmentSummaryByCarrierBookingReferenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBkgShipmentSummaryByCarrierBookingReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBkgShipmentSummaryByCarrierBookingReferenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBkgShipmentSummaryByCarrierBookingReferenceRequestMultiError, or nil if
// none found.
func (m *GetBkgShipmentSummaryByCarrierBookingReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBkgShipmentSummaryByCarrierBookingReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierBookingReference

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetBkgShipmentSummaryByCarrierBookingReferenceRequestMultiError(errors)
	}

	return nil
}

// GetBkgShipmentSummaryByCarrierBookingReferenceRequestMultiError is an error
// wrapping multiple validation errors returned by
// GetBkgShipmentSummaryByCarrierBookingReferenceRequest.ValidateAll() if the
// designated constraints aren't met.
type GetBkgShipmentSummaryByCarrierBookingReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBkgShipmentSummaryByCarrierBookingReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBkgShipmentSummaryByCarrierBookingReferenceRequestMultiError) AllErrors() []error {
	return m
}

// GetBkgShipmentSummaryByCarrierBookingReferenceRequestValidationError is the
// validation error returned by
// GetBkgShipmentSummaryByCarrierBookingReferenceRequest.Validate if the
// designated constraints aren't met.
type GetBkgShipmentSummaryByCarrierBookingReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBkgShipmentSummaryByCarrierBookingReferenceRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetBkgShipmentSummaryByCarrierBookingReferenceRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetBkgShipmentSummaryByCarrierBookingReferenceRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetBkgShipmentSummaryByCarrierBookingReferenceRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetBkgShipmentSummaryByCarrierBookingReferenceRequestValidationError) ErrorName() string {
	return "GetBkgShipmentSummaryByCarrierBookingReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBkgShipmentSummaryByCarrierBookingReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBkgShipmentSummaryByCarrierBookingReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBkgShipmentSummaryByCarrierBookingReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBkgShipmentSummaryByCarrierBookingReferenceRequestValidationError{}

// Validate checks the field values on
// GetBkgShipmentSummaryByCarrierBookingReferenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBkgShipmentSummaryByCarrierBookingReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBkgShipmentSummaryByCarrierBookingReferenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBkgShipmentSummaryByCarrierBookingReferenceResponseMultiError, or nil if
// none found.
func (m *GetBkgShipmentSummaryByCarrierBookingReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBkgShipmentSummaryByCarrierBookingReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBkgShipmentSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBkgShipmentSummaryByCarrierBookingReferenceResponseValidationError{
					field:  "BkgShipmentSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBkgShipmentSummaryByCarrierBookingReferenceResponseValidationError{
					field:  "BkgShipmentSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBkgShipmentSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBkgShipmentSummaryByCarrierBookingReferenceResponseValidationError{
				field:  "BkgShipmentSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBkgShipmentSummaryByCarrierBookingReferenceResponseMultiError(errors)
	}

	return nil
}

// GetBkgShipmentSummaryByCarrierBookingReferenceResponseMultiError is an error
// wrapping multiple validation errors returned by
// GetBkgShipmentSummaryByCarrierBookingReferenceResponse.ValidateAll() if the
// designated constraints aren't met.
type GetBkgShipmentSummaryByCarrierBookingReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBkgShipmentSummaryByCarrierBookingReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBkgShipmentSummaryByCarrierBookingReferenceResponseMultiError) AllErrors() []error {
	return m
}

// GetBkgShipmentSummaryByCarrierBookingReferenceResponseValidationError is the
// validation error returned by
// GetBkgShipmentSummaryByCarrierBookingReferenceResponse.Validate if the
// designated constraints aren't met.
type GetBkgShipmentSummaryByCarrierBookingReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBkgShipmentSummaryByCarrierBookingReferenceResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetBkgShipmentSummaryByCarrierBookingReferenceResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetBkgShipmentSummaryByCarrierBookingReferenceResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetBkgShipmentSummaryByCarrierBookingReferenceResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetBkgShipmentSummaryByCarrierBookingReferenceResponseValidationError) ErrorName() string {
	return "GetBkgShipmentSummaryByCarrierBookingReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBkgShipmentSummaryByCarrierBookingReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBkgShipmentSummaryByCarrierBookingReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBkgShipmentSummaryByCarrierBookingReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBkgShipmentSummaryByCarrierBookingReferenceResponseValidationError{}
