// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: bkg/v2/bkg_summary.proto

package v2

import (
	v1 "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateBookingSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarrierBookingRequestReference            string `protobuf:"bytes,1,opt,name=carrier_booking_request_reference,json=carrierBookingRequestReference,proto3" json:"carrier_booking_request_reference,omitempty"`
	DocumentStatus                            string `protobuf:"bytes,2,opt,name=document_status,json=documentStatus,proto3" json:"document_status,omitempty"`
	BookingRequestCreatedDateTime             string `protobuf:"bytes,3,opt,name=booking_request_created_date_time,json=bookingRequestCreatedDateTime,proto3" json:"booking_request_created_date_time,omitempty"`
	BookingRequestUpdatedDateTime             string `protobuf:"bytes,4,opt,name=booking_request_updated_date_time,json=bookingRequestUpdatedDateTime,proto3" json:"booking_request_updated_date_time,omitempty"`
	ReceiptTypeAtOrigin                       string `protobuf:"bytes,5,opt,name=receipt_type_at_origin,json=receiptTypeAtOrigin,proto3" json:"receipt_type_at_origin,omitempty"`
	DeliveryTypeAtDestination                 string `protobuf:"bytes,6,opt,name=delivery_type_at_destination,json=deliveryTypeAtDestination,proto3" json:"delivery_type_at_destination,omitempty"`
	CargoMovementTypeAtOrigin                 string `protobuf:"bytes,7,opt,name=cargo_movement_type_at_origin,json=cargoMovementTypeAtOrigin,proto3" json:"cargo_movement_type_at_origin,omitempty"`
	CargoMovementTypeAtDestination            string `protobuf:"bytes,8,opt,name=cargo_movement_type_at_destination,json=cargoMovementTypeAtDestination,proto3" json:"cargo_movement_type_at_destination,omitempty"`
	ServiceContractReference                  string `protobuf:"bytes,9,opt,name=service_contract_reference,json=serviceContractReference,proto3" json:"service_contract_reference,omitempty"`
	VesselName                                string `protobuf:"bytes,10,opt,name=vessel_name,json=vesselName,proto3" json:"vessel_name,omitempty"`
	CarrierExportVoyageNumber                 string `protobuf:"bytes,11,opt,name=carrier_export_voyage_number,json=carrierExportVoyageNumber,proto3" json:"carrier_export_voyage_number,omitempty"`
	UniversalExportVoyageReference            string `protobuf:"bytes,12,opt,name=universal_export_voyage_reference,json=universalExportVoyageReference,proto3" json:"universal_export_voyage_reference,omitempty"`
	DeclaredValue                             string `protobuf:"bytes,13,opt,name=declared_value,json=declaredValue,proto3" json:"declared_value,omitempty"`
	DeclaredValueCurrency                     string `protobuf:"bytes,14,opt,name=declared_value_currency,json=declaredValueCurrency,proto3" json:"declared_value_currency,omitempty"`
	PaymentTermCode                           string `protobuf:"bytes,15,opt,name=payment_term_code,json=paymentTermCode,proto3" json:"payment_term_code,omitempty"`
	IsPartialLoadAllowed                      bool   `protobuf:"varint,16,opt,name=is_partial_load_allowed,json=isPartialLoadAllowed,proto3" json:"is_partial_load_allowed,omitempty"`
	IsExportDeclarationRequired               bool   `protobuf:"varint,17,opt,name=is_export_declaration_required,json=isExportDeclarationRequired,proto3" json:"is_export_declaration_required,omitempty"`
	ExportDeclarationReference                string `protobuf:"bytes,18,opt,name=export_declaration_reference,json=exportDeclarationReference,proto3" json:"export_declaration_reference,omitempty"`
	IsImportLicenseRequired                   bool   `protobuf:"varint,19,opt,name=is_import_license_required,json=isImportLicenseRequired,proto3" json:"is_import_license_required,omitempty"`
	ImportLicenseReference                    string `protobuf:"bytes,20,opt,name=import_license_reference,json=importLicenseReference,proto3" json:"import_license_reference,omitempty"`
	SubmissionDateTime                        string `protobuf:"bytes,21,opt,name=submission_date_time,json=submissionDateTime,proto3" json:"submission_date_time,omitempty"`
	IsAmsAciFilingRequired                    bool   `protobuf:"varint,22,opt,name=is_ams_aci_filing_required,json=isAmsAciFilingRequired,proto3" json:"is_ams_aci_filing_required,omitempty"`
	IsDestinationFilingRequired               bool   `protobuf:"varint,23,opt,name=is_destination_filing_required,json=isDestinationFilingRequired,proto3" json:"is_destination_filing_required,omitempty"`
	ContractQuotationReference                string `protobuf:"bytes,24,opt,name=contract_quotation_reference,json=contractQuotationReference,proto3" json:"contract_quotation_reference,omitempty"`
	ExpectedDepartureDate                     string `protobuf:"bytes,25,opt,name=expected_departure_date,json=expectedDepartureDate,proto3" json:"expected_departure_date,omitempty"`
	ExpectedArrivalAtPlaceOfDeliveryStartDate string `protobuf:"bytes,26,opt,name=expected_arrival_at_place_of_delivery_start_date,json=expectedArrivalAtPlaceOfDeliveryStartDate,proto3" json:"expected_arrival_at_place_of_delivery_start_date,omitempty"`
	ExpectedArrivalAtPlaceOfDeliveryEndDate   string `protobuf:"bytes,27,opt,name=expected_arrival_at_place_of_delivery_end_date,json=expectedArrivalAtPlaceOfDeliveryEndDate,proto3" json:"expected_arrival_at_place_of_delivery_end_date,omitempty"`
	TransportDocumentTypeCode                 string `protobuf:"bytes,28,opt,name=transport_document_type_code,json=transportDocumentTypeCode,proto3" json:"transport_document_type_code,omitempty"`
	TransportDocumentReference                string `protobuf:"bytes,29,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	BookingChannelReference                   string `protobuf:"bytes,30,opt,name=booking_channel_reference,json=bookingChannelReference,proto3" json:"booking_channel_reference,omitempty"`
	IncoTerms                                 string `protobuf:"bytes,31,opt,name=inco_terms,json=incoTerms,proto3" json:"inco_terms,omitempty"`
	CommunicationChannelCode                  string `protobuf:"bytes,32,opt,name=communication_channel_code,json=communicationChannelCode,proto3" json:"communication_channel_code,omitempty"`
	IsEquipmentSubstitutionAllowed            bool   `protobuf:"varint,33,opt,name=is_equipment_substitution_allowed,json=isEquipmentSubstitutionAllowed,proto3" json:"is_equipment_substitution_allowed,omitempty"`
	VesselImoNumber                           string `protobuf:"bytes,34,opt,name=vessel_imo_number,json=vesselImoNumber,proto3" json:"vessel_imo_number,omitempty"`
	PreCarriageModeOfTransportCode            string `protobuf:"bytes,35,opt,name=pre_carriage_mode_of_transport_code,json=preCarriageModeOfTransportCode,proto3" json:"pre_carriage_mode_of_transport_code,omitempty"`
	UserId                                    string `protobuf:"bytes,36,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                                 string `protobuf:"bytes,37,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                                 string `protobuf:"bytes,38,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateBookingSummaryRequest) Reset() {
	*x = CreateBookingSummaryRequest{}
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBookingSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBookingSummaryRequest) ProtoMessage() {}

func (x *CreateBookingSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBookingSummaryRequest.ProtoReflect.Descriptor instead.
func (*CreateBookingSummaryRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_summary_proto_rawDescGZIP(), []int{0}
}

func (x *CreateBookingSummaryRequest) GetCarrierBookingRequestReference() string {
	if x != nil {
		return x.CarrierBookingRequestReference
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetDocumentStatus() string {
	if x != nil {
		return x.DocumentStatus
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetBookingRequestCreatedDateTime() string {
	if x != nil {
		return x.BookingRequestCreatedDateTime
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetBookingRequestUpdatedDateTime() string {
	if x != nil {
		return x.BookingRequestUpdatedDateTime
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetReceiptTypeAtOrigin() string {
	if x != nil {
		return x.ReceiptTypeAtOrigin
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetDeliveryTypeAtDestination() string {
	if x != nil {
		return x.DeliveryTypeAtDestination
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetCargoMovementTypeAtOrigin() string {
	if x != nil {
		return x.CargoMovementTypeAtOrigin
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetCargoMovementTypeAtDestination() string {
	if x != nil {
		return x.CargoMovementTypeAtDestination
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetServiceContractReference() string {
	if x != nil {
		return x.ServiceContractReference
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetVesselName() string {
	if x != nil {
		return x.VesselName
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetCarrierExportVoyageNumber() string {
	if x != nil {
		return x.CarrierExportVoyageNumber
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetUniversalExportVoyageReference() string {
	if x != nil {
		return x.UniversalExportVoyageReference
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetDeclaredValue() string {
	if x != nil {
		return x.DeclaredValue
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetDeclaredValueCurrency() string {
	if x != nil {
		return x.DeclaredValueCurrency
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetPaymentTermCode() string {
	if x != nil {
		return x.PaymentTermCode
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetIsPartialLoadAllowed() bool {
	if x != nil {
		return x.IsPartialLoadAllowed
	}
	return false
}

func (x *CreateBookingSummaryRequest) GetIsExportDeclarationRequired() bool {
	if x != nil {
		return x.IsExportDeclarationRequired
	}
	return false
}

func (x *CreateBookingSummaryRequest) GetExportDeclarationReference() string {
	if x != nil {
		return x.ExportDeclarationReference
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetIsImportLicenseRequired() bool {
	if x != nil {
		return x.IsImportLicenseRequired
	}
	return false
}

func (x *CreateBookingSummaryRequest) GetImportLicenseReference() string {
	if x != nil {
		return x.ImportLicenseReference
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetSubmissionDateTime() string {
	if x != nil {
		return x.SubmissionDateTime
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetIsAmsAciFilingRequired() bool {
	if x != nil {
		return x.IsAmsAciFilingRequired
	}
	return false
}

func (x *CreateBookingSummaryRequest) GetIsDestinationFilingRequired() bool {
	if x != nil {
		return x.IsDestinationFilingRequired
	}
	return false
}

func (x *CreateBookingSummaryRequest) GetContractQuotationReference() string {
	if x != nil {
		return x.ContractQuotationReference
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetExpectedDepartureDate() string {
	if x != nil {
		return x.ExpectedDepartureDate
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetExpectedArrivalAtPlaceOfDeliveryStartDate() string {
	if x != nil {
		return x.ExpectedArrivalAtPlaceOfDeliveryStartDate
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetExpectedArrivalAtPlaceOfDeliveryEndDate() string {
	if x != nil {
		return x.ExpectedArrivalAtPlaceOfDeliveryEndDate
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetTransportDocumentTypeCode() string {
	if x != nil {
		return x.TransportDocumentTypeCode
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetBookingChannelReference() string {
	if x != nil {
		return x.BookingChannelReference
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetIncoTerms() string {
	if x != nil {
		return x.IncoTerms
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetCommunicationChannelCode() string {
	if x != nil {
		return x.CommunicationChannelCode
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetIsEquipmentSubstitutionAllowed() bool {
	if x != nil {
		return x.IsEquipmentSubstitutionAllowed
	}
	return false
}

func (x *CreateBookingSummaryRequest) GetVesselImoNumber() string {
	if x != nil {
		return x.VesselImoNumber
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetPreCarriageModeOfTransportCode() string {
	if x != nil {
		return x.PreCarriageModeOfTransportCode
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateBookingSummaryRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateBookingSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingSummary *BookingSummary `protobuf:"bytes,1,opt,name=booking_summary,json=bookingSummary,proto3" json:"booking_summary,omitempty"`
}

func (x *CreateBookingSummaryResponse) Reset() {
	*x = CreateBookingSummaryResponse{}
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBookingSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBookingSummaryResponse) ProtoMessage() {}

func (x *CreateBookingSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBookingSummaryResponse.ProtoReflect.Descriptor instead.
func (*CreateBookingSummaryResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_summary_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBookingSummaryResponse) GetBookingSummary() *BookingSummary {
	if x != nil {
		return x.BookingSummary
	}
	return nil
}

type GetBookingSummariesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingSummaries []*BookingSummary `protobuf:"bytes,1,rep,name=booking_summaries,json=bookingSummaries,proto3" json:"booking_summaries,omitempty"`
	NextCursor       string            `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetBookingSummariesResponse) Reset() {
	*x = GetBookingSummariesResponse{}
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookingSummariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingSummariesResponse) ProtoMessage() {}

func (x *GetBookingSummariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingSummariesResponse.ProtoReflect.Descriptor instead.
func (*GetBookingSummariesResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_summary_proto_rawDescGZIP(), []int{2}
}

func (x *GetBookingSummariesResponse) GetBookingSummaries() []*BookingSummary {
	if x != nil {
		return x.BookingSummaries
	}
	return nil
}

func (x *GetBookingSummariesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetBookingSummariesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetBookingSummariesRequest) Reset() {
	*x = GetBookingSummariesRequest{}
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookingSummariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingSummariesRequest) ProtoMessage() {}

func (x *GetBookingSummariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingSummariesRequest.ProtoReflect.Descriptor instead.
func (*GetBookingSummariesRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_summary_proto_rawDescGZIP(), []int{3}
}

func (x *GetBookingSummariesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetBookingSummariesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetBookingSummariesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetBookingSummariesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type BookingSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingSummaryD *BookingSummaryD `protobuf:"bytes,1,opt,name=booking_summary_d,json=bookingSummaryD,proto3" json:"booking_summary_d,omitempty"`
	BookingSummaryT *BookingSummaryT `protobuf:"bytes,2,opt,name=booking_summary_t,json=bookingSummaryT,proto3" json:"booking_summary_t,omitempty"`
	CrUpdUser       *v1.CrUpdUser    `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime       *v1.CrUpdTime    `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *BookingSummary) Reset() {
	*x = BookingSummary{}
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BookingSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingSummary) ProtoMessage() {}

func (x *BookingSummary) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingSummary.ProtoReflect.Descriptor instead.
func (*BookingSummary) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_summary_proto_rawDescGZIP(), []int{4}
}

func (x *BookingSummary) GetBookingSummaryD() *BookingSummaryD {
	if x != nil {
		return x.BookingSummaryD
	}
	return nil
}

func (x *BookingSummary) GetBookingSummaryT() *BookingSummaryT {
	if x != nil {
		return x.BookingSummaryT
	}
	return nil
}

func (x *BookingSummary) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *BookingSummary) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type BookingSummaryD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                          []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                            string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	CarrierBookingRequestReference string `protobuf:"bytes,4,opt,name=carrier_booking_request_reference,json=carrierBookingRequestReference,proto3" json:"carrier_booking_request_reference,omitempty"`
	DocumentStatus                 string `protobuf:"bytes,5,opt,name=document_status,json=documentStatus,proto3" json:"document_status,omitempty"`
	ReceiptTypeAtOrigin            string `protobuf:"bytes,6,opt,name=receipt_type_at_origin,json=receiptTypeAtOrigin,proto3" json:"receipt_type_at_origin,omitempty"`
	DeliveryTypeAtDestination      string `protobuf:"bytes,7,opt,name=delivery_type_at_destination,json=deliveryTypeAtDestination,proto3" json:"delivery_type_at_destination,omitempty"`
	CargoMovementTypeAtOrigin      string `protobuf:"bytes,8,opt,name=cargo_movement_type_at_origin,json=cargoMovementTypeAtOrigin,proto3" json:"cargo_movement_type_at_origin,omitempty"`
	CargoMovementTypeAtDestination string `protobuf:"bytes,9,opt,name=cargo_movement_type_at_destination,json=cargoMovementTypeAtDestination,proto3" json:"cargo_movement_type_at_destination,omitempty"`
	ServiceContractReference       string `protobuf:"bytes,10,opt,name=service_contract_reference,json=serviceContractReference,proto3" json:"service_contract_reference,omitempty"`
	VesselName                     string `protobuf:"bytes,11,opt,name=vessel_name,json=vesselName,proto3" json:"vessel_name,omitempty"`
	CarrierExportVoyageNumber      string `protobuf:"bytes,12,opt,name=carrier_export_voyage_number,json=carrierExportVoyageNumber,proto3" json:"carrier_export_voyage_number,omitempty"`
	UniversalExportVoyageReference string `protobuf:"bytes,13,opt,name=universal_export_voyage_reference,json=universalExportVoyageReference,proto3" json:"universal_export_voyage_reference,omitempty"`
	DeclaredValue                  int64  `protobuf:"varint,14,opt,name=declared_value,json=declaredValue,proto3" json:"declared_value,omitempty"`
	DeclaredValueCurrency          string `protobuf:"bytes,15,opt,name=declared_value_currency,json=declaredValueCurrency,proto3" json:"declared_value_currency,omitempty"`
	DeclaredValueString            string `protobuf:"bytes,16,opt,name=declared_value_string,json=declaredValueString,proto3" json:"declared_value_string,omitempty"`
	PaymentTermCode                string `protobuf:"bytes,17,opt,name=payment_term_code,json=paymentTermCode,proto3" json:"payment_term_code,omitempty"`
	IsPartialLoadAllowed           bool   `protobuf:"varint,18,opt,name=is_partial_load_allowed,json=isPartialLoadAllowed,proto3" json:"is_partial_load_allowed,omitempty"`
	IsExportDeclarationRequired    bool   `protobuf:"varint,19,opt,name=is_export_declaration_required,json=isExportDeclarationRequired,proto3" json:"is_export_declaration_required,omitempty"`
	ExportDeclarationReference     string `protobuf:"bytes,20,opt,name=export_declaration_reference,json=exportDeclarationReference,proto3" json:"export_declaration_reference,omitempty"`
	IsImportLicenseRequired        bool   `protobuf:"varint,21,opt,name=is_import_license_required,json=isImportLicenseRequired,proto3" json:"is_import_license_required,omitempty"`
	ImportLicenseReference         string `protobuf:"bytes,22,opt,name=import_license_reference,json=importLicenseReference,proto3" json:"import_license_reference,omitempty"`
	IsAmsAciFilingRequired         bool   `protobuf:"varint,23,opt,name=is_ams_aci_filing_required,json=isAmsAciFilingRequired,proto3" json:"is_ams_aci_filing_required,omitempty"`
	IsDestinationFilingRequired    bool   `protobuf:"varint,24,opt,name=is_destination_filing_required,json=isDestinationFilingRequired,proto3" json:"is_destination_filing_required,omitempty"`
	ContractQuotationReference     string `protobuf:"bytes,25,opt,name=contract_quotation_reference,json=contractQuotationReference,proto3" json:"contract_quotation_reference,omitempty"`
	TransportDocumentTypeCode      string `protobuf:"bytes,26,opt,name=transport_document_type_code,json=transportDocumentTypeCode,proto3" json:"transport_document_type_code,omitempty"`
	TransportDocumentReference     string `protobuf:"bytes,27,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	BookingChannelReference        string `protobuf:"bytes,28,opt,name=booking_channel_reference,json=bookingChannelReference,proto3" json:"booking_channel_reference,omitempty"`
	IncoTerms                      string `protobuf:"bytes,29,opt,name=inco_terms,json=incoTerms,proto3" json:"inco_terms,omitempty"`
	CommunicationChannelCode       string `protobuf:"bytes,30,opt,name=communication_channel_code,json=communicationChannelCode,proto3" json:"communication_channel_code,omitempty"`
	IsEquipmentSubstitutionAllowed bool   `protobuf:"varint,31,opt,name=is_equipment_substitution_allowed,json=isEquipmentSubstitutionAllowed,proto3" json:"is_equipment_substitution_allowed,omitempty"`
	VesselImoNumber                string `protobuf:"bytes,32,opt,name=vessel_imo_number,json=vesselImoNumber,proto3" json:"vessel_imo_number,omitempty"`
	PreCarriageModeOfTransportCode string `protobuf:"bytes,33,opt,name=pre_carriage_mode_of_transport_code,json=preCarriageModeOfTransportCode,proto3" json:"pre_carriage_mode_of_transport_code,omitempty"`
}

func (x *BookingSummaryD) Reset() {
	*x = BookingSummaryD{}
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BookingSummaryD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingSummaryD) ProtoMessage() {}

func (x *BookingSummaryD) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingSummaryD.ProtoReflect.Descriptor instead.
func (*BookingSummaryD) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_summary_proto_rawDescGZIP(), []int{5}
}

func (x *BookingSummaryD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BookingSummaryD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *BookingSummaryD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *BookingSummaryD) GetCarrierBookingRequestReference() string {
	if x != nil {
		return x.CarrierBookingRequestReference
	}
	return ""
}

func (x *BookingSummaryD) GetDocumentStatus() string {
	if x != nil {
		return x.DocumentStatus
	}
	return ""
}

func (x *BookingSummaryD) GetReceiptTypeAtOrigin() string {
	if x != nil {
		return x.ReceiptTypeAtOrigin
	}
	return ""
}

func (x *BookingSummaryD) GetDeliveryTypeAtDestination() string {
	if x != nil {
		return x.DeliveryTypeAtDestination
	}
	return ""
}

func (x *BookingSummaryD) GetCargoMovementTypeAtOrigin() string {
	if x != nil {
		return x.CargoMovementTypeAtOrigin
	}
	return ""
}

func (x *BookingSummaryD) GetCargoMovementTypeAtDestination() string {
	if x != nil {
		return x.CargoMovementTypeAtDestination
	}
	return ""
}

func (x *BookingSummaryD) GetServiceContractReference() string {
	if x != nil {
		return x.ServiceContractReference
	}
	return ""
}

func (x *BookingSummaryD) GetVesselName() string {
	if x != nil {
		return x.VesselName
	}
	return ""
}

func (x *BookingSummaryD) GetCarrierExportVoyageNumber() string {
	if x != nil {
		return x.CarrierExportVoyageNumber
	}
	return ""
}

func (x *BookingSummaryD) GetUniversalExportVoyageReference() string {
	if x != nil {
		return x.UniversalExportVoyageReference
	}
	return ""
}

func (x *BookingSummaryD) GetDeclaredValue() int64 {
	if x != nil {
		return x.DeclaredValue
	}
	return 0
}

func (x *BookingSummaryD) GetDeclaredValueCurrency() string {
	if x != nil {
		return x.DeclaredValueCurrency
	}
	return ""
}

func (x *BookingSummaryD) GetDeclaredValueString() string {
	if x != nil {
		return x.DeclaredValueString
	}
	return ""
}

func (x *BookingSummaryD) GetPaymentTermCode() string {
	if x != nil {
		return x.PaymentTermCode
	}
	return ""
}

func (x *BookingSummaryD) GetIsPartialLoadAllowed() bool {
	if x != nil {
		return x.IsPartialLoadAllowed
	}
	return false
}

func (x *BookingSummaryD) GetIsExportDeclarationRequired() bool {
	if x != nil {
		return x.IsExportDeclarationRequired
	}
	return false
}

func (x *BookingSummaryD) GetExportDeclarationReference() string {
	if x != nil {
		return x.ExportDeclarationReference
	}
	return ""
}

func (x *BookingSummaryD) GetIsImportLicenseRequired() bool {
	if x != nil {
		return x.IsImportLicenseRequired
	}
	return false
}

func (x *BookingSummaryD) GetImportLicenseReference() string {
	if x != nil {
		return x.ImportLicenseReference
	}
	return ""
}

func (x *BookingSummaryD) GetIsAmsAciFilingRequired() bool {
	if x != nil {
		return x.IsAmsAciFilingRequired
	}
	return false
}

func (x *BookingSummaryD) GetIsDestinationFilingRequired() bool {
	if x != nil {
		return x.IsDestinationFilingRequired
	}
	return false
}

func (x *BookingSummaryD) GetContractQuotationReference() string {
	if x != nil {
		return x.ContractQuotationReference
	}
	return ""
}

func (x *BookingSummaryD) GetTransportDocumentTypeCode() string {
	if x != nil {
		return x.TransportDocumentTypeCode
	}
	return ""
}

func (x *BookingSummaryD) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *BookingSummaryD) GetBookingChannelReference() string {
	if x != nil {
		return x.BookingChannelReference
	}
	return ""
}

func (x *BookingSummaryD) GetIncoTerms() string {
	if x != nil {
		return x.IncoTerms
	}
	return ""
}

func (x *BookingSummaryD) GetCommunicationChannelCode() string {
	if x != nil {
		return x.CommunicationChannelCode
	}
	return ""
}

func (x *BookingSummaryD) GetIsEquipmentSubstitutionAllowed() bool {
	if x != nil {
		return x.IsEquipmentSubstitutionAllowed
	}
	return false
}

func (x *BookingSummaryD) GetVesselImoNumber() string {
	if x != nil {
		return x.VesselImoNumber
	}
	return ""
}

func (x *BookingSummaryD) GetPreCarriageModeOfTransportCode() string {
	if x != nil {
		return x.PreCarriageModeOfTransportCode
	}
	return ""
}

type BookingSummaryT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingRequestCreatedDateTime             *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=booking_request_created_date_time,json=bookingRequestCreatedDateTime,proto3" json:"booking_request_created_date_time,omitempty"`
	BookingRequestUpdatedDateTime             *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=booking_request_updated_date_time,json=bookingRequestUpdatedDateTime,proto3" json:"booking_request_updated_date_time,omitempty"`
	SubmissionDateTime                        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=submission_date_time,json=submissionDateTime,proto3" json:"submission_date_time,omitempty"`
	ExpectedDepartureDate                     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expected_departure_date,json=expectedDepartureDate,proto3" json:"expected_departure_date,omitempty"`
	ExpectedArrivalAtPlaceOfDeliveryStartDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expected_arrival_at_place_of_delivery_start_date,json=expectedArrivalAtPlaceOfDeliveryStartDate,proto3" json:"expected_arrival_at_place_of_delivery_start_date,omitempty"`
	ExpectedArrivalAtPlaceOfDeliveryEndDate   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expected_arrival_at_place_of_delivery_end_date,json=expectedArrivalAtPlaceOfDeliveryEndDate,proto3" json:"expected_arrival_at_place_of_delivery_end_date,omitempty"`
}

func (x *BookingSummaryT) Reset() {
	*x = BookingSummaryT{}
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BookingSummaryT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingSummaryT) ProtoMessage() {}

func (x *BookingSummaryT) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingSummaryT.ProtoReflect.Descriptor instead.
func (*BookingSummaryT) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_summary_proto_rawDescGZIP(), []int{6}
}

func (x *BookingSummaryT) GetBookingRequestCreatedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookingRequestCreatedDateTime
	}
	return nil
}

func (x *BookingSummaryT) GetBookingRequestUpdatedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookingRequestUpdatedDateTime
	}
	return nil
}

func (x *BookingSummaryT) GetSubmissionDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmissionDateTime
	}
	return nil
}

func (x *BookingSummaryT) GetExpectedDepartureDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedDepartureDate
	}
	return nil
}

func (x *BookingSummaryT) GetExpectedArrivalAtPlaceOfDeliveryStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedArrivalAtPlaceOfDeliveryStartDate
	}
	return nil
}

func (x *BookingSummaryT) GetExpectedArrivalAtPlaceOfDeliveryEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedArrivalAtPlaceOfDeliveryEndDate
	}
	return nil
}

type GetBookingSummaryByCarrierBookingRequestReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarrierBookingRequestReference string `protobuf:"bytes,1,opt,name=carrier_booking_request_reference,json=carrierBookingRequestReference,proto3" json:"carrier_booking_request_reference,omitempty"`
	UserEmail                      string `protobuf:"bytes,2,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                      string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetBookingSummaryByCarrierBookingRequestReferenceRequest) Reset() {
	*x = GetBookingSummaryByCarrierBookingRequestReferenceRequest{}
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookingSummaryByCarrierBookingRequestReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingSummaryByCarrierBookingRequestReferenceRequest) ProtoMessage() {}

func (x *GetBookingSummaryByCarrierBookingRequestReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingSummaryByCarrierBookingRequestReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetBookingSummaryByCarrierBookingRequestReferenceRequest) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_summary_proto_rawDescGZIP(), []int{7}
}

func (x *GetBookingSummaryByCarrierBookingRequestReferenceRequest) GetCarrierBookingRequestReference() string {
	if x != nil {
		return x.CarrierBookingRequestReference
	}
	return ""
}

func (x *GetBookingSummaryByCarrierBookingRequestReferenceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetBookingSummaryByCarrierBookingRequestReferenceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetBookingSummaryByCarrierBookingRequestReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingSummary *BookingSummary `protobuf:"bytes,1,opt,name=booking_summary,json=bookingSummary,proto3" json:"booking_summary,omitempty"`
}

func (x *GetBookingSummaryByCarrierBookingRequestReferenceResponse) Reset() {
	*x = GetBookingSummaryByCarrierBookingRequestReferenceResponse{}
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookingSummaryByCarrierBookingRequestReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingSummaryByCarrierBookingRequestReferenceResponse) ProtoMessage() {}

func (x *GetBookingSummaryByCarrierBookingRequestReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bkg_v2_bkg_summary_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingSummaryByCarrierBookingRequestReferenceResponse.ProtoReflect.Descriptor instead.
func (*GetBookingSummaryByCarrierBookingRequestReferenceResponse) Descriptor() ([]byte, []int) {
	return file_bkg_v2_bkg_summary_proto_rawDescGZIP(), []int{8}
}

func (x *GetBookingSummaryByCarrierBookingRequestReferenceResponse) GetBookingSummary() *BookingSummary {
	if x != nil {
		return x.BookingSummary
	}
	return nil
}

var File_bkg_v2_bkg_summary_proto protoreflect.FileDescriptor

var file_bkg_v2_bkg_summary_proto_rawDesc = []byte{
	0x0a, 0x18, 0x62, 0x6b, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x6b, 0x67, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x62, 0x6b, 0x67, 0x2e,
	0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x11, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x21, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x48, 0x0a, 0x21, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1d, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x61, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x22, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x4d, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x21, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a,
	0x17, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x69,
	0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x69, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x61, 0x6d, 0x73, 0x5f, 0x61,
	0x63, 0x69, 0x5f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x41, 0x6d, 0x73, 0x41,
	0x63, 0x69, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x63, 0x0a, 0x30, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x29, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x4f, 0x66, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x27, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x6f, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x49, 0x0a, 0x21, 0x69, 0x73, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x69, 0x73,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49,
	0x6d, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x23, 0x70, 0x72, 0x65, 0x5f,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x72, 0x65, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61,
	0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0f,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0e, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x83, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x11, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x10, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x11, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x52, 0x0f,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x12,
	0x43, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6b, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x54, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72,
	0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xc4, 0x0e, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64,
	0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x49, 0x0a,
	0x21, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x61, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1d, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61,
	0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x41, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x22, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x4d, 0x6f, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x21, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x32, 0x0a, 0x15, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b,
	0x69, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x1a, 0x69, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x69, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x61, 0x6d, 0x73, 0x5f, 0x61,
	0x63, 0x69, 0x5f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x41, 0x6d, 0x73, 0x41,
	0x63, 0x69, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x6f,
	0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x69, 0x73, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e,
	0x69, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x6f, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x49, 0x6d, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x23, 0x70, 0x72,
	0x65, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x72, 0x65, 0x43, 0x61, 0x72, 0x72,
	0x69, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xfd, 0x04, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x12, 0x64, 0x0a, 0x21, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x1d, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x64, 0x0a, 0x21, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1d, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a, 0x30, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x29, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x41, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x7b, 0x0a, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x61,
	0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x27,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41,
	0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x38, 0x47, 0x65, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x79, 0x43,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x21, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x7c, 0x0a,
	0x39, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x42, 0x79, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x32, 0x91, 0x03, 0x0a, 0x11,
	0x42, 0x6b, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x61, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x62, 0x6b, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x62, 0x6b,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x79, 0x43, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x2e, 0x62, 0x6b, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x79, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x62,
	0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x79, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x64, 0x63, 0x73,
	0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x67, 0x65, 0x6e, 0x2f, 0x62, 0x6b, 0x67, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_bkg_v2_bkg_summary_proto_rawDescOnce sync.Once
	file_bkg_v2_bkg_summary_proto_rawDescData = file_bkg_v2_bkg_summary_proto_rawDesc
)

func file_bkg_v2_bkg_summary_proto_rawDescGZIP() []byte {
	file_bkg_v2_bkg_summary_proto_rawDescOnce.Do(func() {
		file_bkg_v2_bkg_summary_proto_rawDescData = protoimpl.X.CompressGZIP(file_bkg_v2_bkg_summary_proto_rawDescData)
	})
	return file_bkg_v2_bkg_summary_proto_rawDescData
}

var file_bkg_v2_bkg_summary_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_bkg_v2_bkg_summary_proto_goTypes = []any{
	(*CreateBookingSummaryRequest)(nil),                               // 0: bkg.v2.CreateBookingSummaryRequest
	(*CreateBookingSummaryResponse)(nil),                              // 1: bkg.v2.CreateBookingSummaryResponse
	(*GetBookingSummariesResponse)(nil),                               // 2: bkg.v2.GetBookingSummariesResponse
	(*GetBookingSummariesRequest)(nil),                                // 3: bkg.v2.GetBookingSummariesRequest
	(*BookingSummary)(nil),                                            // 4: bkg.v2.BookingSummary
	(*BookingSummaryD)(nil),                                           // 5: bkg.v2.BookingSummaryD
	(*BookingSummaryT)(nil),                                           // 6: bkg.v2.BookingSummaryT
	(*GetBookingSummaryByCarrierBookingRequestReferenceRequest)(nil),  // 7: bkg.v2.GetBookingSummaryByCarrierBookingRequestReferenceRequest
	(*GetBookingSummaryByCarrierBookingRequestReferenceResponse)(nil), // 8: bkg.v2.GetBookingSummaryByCarrierBookingRequestReferenceResponse
	(*v1.CrUpdUser)(nil),                                              // 9: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                                              // 10: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),                                     // 11: google.protobuf.Timestamp
}
var file_bkg_v2_bkg_summary_proto_depIdxs = []int32{
	4,  // 0: bkg.v2.CreateBookingSummaryResponse.booking_summary:type_name -> bkg.v2.BookingSummary
	4,  // 1: bkg.v2.GetBookingSummariesResponse.booking_summaries:type_name -> bkg.v2.BookingSummary
	5,  // 2: bkg.v2.BookingSummary.booking_summary_d:type_name -> bkg.v2.BookingSummaryD
	6,  // 3: bkg.v2.BookingSummary.booking_summary_t:type_name -> bkg.v2.BookingSummaryT
	9,  // 4: bkg.v2.BookingSummary.cr_upd_user:type_name -> common.v1.CrUpdUser
	10, // 5: bkg.v2.BookingSummary.cr_upd_time:type_name -> common.v1.CrUpdTime
	11, // 6: bkg.v2.BookingSummaryT.booking_request_created_date_time:type_name -> google.protobuf.Timestamp
	11, // 7: bkg.v2.BookingSummaryT.booking_request_updated_date_time:type_name -> google.protobuf.Timestamp
	11, // 8: bkg.v2.BookingSummaryT.submission_date_time:type_name -> google.protobuf.Timestamp
	11, // 9: bkg.v2.BookingSummaryT.expected_departure_date:type_name -> google.protobuf.Timestamp
	11, // 10: bkg.v2.BookingSummaryT.expected_arrival_at_place_of_delivery_start_date:type_name -> google.protobuf.Timestamp
	11, // 11: bkg.v2.BookingSummaryT.expected_arrival_at_place_of_delivery_end_date:type_name -> google.protobuf.Timestamp
	4,  // 12: bkg.v2.GetBookingSummaryByCarrierBookingRequestReferenceResponse.booking_summary:type_name -> bkg.v2.BookingSummary
	0,  // 13: bkg.v2.BkgSummaryService.CreateBookingSummary:input_type -> bkg.v2.CreateBookingSummaryRequest
	3,  // 14: bkg.v2.BkgSummaryService.GetBookingSummaries:input_type -> bkg.v2.GetBookingSummariesRequest
	7,  // 15: bkg.v2.BkgSummaryService.GetBookingSummaryByCarrierBookingRequestReference:input_type -> bkg.v2.GetBookingSummaryByCarrierBookingRequestReferenceRequest
	1,  // 16: bkg.v2.BkgSummaryService.CreateBookingSummary:output_type -> bkg.v2.CreateBookingSummaryResponse
	2,  // 17: bkg.v2.BkgSummaryService.GetBookingSummaries:output_type -> bkg.v2.GetBookingSummariesResponse
	8,  // 18: bkg.v2.BkgSummaryService.GetBookingSummaryByCarrierBookingRequestReference:output_type -> bkg.v2.GetBookingSummaryByCarrierBookingRequestReferenceResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_bkg_v2_bkg_summary_proto_init() }
func file_bkg_v2_bkg_summary_proto_init() {
	if File_bkg_v2_bkg_summary_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bkg_v2_bkg_summary_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bkg_v2_bkg_summary_proto_goTypes,
		DependencyIndexes: file_bkg_v2_bkg_summary_proto_depIdxs,
		MessageInfos:      file_bkg_v2_bkg_summary_proto_msgTypes,
	}.Build()
	File_bkg_v2_bkg_summary_proto = out.File
	file_bkg_v2_bkg_summary_proto_rawDesc = nil
	file_bkg_v2_bkg_summary_proto_goTypes = nil
	file_bkg_v2_bkg_summary_proto_depIdxs = nil
}
