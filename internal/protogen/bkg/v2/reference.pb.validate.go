// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bkg/v2/reference.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateReferenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReferenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReferenceRequestMultiError, or nil if none found.
func (m *CreateReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReferenceTypeCode

	// no validation rules for ReferenceValue

	// no validation rules for ShipmentId

	// no validation rules for ShippingInstructionId

	// no validation rules for BookingId

	// no validation rules for ConsignmentItemId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateReferenceRequestMultiError(errors)
	}

	return nil
}

// CreateReferenceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateReferenceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReferenceRequestMultiError) AllErrors() []error { return m }

// CreateReferenceRequestValidationError is the validation error returned by
// CreateReferenceRequest.Validate if the designated constraints aren't met.
type CreateReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReferenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReferenceRequestValidationError) ErrorName() string {
	return "CreateReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReferenceRequestValidationError{}

// Validate checks the field values on CreateReferenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReferenceResponseMultiError, or nil if none found.
func (m *CreateReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReference1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReferenceResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReferenceResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReference1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReferenceResponseValidationError{
				field:  "Reference1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReferenceResponseMultiError(errors)
	}

	return nil
}

// CreateReferenceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateReferenceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReferenceResponseMultiError) AllErrors() []error { return m }

// CreateReferenceResponseValidationError is the validation error returned by
// CreateReferenceResponse.Validate if the designated constraints aren't met.
type CreateReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReferenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReferenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReferenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReferenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReferenceResponseValidationError) ErrorName() string {
	return "CreateReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReferenceResponseValidationError{}

// Validate checks the field values on CreateReferencesByBookingIdAndTOsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateReferencesByBookingIdAndTOsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateReferencesByBookingIdAndTOsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateReferencesByBookingIdAndTOsRequestMultiError, or nil if none found.
func (m *CreateReferencesByBookingIdAndTOsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReferencesByBookingIdAndTOsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreateReferenceRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReferencesByBookingIdAndTOsRequestValidationError{
					field:  "CreateReferenceRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReferencesByBookingIdAndTOsRequestValidationError{
					field:  "CreateReferenceRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateReferenceRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReferencesByBookingIdAndTOsRequestValidationError{
				field:  "CreateReferenceRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReferencesByBookingIdAndTOsRequestMultiError(errors)
	}

	return nil
}

// CreateReferencesByBookingIdAndTOsRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateReferencesByBookingIdAndTOsRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateReferencesByBookingIdAndTOsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReferencesByBookingIdAndTOsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReferencesByBookingIdAndTOsRequestMultiError) AllErrors() []error { return m }

// CreateReferencesByBookingIdAndTOsRequestValidationError is the validation
// error returned by CreateReferencesByBookingIdAndTOsRequest.Validate if the
// designated constraints aren't met.
type CreateReferencesByBookingIdAndTOsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReferencesByBookingIdAndTOsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReferencesByBookingIdAndTOsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReferencesByBookingIdAndTOsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReferencesByBookingIdAndTOsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReferencesByBookingIdAndTOsRequestValidationError) ErrorName() string {
	return "CreateReferencesByBookingIdAndTOsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReferencesByBookingIdAndTOsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReferencesByBookingIdAndTOsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReferencesByBookingIdAndTOsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReferencesByBookingIdAndTOsRequestValidationError{}

// Validate checks the field values on
// CreateReferencesByBookingIdAndTOsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateReferencesByBookingIdAndTOsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateReferencesByBookingIdAndTOsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateReferencesByBookingIdAndTOsResponseMultiError, or nil if none found.
func (m *CreateReferencesByBookingIdAndTOsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReferencesByBookingIdAndTOsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReference1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReferencesByBookingIdAndTOsResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReferencesByBookingIdAndTOsResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReference1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReferencesByBookingIdAndTOsResponseValidationError{
				field:  "Reference1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReferencesByBookingIdAndTOsResponseMultiError(errors)
	}

	return nil
}

// CreateReferencesByBookingIdAndTOsResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateReferencesByBookingIdAndTOsResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateReferencesByBookingIdAndTOsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReferencesByBookingIdAndTOsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReferencesByBookingIdAndTOsResponseMultiError) AllErrors() []error { return m }

// CreateReferencesByBookingIdAndTOsResponseValidationError is the validation
// error returned by CreateReferencesByBookingIdAndTOsResponse.Validate if the
// designated constraints aren't met.
type CreateReferencesByBookingIdAndTOsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReferencesByBookingIdAndTOsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReferencesByBookingIdAndTOsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReferencesByBookingIdAndTOsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReferencesByBookingIdAndTOsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReferencesByBookingIdAndTOsResponseValidationError) ErrorName() string {
	return "CreateReferencesByBookingIdAndTOsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReferencesByBookingIdAndTOsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReferencesByBookingIdAndTOsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReferencesByBookingIdAndTOsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReferencesByBookingIdAndTOsResponseValidationError{}

// Validate checks the field values on
// CreateReferencesByShippingInstructionIdAndTOsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateReferencesByShippingInstructionIdAndTOsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateReferencesByShippingInstructionIdAndTOsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateReferencesByShippingInstructionIdAndTOsRequestMultiError, or nil if
// none found.
func (m *CreateReferencesByShippingInstructionIdAndTOsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReferencesByShippingInstructionIdAndTOsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreateReferenceRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReferencesByShippingInstructionIdAndTOsRequestValidationError{
					field:  "CreateReferenceRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReferencesByShippingInstructionIdAndTOsRequestValidationError{
					field:  "CreateReferenceRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateReferenceRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReferencesByShippingInstructionIdAndTOsRequestValidationError{
				field:  "CreateReferenceRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReferencesByShippingInstructionIdAndTOsRequestMultiError(errors)
	}

	return nil
}

// CreateReferencesByShippingInstructionIdAndTOsRequestMultiError is an error
// wrapping multiple validation errors returned by
// CreateReferencesByShippingInstructionIdAndTOsRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateReferencesByShippingInstructionIdAndTOsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReferencesByShippingInstructionIdAndTOsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReferencesByShippingInstructionIdAndTOsRequestMultiError) AllErrors() []error { return m }

// CreateReferencesByShippingInstructionIdAndTOsRequestValidationError is the
// validation error returned by
// CreateReferencesByShippingInstructionIdAndTOsRequest.Validate if the
// designated constraints aren't met.
type CreateReferencesByShippingInstructionIdAndTOsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReferencesByShippingInstructionIdAndTOsRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateReferencesByShippingInstructionIdAndTOsRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateReferencesByShippingInstructionIdAndTOsRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateReferencesByShippingInstructionIdAndTOsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReferencesByShippingInstructionIdAndTOsRequestValidationError) ErrorName() string {
	return "CreateReferencesByShippingInstructionIdAndTOsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReferencesByShippingInstructionIdAndTOsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReferencesByShippingInstructionIdAndTOsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReferencesByShippingInstructionIdAndTOsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReferencesByShippingInstructionIdAndTOsRequestValidationError{}

// Validate checks the field values on
// CreateReferencesByShippingInstructionIdAndTOsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReferencesByShippingInstructionIdAndTOsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateReferencesByShippingInstructionIdAndTOsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReferencesByShippingInstructionIdAndTOsResponseMultiError, or nil if
// none found.
func (m *CreateReferencesByShippingInstructionIdAndTOsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReferencesByShippingInstructionIdAndTOsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReference1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReferencesByShippingInstructionIdAndTOsResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReferencesByShippingInstructionIdAndTOsResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReference1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReferencesByShippingInstructionIdAndTOsResponseValidationError{
				field:  "Reference1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReferencesByShippingInstructionIdAndTOsResponseMultiError(errors)
	}

	return nil
}

// CreateReferencesByShippingInstructionIdAndTOsResponseMultiError is an error
// wrapping multiple validation errors returned by
// CreateReferencesByShippingInstructionIdAndTOsResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateReferencesByShippingInstructionIdAndTOsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReferencesByShippingInstructionIdAndTOsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReferencesByShippingInstructionIdAndTOsResponseMultiError) AllErrors() []error {
	return m
}

// CreateReferencesByShippingInstructionIdAndTOsResponseValidationError is the
// validation error returned by
// CreateReferencesByShippingInstructionIdAndTOsResponse.Validate if the
// designated constraints aren't met.
type CreateReferencesByShippingInstructionIdAndTOsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReferencesByShippingInstructionIdAndTOsResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateReferencesByShippingInstructionIdAndTOsResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateReferencesByShippingInstructionIdAndTOsResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateReferencesByShippingInstructionIdAndTOsResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e CreateReferencesByShippingInstructionIdAndTOsResponseValidationError) ErrorName() string {
	return "CreateReferencesByShippingInstructionIdAndTOsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReferencesByShippingInstructionIdAndTOsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReferencesByShippingInstructionIdAndTOsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReferencesByShippingInstructionIdAndTOsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReferencesByShippingInstructionIdAndTOsResponseValidationError{}

// Validate checks the field values on
// CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestMultiError,
// or nil if none found.
func (m *CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreateReferenceRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestValidationError{
					field:  "CreateReferenceRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestValidationError{
					field:  "CreateReferenceRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateReferenceRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestValidationError{
				field:  "CreateReferenceRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestMultiError(errors)
	}

	return nil
}

// CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestMultiError
// is an error wrapping multiple validation errors returned by
// CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestMultiError) AllErrors() []error {
	return m
}

// CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestValidationError
// is the validation error returned by
// CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequest.Validate
// if the designated constraints aren't met.
type CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestValidationError) ErrorName() string {
	return "CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsRequestValidationError{}

// Validate checks the field values on
// CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseMultiError,
// or nil if none found.
func (m *CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReference1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReference1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseValidationError{
				field:  "Reference1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseMultiError(errors)
	}

	return nil
}

// CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseMultiError
// is an error wrapping multiple validation errors returned by
// CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseMultiError) AllErrors() []error {
	return m
}

// CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseValidationError
// is the validation error returned by
// CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponse.Validate
// if the designated constraints aren't met.
type CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseValidationError) ErrorName() string {
	return "CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReferencesByShippingInstructionReferenceAndConsignmentIdAndTOsResponseValidationError{}

// Validate checks the field values on Reference1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reference1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reference1 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Reference1MultiError, or
// nil if none found.
func (m *Reference1) ValidateAll() error {
	return m.validate(true)
}

func (m *Reference1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReference1D()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Reference1ValidationError{
					field:  "Reference1D",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Reference1ValidationError{
					field:  "Reference1D",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReference1D()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Reference1ValidationError{
				field:  "Reference1D",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Reference1ValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Reference1ValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Reference1ValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Reference1ValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Reference1ValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Reference1ValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Reference1MultiError(errors)
	}

	return nil
}

// Reference1MultiError is an error wrapping multiple validation errors
// returned by Reference1.ValidateAll() if the designated constraints aren't met.
type Reference1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Reference1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Reference1MultiError) AllErrors() []error { return m }

// Reference1ValidationError is the validation error returned by
// Reference1.Validate if the designated constraints aren't met.
type Reference1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Reference1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Reference1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Reference1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Reference1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Reference1ValidationError) ErrorName() string { return "Reference1ValidationError" }

// Error satisfies the builtin error interface
func (e Reference1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReference1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Reference1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Reference1ValidationError{}

// Validate checks the field values on Reference1D with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reference1D) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reference1D with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Reference1DMultiError, or
// nil if none found.
func (m *Reference1D) ValidateAll() error {
	return m.validate(true)
}

func (m *Reference1D) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ReferenceTypeCode

	// no validation rules for ReferenceValue

	// no validation rules for ShipmentId

	// no validation rules for ShippingInstructionId

	// no validation rules for BookingId

	// no validation rules for ConsignmentItemId

	if len(errors) > 0 {
		return Reference1DMultiError(errors)
	}

	return nil
}

// Reference1DMultiError is an error wrapping multiple validation errors
// returned by Reference1D.ValidateAll() if the designated constraints aren't met.
type Reference1DMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Reference1DMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Reference1DMultiError) AllErrors() []error { return m }

// Reference1DValidationError is the validation error returned by
// Reference1D.Validate if the designated constraints aren't met.
type Reference1DValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Reference1DValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Reference1DValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Reference1DValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Reference1DValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Reference1DValidationError) ErrorName() string { return "Reference1DValidationError" }

// Error satisfies the builtin error interface
func (e Reference1DValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReference1D.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Reference1DValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Reference1DValidationError{}

// Validate checks the field values on FindByBookingIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindByBookingIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByBookingIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByBookingIdRequestMultiError, or nil if none found.
func (m *FindByBookingIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByBookingIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookingId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FindByBookingIdRequestMultiError(errors)
	}

	return nil
}

// FindByBookingIdRequestMultiError is an error wrapping multiple validation
// errors returned by FindByBookingIdRequest.ValidateAll() if the designated
// constraints aren't met.
type FindByBookingIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByBookingIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByBookingIdRequestMultiError) AllErrors() []error { return m }

// FindByBookingIdRequestValidationError is the validation error returned by
// FindByBookingIdRequest.Validate if the designated constraints aren't met.
type FindByBookingIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByBookingIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByBookingIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByBookingIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByBookingIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByBookingIdRequestValidationError) ErrorName() string {
	return "FindByBookingIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindByBookingIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByBookingIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByBookingIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByBookingIdRequestValidationError{}

// Validate checks the field values on FindByBookingIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindByBookingIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByBookingIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByBookingIdResponseMultiError, or nil if none found.
func (m *FindByBookingIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByBookingIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReference1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindByBookingIdResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindByBookingIdResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReference1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindByBookingIdResponseValidationError{
				field:  "Reference1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindByBookingIdResponseMultiError(errors)
	}

	return nil
}

// FindByBookingIdResponseMultiError is an error wrapping multiple validation
// errors returned by FindByBookingIdResponse.ValidateAll() if the designated
// constraints aren't met.
type FindByBookingIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByBookingIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByBookingIdResponseMultiError) AllErrors() []error { return m }

// FindByBookingIdResponseValidationError is the validation error returned by
// FindByBookingIdResponse.Validate if the designated constraints aren't met.
type FindByBookingIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByBookingIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByBookingIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByBookingIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByBookingIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByBookingIdResponseValidationError) ErrorName() string {
	return "FindByBookingIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindByBookingIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByBookingIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByBookingIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByBookingIdResponseValidationError{}

// Validate checks the field values on FindByShippingInstructionIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindByShippingInstructionIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByShippingInstructionIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindByShippingInstructionIdRequestMultiError, or nil if none found.
func (m *FindByShippingInstructionIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByShippingInstructionIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShippingInstructionId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FindByShippingInstructionIdRequestMultiError(errors)
	}

	return nil
}

// FindByShippingInstructionIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// FindByShippingInstructionIdRequest.ValidateAll() if the designated
// constraints aren't met.
type FindByShippingInstructionIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByShippingInstructionIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByShippingInstructionIdRequestMultiError) AllErrors() []error { return m }

// FindByShippingInstructionIdRequestValidationError is the validation error
// returned by FindByShippingInstructionIdRequest.Validate if the designated
// constraints aren't met.
type FindByShippingInstructionIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByShippingInstructionIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByShippingInstructionIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByShippingInstructionIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByShippingInstructionIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByShippingInstructionIdRequestValidationError) ErrorName() string {
	return "FindByShippingInstructionIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindByShippingInstructionIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByShippingInstructionIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByShippingInstructionIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByShippingInstructionIdRequestValidationError{}

// Validate checks the field values on FindByShippingInstructionIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindByShippingInstructionIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByShippingInstructionIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindByShippingInstructionIdResponseMultiError, or nil if none found.
func (m *FindByShippingInstructionIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByShippingInstructionIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReference1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindByShippingInstructionIdResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindByShippingInstructionIdResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReference1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindByShippingInstructionIdResponseValidationError{
				field:  "Reference1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindByShippingInstructionIdResponseMultiError(errors)
	}

	return nil
}

// FindByShippingInstructionIdResponseMultiError is an error wrapping multiple
// validation errors returned by
// FindByShippingInstructionIdResponse.ValidateAll() if the designated
// constraints aren't met.
type FindByShippingInstructionIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByShippingInstructionIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByShippingInstructionIdResponseMultiError) AllErrors() []error { return m }

// FindByShippingInstructionIdResponseValidationError is the validation error
// returned by FindByShippingInstructionIdResponse.Validate if the designated
// constraints aren't met.
type FindByShippingInstructionIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByShippingInstructionIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByShippingInstructionIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByShippingInstructionIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByShippingInstructionIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByShippingInstructionIdResponseValidationError) ErrorName() string {
	return "FindByShippingInstructionIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindByShippingInstructionIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByShippingInstructionIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByShippingInstructionIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByShippingInstructionIdResponseValidationError{}

// Validate checks the field values on FindByShipmentIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindByShipmentIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByShipmentIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByShipmentIdRequestMultiError, or nil if none found.
func (m *FindByShipmentIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByShipmentIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShipmentId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FindByShipmentIdRequestMultiError(errors)
	}

	return nil
}

// FindByShipmentIdRequestMultiError is an error wrapping multiple validation
// errors returned by FindByShipmentIdRequest.ValidateAll() if the designated
// constraints aren't met.
type FindByShipmentIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByShipmentIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByShipmentIdRequestMultiError) AllErrors() []error { return m }

// FindByShipmentIdRequestValidationError is the validation error returned by
// FindByShipmentIdRequest.Validate if the designated constraints aren't met.
type FindByShipmentIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByShipmentIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByShipmentIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByShipmentIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByShipmentIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByShipmentIdRequestValidationError) ErrorName() string {
	return "FindByShipmentIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindByShipmentIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByShipmentIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByShipmentIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByShipmentIdRequestValidationError{}

// Validate checks the field values on FindByShipmentIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindByShipmentIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByShipmentIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByShipmentIdResponseMultiError, or nil if none found.
func (m *FindByShipmentIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByShipmentIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReference1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindByShipmentIdResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindByShipmentIdResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReference1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindByShipmentIdResponseValidationError{
				field:  "Reference1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindByShipmentIdResponseMultiError(errors)
	}

	return nil
}

// FindByShipmentIdResponseMultiError is an error wrapping multiple validation
// errors returned by FindByShipmentIdResponse.ValidateAll() if the designated
// constraints aren't met.
type FindByShipmentIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByShipmentIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByShipmentIdResponseMultiError) AllErrors() []error { return m }

// FindByShipmentIdResponseValidationError is the validation error returned by
// FindByShipmentIdResponse.Validate if the designated constraints aren't met.
type FindByShipmentIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByShipmentIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByShipmentIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByShipmentIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByShipmentIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByShipmentIdResponseValidationError) ErrorName() string {
	return "FindByShipmentIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindByShipmentIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByShipmentIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByShipmentIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByShipmentIdResponseValidationError{}

// Validate checks the field values on FindByTransportDocumentReferenceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FindByTransportDocumentReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindByTransportDocumentReferenceRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// FindByTransportDocumentReferenceRequestMultiError, or nil if none found.
func (m *FindByTransportDocumentReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByTransportDocumentReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransportDocumentReference

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FindByTransportDocumentReferenceRequestMultiError(errors)
	}

	return nil
}

// FindByTransportDocumentReferenceRequestMultiError is an error wrapping
// multiple validation errors returned by
// FindByTransportDocumentReferenceRequest.ValidateAll() if the designated
// constraints aren't met.
type FindByTransportDocumentReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByTransportDocumentReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByTransportDocumentReferenceRequestMultiError) AllErrors() []error { return m }

// FindByTransportDocumentReferenceRequestValidationError is the validation
// error returned by FindByTransportDocumentReferenceRequest.Validate if the
// designated constraints aren't met.
type FindByTransportDocumentReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByTransportDocumentReferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByTransportDocumentReferenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByTransportDocumentReferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByTransportDocumentReferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByTransportDocumentReferenceRequestValidationError) ErrorName() string {
	return "FindByTransportDocumentReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindByTransportDocumentReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByTransportDocumentReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByTransportDocumentReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByTransportDocumentReferenceRequestValidationError{}

// Validate checks the field values on FindByTransportDocumentReferenceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FindByTransportDocumentReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindByTransportDocumentReferenceResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// FindByTransportDocumentReferenceResponseMultiError, or nil if none found.
func (m *FindByTransportDocumentReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByTransportDocumentReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReference1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindByTransportDocumentReferenceResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindByTransportDocumentReferenceResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReference1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindByTransportDocumentReferenceResponseValidationError{
				field:  "Reference1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindByTransportDocumentReferenceResponseMultiError(errors)
	}

	return nil
}

// FindByTransportDocumentReferenceResponseMultiError is an error wrapping
// multiple validation errors returned by
// FindByTransportDocumentReferenceResponse.ValidateAll() if the designated
// constraints aren't met.
type FindByTransportDocumentReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByTransportDocumentReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByTransportDocumentReferenceResponseMultiError) AllErrors() []error { return m }

// FindByTransportDocumentReferenceResponseValidationError is the validation
// error returned by FindByTransportDocumentReferenceResponse.Validate if the
// designated constraints aren't met.
type FindByTransportDocumentReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByTransportDocumentReferenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByTransportDocumentReferenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByTransportDocumentReferenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByTransportDocumentReferenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByTransportDocumentReferenceResponseValidationError) ErrorName() string {
	return "FindByTransportDocumentReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindByTransportDocumentReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByTransportDocumentReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByTransportDocumentReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByTransportDocumentReferenceResponseValidationError{}

// Validate checks the field values on FindByCarrierBookingReferenceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FindByCarrierBookingReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByCarrierBookingReferenceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindByCarrierBookingReferenceRequestMultiError, or nil if none found.
func (m *FindByCarrierBookingReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByCarrierBookingReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierBookingReference

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FindByCarrierBookingReferenceRequestMultiError(errors)
	}

	return nil
}

// FindByCarrierBookingReferenceRequestMultiError is an error wrapping multiple
// validation errors returned by
// FindByCarrierBookingReferenceRequest.ValidateAll() if the designated
// constraints aren't met.
type FindByCarrierBookingReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByCarrierBookingReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByCarrierBookingReferenceRequestMultiError) AllErrors() []error { return m }

// FindByCarrierBookingReferenceRequestValidationError is the validation error
// returned by FindByCarrierBookingReferenceRequest.Validate if the designated
// constraints aren't met.
type FindByCarrierBookingReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByCarrierBookingReferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByCarrierBookingReferenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByCarrierBookingReferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByCarrierBookingReferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByCarrierBookingReferenceRequestValidationError) ErrorName() string {
	return "FindByCarrierBookingReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindByCarrierBookingReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByCarrierBookingReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByCarrierBookingReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByCarrierBookingReferenceRequestValidationError{}

// Validate checks the field values on FindByCarrierBookingReferenceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FindByCarrierBookingReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByCarrierBookingReferenceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindByCarrierBookingReferenceResponseMultiError, or nil if none found.
func (m *FindByCarrierBookingReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByCarrierBookingReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReference1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindByCarrierBookingReferenceResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindByCarrierBookingReferenceResponseValidationError{
					field:  "Reference1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReference1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindByCarrierBookingReferenceResponseValidationError{
				field:  "Reference1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindByCarrierBookingReferenceResponseMultiError(errors)
	}

	return nil
}

// FindByCarrierBookingReferenceResponseMultiError is an error wrapping
// multiple validation errors returned by
// FindByCarrierBookingReferenceResponse.ValidateAll() if the designated
// constraints aren't met.
type FindByCarrierBookingReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByCarrierBookingReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByCarrierBookingReferenceResponseMultiError) AllErrors() []error { return m }

// FindByCarrierBookingReferenceResponseValidationError is the validation error
// returned by FindByCarrierBookingReferenceResponse.Validate if the
// designated constraints aren't met.
type FindByCarrierBookingReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByCarrierBookingReferenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByCarrierBookingReferenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByCarrierBookingReferenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByCarrierBookingReferenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByCarrierBookingReferenceResponseValidationError) ErrorName() string {
	return "FindByCarrierBookingReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindByCarrierBookingReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByCarrierBookingReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByCarrierBookingReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByCarrierBookingReferenceResponseValidationError{}

// Validate checks the field values on ResolveReferencesForBookingIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ResolveReferencesForBookingIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResolveReferencesForBookingIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ResolveReferencesForBookingIdRequestMultiError, or nil if none found.
func (m *ResolveReferencesForBookingIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResolveReferencesForBookingIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReferenceId

	// no validation rules for BookingId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return ResolveReferencesForBookingIdRequestMultiError(errors)
	}

	return nil
}

// ResolveReferencesForBookingIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// ResolveReferencesForBookingIdRequest.ValidateAll() if the designated
// constraints aren't met.
type ResolveReferencesForBookingIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolveReferencesForBookingIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolveReferencesForBookingIdRequestMultiError) AllErrors() []error { return m }

// ResolveReferencesForBookingIdRequestValidationError is the validation error
// returned by ResolveReferencesForBookingIdRequest.Validate if the designated
// constraints aren't met.
type ResolveReferencesForBookingIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveReferencesForBookingIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolveReferencesForBookingIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolveReferencesForBookingIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolveReferencesForBookingIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolveReferencesForBookingIdRequestValidationError) ErrorName() string {
	return "ResolveReferencesForBookingIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveReferencesForBookingIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveReferencesForBookingIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveReferencesForBookingIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveReferencesForBookingIdRequestValidationError{}

// Validate checks the field values on ResolveReferencesForBookingIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ResolveReferencesForBookingIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResolveReferencesForBookingIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ResolveReferencesForBookingIdResponseMultiError, or nil if none found.
func (m *ResolveReferencesForBookingIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResolveReferencesForBookingIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResolveReferencesForBookingIdResponseMultiError(errors)
	}

	return nil
}

// ResolveReferencesForBookingIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// ResolveReferencesForBookingIdResponse.ValidateAll() if the designated
// constraints aren't met.
type ResolveReferencesForBookingIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolveReferencesForBookingIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolveReferencesForBookingIdResponseMultiError) AllErrors() []error { return m }

// ResolveReferencesForBookingIdResponseValidationError is the validation error
// returned by ResolveReferencesForBookingIdResponse.Validate if the
// designated constraints aren't met.
type ResolveReferencesForBookingIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveReferencesForBookingIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolveReferencesForBookingIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolveReferencesForBookingIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolveReferencesForBookingIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolveReferencesForBookingIdResponseValidationError) ErrorName() string {
	return "ResolveReferencesForBookingIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveReferencesForBookingIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveReferencesForBookingIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveReferencesForBookingIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveReferencesForBookingIdResponseValidationError{}

// Validate checks the field values on
// ResolveReferencesForShippingInstructionReferenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResolveReferencesForShippingInstructionReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ResolveReferencesForShippingInstructionReferenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResolveReferencesForShippingInstructionReferenceRequestMultiError, or nil
// if none found.
func (m *ResolveReferencesForShippingInstructionReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResolveReferencesForShippingInstructionReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReferenceId

	// no validation rules for ShippingInstructionId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return ResolveReferencesForShippingInstructionReferenceRequestMultiError(errors)
	}

	return nil
}

// ResolveReferencesForShippingInstructionReferenceRequestMultiError is an
// error wrapping multiple validation errors returned by
// ResolveReferencesForShippingInstructionReferenceRequest.ValidateAll() if
// the designated constraints aren't met.
type ResolveReferencesForShippingInstructionReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolveReferencesForShippingInstructionReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolveReferencesForShippingInstructionReferenceRequestMultiError) AllErrors() []error {
	return m
}

// ResolveReferencesForShippingInstructionReferenceRequestValidationError is
// the validation error returned by
// ResolveReferencesForShippingInstructionReferenceRequest.Validate if the
// designated constraints aren't met.
type ResolveReferencesForShippingInstructionReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveReferencesForShippingInstructionReferenceRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResolveReferencesForShippingInstructionReferenceRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResolveReferencesForShippingInstructionReferenceRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResolveReferencesForShippingInstructionReferenceRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ResolveReferencesForShippingInstructionReferenceRequestValidationError) ErrorName() string {
	return "ResolveReferencesForShippingInstructionReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveReferencesForShippingInstructionReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveReferencesForShippingInstructionReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveReferencesForShippingInstructionReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveReferencesForShippingInstructionReferenceRequestValidationError{}

// Validate checks the field values on
// ResolveReferencesForShippingInstructionReferenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResolveReferencesForShippingInstructionReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ResolveReferencesForShippingInstructionReferenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResolveReferencesForShippingInstructionReferenceResponseMultiError, or nil
// if none found.
func (m *ResolveReferencesForShippingInstructionReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResolveReferencesForShippingInstructionReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResolveReferencesForShippingInstructionReferenceResponseMultiError(errors)
	}

	return nil
}

// ResolveReferencesForShippingInstructionReferenceResponseMultiError is an
// error wrapping multiple validation errors returned by
// ResolveReferencesForShippingInstructionReferenceResponse.ValidateAll() if
// the designated constraints aren't met.
type ResolveReferencesForShippingInstructionReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolveReferencesForShippingInstructionReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolveReferencesForShippingInstructionReferenceResponseMultiError) AllErrors() []error {
	return m
}

// ResolveReferencesForShippingInstructionReferenceResponseValidationError is
// the validation error returned by
// ResolveReferencesForShippingInstructionReferenceResponse.Validate if the
// designated constraints aren't met.
type ResolveReferencesForShippingInstructionReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveReferencesForShippingInstructionReferenceResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResolveReferencesForShippingInstructionReferenceResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResolveReferencesForShippingInstructionReferenceResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResolveReferencesForShippingInstructionReferenceResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ResolveReferencesForShippingInstructionReferenceResponseValidationError) ErrorName() string {
	return "ResolveReferencesForShippingInstructionReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveReferencesForShippingInstructionReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveReferencesForShippingInstructionReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveReferencesForShippingInstructionReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveReferencesForShippingInstructionReferenceResponseValidationError{}

// Validate checks the field values on ShipmentIds with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShipmentIds) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShipmentIds with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShipmentIdsMultiError, or
// nil if none found.
func (m *ShipmentIds) ValidateAll() error {
	return m.validate(true)
}

func (m *ShipmentIds) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShipmentIdsMultiError(errors)
	}

	return nil
}

// ShipmentIdsMultiError is an error wrapping multiple validation errors
// returned by ShipmentIds.ValidateAll() if the designated constraints aren't met.
type ShipmentIdsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipmentIdsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipmentIdsMultiError) AllErrors() []error { return m }

// ShipmentIdsValidationError is the validation error returned by
// ShipmentIds.Validate if the designated constraints aren't met.
type ShipmentIdsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipmentIdsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipmentIdsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipmentIdsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipmentIdsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipmentIdsValidationError) ErrorName() string { return "ShipmentIdsValidationError" }

// Error satisfies the builtin error interface
func (e ShipmentIdsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipmentIds.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipmentIdsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipmentIdsValidationError{}
