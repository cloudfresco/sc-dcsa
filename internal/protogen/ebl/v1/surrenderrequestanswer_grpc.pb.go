// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ebl/v1/surrenderrequestanswer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SurrenderRequestAnswerService_CreateSurrenderRequestAnswer_FullMethodName = "/ebl.v1.SurrenderRequestAnswerService/CreateSurrenderRequestAnswer"
	SurrenderRequestAnswerService_UpdateSurrenderRequestAnswer_FullMethodName = "/ebl.v1.SurrenderRequestAnswerService/UpdateSurrenderRequestAnswer"
)

// SurrenderRequestAnswerServiceClient is the client API for SurrenderRequestAnswerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The SurrenderRequestAnswerService service definition.
type SurrenderRequestAnswerServiceClient interface {
	CreateSurrenderRequestAnswer(ctx context.Context, in *CreateSurrenderRequestAnswerRequest, opts ...grpc.CallOption) (*CreateSurrenderRequestAnswerResponse, error)
	UpdateSurrenderRequestAnswer(ctx context.Context, in *UpdateSurrenderRequestAnswerRequest, opts ...grpc.CallOption) (*UpdateSurrenderRequestAnswerResponse, error)
}

type surrenderRequestAnswerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurrenderRequestAnswerServiceClient(cc grpc.ClientConnInterface) SurrenderRequestAnswerServiceClient {
	return &surrenderRequestAnswerServiceClient{cc}
}

func (c *surrenderRequestAnswerServiceClient) CreateSurrenderRequestAnswer(ctx context.Context, in *CreateSurrenderRequestAnswerRequest, opts ...grpc.CallOption) (*CreateSurrenderRequestAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSurrenderRequestAnswerResponse)
	err := c.cc.Invoke(ctx, SurrenderRequestAnswerService_CreateSurrenderRequestAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surrenderRequestAnswerServiceClient) UpdateSurrenderRequestAnswer(ctx context.Context, in *UpdateSurrenderRequestAnswerRequest, opts ...grpc.CallOption) (*UpdateSurrenderRequestAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSurrenderRequestAnswerResponse)
	err := c.cc.Invoke(ctx, SurrenderRequestAnswerService_UpdateSurrenderRequestAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurrenderRequestAnswerServiceServer is the server API for SurrenderRequestAnswerService service.
// All implementations must embed UnimplementedSurrenderRequestAnswerServiceServer
// for forward compatibility.
//
// The SurrenderRequestAnswerService service definition.
type SurrenderRequestAnswerServiceServer interface {
	CreateSurrenderRequestAnswer(context.Context, *CreateSurrenderRequestAnswerRequest) (*CreateSurrenderRequestAnswerResponse, error)
	UpdateSurrenderRequestAnswer(context.Context, *UpdateSurrenderRequestAnswerRequest) (*UpdateSurrenderRequestAnswerResponse, error)
	mustEmbedUnimplementedSurrenderRequestAnswerServiceServer()
}

// UnimplementedSurrenderRequestAnswerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSurrenderRequestAnswerServiceServer struct{}

func (UnimplementedSurrenderRequestAnswerServiceServer) CreateSurrenderRequestAnswer(context.Context, *CreateSurrenderRequestAnswerRequest) (*CreateSurrenderRequestAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurrenderRequestAnswer not implemented")
}
func (UnimplementedSurrenderRequestAnswerServiceServer) UpdateSurrenderRequestAnswer(context.Context, *UpdateSurrenderRequestAnswerRequest) (*UpdateSurrenderRequestAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSurrenderRequestAnswer not implemented")
}
func (UnimplementedSurrenderRequestAnswerServiceServer) mustEmbedUnimplementedSurrenderRequestAnswerServiceServer() {
}
func (UnimplementedSurrenderRequestAnswerServiceServer) testEmbeddedByValue() {}

// UnsafeSurrenderRequestAnswerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurrenderRequestAnswerServiceServer will
// result in compilation errors.
type UnsafeSurrenderRequestAnswerServiceServer interface {
	mustEmbedUnimplementedSurrenderRequestAnswerServiceServer()
}

func RegisterSurrenderRequestAnswerServiceServer(s grpc.ServiceRegistrar, srv SurrenderRequestAnswerServiceServer) {
	// If the following call pancis, it indicates UnimplementedSurrenderRequestAnswerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SurrenderRequestAnswerService_ServiceDesc, srv)
}

func _SurrenderRequestAnswerService_CreateSurrenderRequestAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSurrenderRequestAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurrenderRequestAnswerServiceServer).CreateSurrenderRequestAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurrenderRequestAnswerService_CreateSurrenderRequestAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurrenderRequestAnswerServiceServer).CreateSurrenderRequestAnswer(ctx, req.(*CreateSurrenderRequestAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurrenderRequestAnswerService_UpdateSurrenderRequestAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSurrenderRequestAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurrenderRequestAnswerServiceServer).UpdateSurrenderRequestAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurrenderRequestAnswerService_UpdateSurrenderRequestAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurrenderRequestAnswerServiceServer).UpdateSurrenderRequestAnswer(ctx, req.(*UpdateSurrenderRequestAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SurrenderRequestAnswerService_ServiceDesc is the grpc.ServiceDesc for SurrenderRequestAnswerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurrenderRequestAnswerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ebl.v1.SurrenderRequestAnswerService",
	HandlerType: (*SurrenderRequestAnswerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSurrenderRequestAnswer",
			Handler:    _SurrenderRequestAnswerService_CreateSurrenderRequestAnswer_Handler,
		},
		{
			MethodName: "UpdateSurrenderRequestAnswer",
			Handler:    _SurrenderRequestAnswerService_UpdateSurrenderRequestAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ebl/v1/surrenderrequestanswer.proto",
}
