// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: ebl/v1/issuerequest.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateIssuePartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EblPlatformIdentifier  string `protobuf:"bytes,1,opt,name=ebl_platform_identifier,json=eblPlatformIdentifier,proto3" json:"ebl_platform_identifier,omitempty"`
	LegalName              string `protobuf:"bytes,2,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	RegistrationNumber     string `protobuf:"bytes,3,opt,name=registration_number,json=registrationNumber,proto3" json:"registration_number,omitempty"`
	LocationOfRegistration string `protobuf:"bytes,4,opt,name=location_of_registration,json=locationOfRegistration,proto3" json:"location_of_registration,omitempty"`
	TaxReference           string `protobuf:"bytes,5,opt,name=tax_reference,json=taxReference,proto3" json:"tax_reference,omitempty"`
	UserId                 string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string `protobuf:"bytes,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateIssuePartyRequest) Reset() {
	*x = CreateIssuePartyRequest{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIssuePartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssuePartyRequest) ProtoMessage() {}

func (x *CreateIssuePartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssuePartyRequest.ProtoReflect.Descriptor instead.
func (*CreateIssuePartyRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{0}
}

func (x *CreateIssuePartyRequest) GetEblPlatformIdentifier() string {
	if x != nil {
		return x.EblPlatformIdentifier
	}
	return ""
}

func (x *CreateIssuePartyRequest) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *CreateIssuePartyRequest) GetRegistrationNumber() string {
	if x != nil {
		return x.RegistrationNumber
	}
	return ""
}

func (x *CreateIssuePartyRequest) GetLocationOfRegistration() string {
	if x != nil {
		return x.LocationOfRegistration
	}
	return ""
}

func (x *CreateIssuePartyRequest) GetTaxReference() string {
	if x != nil {
		return x.TaxReference
	}
	return ""
}

func (x *CreateIssuePartyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateIssuePartyRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateIssuePartyRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateIssuePartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueParty *IssueParty `protobuf:"bytes,1,opt,name=issue_party,json=issueParty,proto3" json:"issue_party,omitempty"`
}

func (x *CreateIssuePartyResponse) Reset() {
	*x = CreateIssuePartyResponse{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIssuePartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssuePartyResponse) ProtoMessage() {}

func (x *CreateIssuePartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssuePartyResponse.ProtoReflect.Descriptor instead.
func (*CreateIssuePartyResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{1}
}

func (x *CreateIssuePartyResponse) GetIssueParty() *IssueParty {
	if x != nil {
		return x.IssueParty
	}
	return nil
}

type UpdateIssuePartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EblPlatformIdentifier  string `protobuf:"bytes,1,opt,name=ebl_platform_identifier,json=eblPlatformIdentifier,proto3" json:"ebl_platform_identifier,omitempty"`
	LegalName              string `protobuf:"bytes,2,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	RegistrationNumber     string `protobuf:"bytes,3,opt,name=registration_number,json=registrationNumber,proto3" json:"registration_number,omitempty"`
	LocationOfRegistration string `protobuf:"bytes,4,opt,name=location_of_registration,json=locationOfRegistration,proto3" json:"location_of_registration,omitempty"`
	Id                     string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	UserId                 string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string `protobuf:"bytes,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateIssuePartyRequest) Reset() {
	*x = UpdateIssuePartyRequest{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateIssuePartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssuePartyRequest) ProtoMessage() {}

func (x *UpdateIssuePartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssuePartyRequest.ProtoReflect.Descriptor instead.
func (*UpdateIssuePartyRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateIssuePartyRequest) GetEblPlatformIdentifier() string {
	if x != nil {
		return x.EblPlatformIdentifier
	}
	return ""
}

func (x *UpdateIssuePartyRequest) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *UpdateIssuePartyRequest) GetRegistrationNumber() string {
	if x != nil {
		return x.RegistrationNumber
	}
	return ""
}

func (x *UpdateIssuePartyRequest) GetLocationOfRegistration() string {
	if x != nil {
		return x.LocationOfRegistration
	}
	return ""
}

func (x *UpdateIssuePartyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateIssuePartyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateIssuePartyRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateIssuePartyRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateIssuePartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateIssuePartyResponse) Reset() {
	*x = UpdateIssuePartyResponse{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateIssuePartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssuePartyResponse) ProtoMessage() {}

func (x *UpdateIssuePartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssuePartyResponse.ProtoReflect.Descriptor instead.
func (*UpdateIssuePartyResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{3}
}

type IssueParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuePartyD *IssuePartyD  `protobuf:"bytes,1,opt,name=issue_party_d,json=issuePartyD,proto3" json:"issue_party_d,omitempty"`
	CrUpdUser   *v1.CrUpdUser `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime   *v1.CrUpdTime `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *IssueParty) Reset() {
	*x = IssueParty{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueParty) ProtoMessage() {}

func (x *IssueParty) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueParty.ProtoReflect.Descriptor instead.
func (*IssueParty) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{4}
}

func (x *IssueParty) GetIssuePartyD() *IssuePartyD {
	if x != nil {
		return x.IssuePartyD
	}
	return nil
}

func (x *IssueParty) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *IssueParty) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type IssuePartyD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                  []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                    string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	EblPlatformIdentifier  string `protobuf:"bytes,4,opt,name=ebl_platform_identifier,json=eblPlatformIdentifier,proto3" json:"ebl_platform_identifier,omitempty"`
	LegalName              string `protobuf:"bytes,5,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	RegistrationNumber     string `protobuf:"bytes,6,opt,name=registration_number,json=registrationNumber,proto3" json:"registration_number,omitempty"`
	LocationOfRegistration string `protobuf:"bytes,7,opt,name=location_of_registration,json=locationOfRegistration,proto3" json:"location_of_registration,omitempty"`
	TaxReference           string `protobuf:"bytes,8,opt,name=tax_reference,json=taxReference,proto3" json:"tax_reference,omitempty"`
}

func (x *IssuePartyD) Reset() {
	*x = IssuePartyD{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssuePartyD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuePartyD) ProtoMessage() {}

func (x *IssuePartyD) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuePartyD.ProtoReflect.Descriptor instead.
func (*IssuePartyD) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{5}
}

func (x *IssuePartyD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IssuePartyD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *IssuePartyD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *IssuePartyD) GetEblPlatformIdentifier() string {
	if x != nil {
		return x.EblPlatformIdentifier
	}
	return ""
}

func (x *IssuePartyD) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *IssuePartyD) GetRegistrationNumber() string {
	if x != nil {
		return x.RegistrationNumber
	}
	return ""
}

func (x *IssuePartyD) GetLocationOfRegistration() string {
	if x != nil {
		return x.LocationOfRegistration
	}
	return ""
}

func (x *IssuePartyD) GetTaxReference() string {
	if x != nil {
		return x.TaxReference
	}
	return ""
}

type GetIssuePartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetIssuePartyRequest) Reset() {
	*x = GetIssuePartyRequest{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIssuePartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuePartyRequest) ProtoMessage() {}

func (x *GetIssuePartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuePartyRequest.ProtoReflect.Descriptor instead.
func (*GetIssuePartyRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{6}
}

func (x *GetIssuePartyRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetIssuePartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueParty *IssueParty `protobuf:"bytes,1,opt,name=issue_party,json=issueParty,proto3" json:"issue_party,omitempty"`
}

func (x *GetIssuePartyResponse) Reset() {
	*x = GetIssuePartyResponse{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIssuePartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuePartyResponse) ProtoMessage() {}

func (x *GetIssuePartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuePartyResponse.ProtoReflect.Descriptor instead.
func (*GetIssuePartyResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{7}
}

func (x *GetIssuePartyResponse) GetIssueParty() *IssueParty {
	if x != nil {
		return x.IssueParty
	}
	return nil
}

type GetIssuePartiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetIssuePartiesRequest) Reset() {
	*x = GetIssuePartiesRequest{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIssuePartiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuePartiesRequest) ProtoMessage() {}

func (x *GetIssuePartiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuePartiesRequest.ProtoReflect.Descriptor instead.
func (*GetIssuePartiesRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{8}
}

func (x *GetIssuePartiesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetIssuePartiesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetIssuePartiesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetIssuePartiesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetIssuePartiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueParties []*IssueParty `protobuf:"bytes,1,rep,name=issue_parties,json=issueParties,proto3" json:"issue_parties,omitempty"`
	NextCursor   string        `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetIssuePartiesResponse) Reset() {
	*x = GetIssuePartiesResponse{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIssuePartiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuePartiesResponse) ProtoMessage() {}

func (x *GetIssuePartiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuePartiesResponse.ProtoReflect.Descriptor instead.
func (*GetIssuePartiesResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{9}
}

func (x *GetIssuePartiesResponse) GetIssueParties() []*IssueParty {
	if x != nil {
		return x.IssueParties
	}
	return nil
}

func (x *GetIssuePartiesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetIssuePartyByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetIssuePartyByPkRequest) Reset() {
	*x = GetIssuePartyByPkRequest{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIssuePartyByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuePartyByPkRequest) ProtoMessage() {}

func (x *GetIssuePartyByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuePartyByPkRequest.ProtoReflect.Descriptor instead.
func (*GetIssuePartyByPkRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{10}
}

func (x *GetIssuePartyByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetIssuePartyByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueParty *IssueParty `protobuf:"bytes,1,opt,name=issue_party,json=issueParty,proto3" json:"issue_party,omitempty"`
}

func (x *GetIssuePartyByPkResponse) Reset() {
	*x = GetIssuePartyByPkResponse{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIssuePartyByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuePartyByPkResponse) ProtoMessage() {}

func (x *GetIssuePartyByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuePartyByPkResponse.ProtoReflect.Descriptor instead.
func (*GetIssuePartyByPkResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{11}
}

func (x *GetIssuePartyByPkResponse) GetIssueParty() *IssueParty {
	if x != nil {
		return x.IssueParty
	}
	return nil
}

type CreateIssuePartySupportingCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuePartyId          uint32 `protobuf:"varint,1,opt,name=issue_party_id,json=issuePartyId,proto3" json:"issue_party_id,omitempty"`
	PartyCode             string `protobuf:"bytes,2,opt,name=party_code,json=partyCode,proto3" json:"party_code,omitempty"`
	PartyCodeListProvider string `protobuf:"bytes,3,opt,name=party_code_list_provider,json=partyCodeListProvider,proto3" json:"party_code_list_provider,omitempty"`
	UserId                string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail             string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId             string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateIssuePartySupportingCodeRequest) Reset() {
	*x = CreateIssuePartySupportingCodeRequest{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIssuePartySupportingCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssuePartySupportingCodeRequest) ProtoMessage() {}

func (x *CreateIssuePartySupportingCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssuePartySupportingCodeRequest.ProtoReflect.Descriptor instead.
func (*CreateIssuePartySupportingCodeRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{12}
}

func (x *CreateIssuePartySupportingCodeRequest) GetIssuePartyId() uint32 {
	if x != nil {
		return x.IssuePartyId
	}
	return 0
}

func (x *CreateIssuePartySupportingCodeRequest) GetPartyCode() string {
	if x != nil {
		return x.PartyCode
	}
	return ""
}

func (x *CreateIssuePartySupportingCodeRequest) GetPartyCodeListProvider() string {
	if x != nil {
		return x.PartyCodeListProvider
	}
	return ""
}

func (x *CreateIssuePartySupportingCodeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateIssuePartySupportingCodeRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateIssuePartySupportingCodeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateIssuePartySupportingCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuePartySupportingCode *IssuePartySupportingCode `protobuf:"bytes,1,opt,name=issue_party_supporting_code,json=issuePartySupportingCode,proto3" json:"issue_party_supporting_code,omitempty"`
}

func (x *CreateIssuePartySupportingCodeResponse) Reset() {
	*x = CreateIssuePartySupportingCodeResponse{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIssuePartySupportingCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssuePartySupportingCodeResponse) ProtoMessage() {}

func (x *CreateIssuePartySupportingCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssuePartySupportingCodeResponse.ProtoReflect.Descriptor instead.
func (*CreateIssuePartySupportingCodeResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{13}
}

func (x *CreateIssuePartySupportingCodeResponse) GetIssuePartySupportingCode() *IssuePartySupportingCode {
	if x != nil {
		return x.IssuePartySupportingCode
	}
	return nil
}

type UpdateIssuePartySupportingCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuePartyId          uint32 `protobuf:"varint,1,opt,name=issue_party_id,json=issuePartyId,proto3" json:"issue_party_id,omitempty"`
	PartyCode             string `protobuf:"bytes,2,opt,name=party_code,json=partyCode,proto3" json:"party_code,omitempty"`
	PartyCodeListProvider string `protobuf:"bytes,3,opt,name=party_code_list_provider,json=partyCodeListProvider,proto3" json:"party_code_list_provider,omitempty"`
	Id                    string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	UserId                string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail             string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId             string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateIssuePartySupportingCodeRequest) Reset() {
	*x = UpdateIssuePartySupportingCodeRequest{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateIssuePartySupportingCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssuePartySupportingCodeRequest) ProtoMessage() {}

func (x *UpdateIssuePartySupportingCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssuePartySupportingCodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateIssuePartySupportingCodeRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateIssuePartySupportingCodeRequest) GetIssuePartyId() uint32 {
	if x != nil {
		return x.IssuePartyId
	}
	return 0
}

func (x *UpdateIssuePartySupportingCodeRequest) GetPartyCode() string {
	if x != nil {
		return x.PartyCode
	}
	return ""
}

func (x *UpdateIssuePartySupportingCodeRequest) GetPartyCodeListProvider() string {
	if x != nil {
		return x.PartyCodeListProvider
	}
	return ""
}

func (x *UpdateIssuePartySupportingCodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateIssuePartySupportingCodeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateIssuePartySupportingCodeRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateIssuePartySupportingCodeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateIssuePartySupportingCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateIssuePartySupportingCodeResponse) Reset() {
	*x = UpdateIssuePartySupportingCodeResponse{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateIssuePartySupportingCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssuePartySupportingCodeResponse) ProtoMessage() {}

func (x *UpdateIssuePartySupportingCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssuePartySupportingCodeResponse.ProtoReflect.Descriptor instead.
func (*UpdateIssuePartySupportingCodeResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{15}
}

type IssuePartySupportingCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuePartySupportingCodeD *IssuePartySupportingCodeD `protobuf:"bytes,1,opt,name=issue_party_supporting_code_d,json=issuePartySupportingCodeD,proto3" json:"issue_party_supporting_code_d,omitempty"`
	CrUpdUser                 *v1.CrUpdUser              `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                 *v1.CrUpdTime              `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *IssuePartySupportingCode) Reset() {
	*x = IssuePartySupportingCode{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssuePartySupportingCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuePartySupportingCode) ProtoMessage() {}

func (x *IssuePartySupportingCode) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuePartySupportingCode.ProtoReflect.Descriptor instead.
func (*IssuePartySupportingCode) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{16}
}

func (x *IssuePartySupportingCode) GetIssuePartySupportingCodeD() *IssuePartySupportingCodeD {
	if x != nil {
		return x.IssuePartySupportingCodeD
	}
	return nil
}

func (x *IssuePartySupportingCode) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *IssuePartySupportingCode) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type IssuePartySupportingCodeD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                 []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                   string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	IssuePartyId          uint32 `protobuf:"varint,4,opt,name=issue_party_id,json=issuePartyId,proto3" json:"issue_party_id,omitempty"`
	PartyCode             string `protobuf:"bytes,5,opt,name=party_code,json=partyCode,proto3" json:"party_code,omitempty"`
	PartyCodeListProvider string `protobuf:"bytes,6,opt,name=party_code_list_provider,json=partyCodeListProvider,proto3" json:"party_code_list_provider,omitempty"`
}

func (x *IssuePartySupportingCodeD) Reset() {
	*x = IssuePartySupportingCodeD{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssuePartySupportingCodeD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuePartySupportingCodeD) ProtoMessage() {}

func (x *IssuePartySupportingCodeD) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuePartySupportingCodeD.ProtoReflect.Descriptor instead.
func (*IssuePartySupportingCodeD) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{17}
}

func (x *IssuePartySupportingCodeD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IssuePartySupportingCodeD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *IssuePartySupportingCodeD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *IssuePartySupportingCodeD) GetIssuePartyId() uint32 {
	if x != nil {
		return x.IssuePartyId
	}
	return 0
}

func (x *IssuePartySupportingCodeD) GetPartyCode() string {
	if x != nil {
		return x.PartyCode
	}
	return ""
}

func (x *IssuePartySupportingCodeD) GetPartyCodeListProvider() string {
	if x != nil {
		return x.PartyCodeListProvider
	}
	return ""
}

type CreateEblVisualizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Content   string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	UserId    string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateEblVisualizationRequest) Reset() {
	*x = CreateEblVisualizationRequest{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEblVisualizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEblVisualizationRequest) ProtoMessage() {}

func (x *CreateEblVisualizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEblVisualizationRequest.ProtoReflect.Descriptor instead.
func (*CreateEblVisualizationRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{18}
}

func (x *CreateEblVisualizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateEblVisualizationRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateEblVisualizationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateEblVisualizationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateEblVisualizationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateEblVisualizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EblVisualization *EblVisualization `protobuf:"bytes,1,opt,name=ebl_visualization,json=eblVisualization,proto3" json:"ebl_visualization,omitempty"`
}

func (x *CreateEblVisualizationResponse) Reset() {
	*x = CreateEblVisualizationResponse{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEblVisualizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEblVisualizationResponse) ProtoMessage() {}

func (x *CreateEblVisualizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEblVisualizationResponse.ProtoReflect.Descriptor instead.
func (*CreateEblVisualizationResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{19}
}

func (x *CreateEblVisualizationResponse) GetEblVisualization() *EblVisualization {
	if x != nil {
		return x.EblVisualization
	}
	return nil
}

type UpdateEblVisualizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Content   string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Id        string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	UserId    string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateEblVisualizationRequest) Reset() {
	*x = UpdateEblVisualizationRequest{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEblVisualizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEblVisualizationRequest) ProtoMessage() {}

func (x *UpdateEblVisualizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEblVisualizationRequest.ProtoReflect.Descriptor instead.
func (*UpdateEblVisualizationRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateEblVisualizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateEblVisualizationRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateEblVisualizationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateEblVisualizationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateEblVisualizationRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateEblVisualizationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateEblVisualizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateEblVisualizationResponse) Reset() {
	*x = UpdateEblVisualizationResponse{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEblVisualizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEblVisualizationResponse) ProtoMessage() {}

func (x *UpdateEblVisualizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEblVisualizationResponse.ProtoReflect.Descriptor instead.
func (*UpdateEblVisualizationResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{21}
}

type EblVisualization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EblVisualizationD *EblVisualizationD `protobuf:"bytes,1,opt,name=ebl_visualization_d,json=eblVisualizationD,proto3" json:"ebl_visualization_d,omitempty"`
	CrUpdUser         *v1.CrUpdUser      `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime         *v1.CrUpdTime      `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *EblVisualization) Reset() {
	*x = EblVisualization{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EblVisualization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EblVisualization) ProtoMessage() {}

func (x *EblVisualization) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EblVisualization.ProtoReflect.Descriptor instead.
func (*EblVisualization) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{22}
}

func (x *EblVisualization) GetEblVisualizationD() *EblVisualizationD {
	if x != nil {
		return x.EblVisualizationD
	}
	return nil
}

func (x *EblVisualization) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *EblVisualization) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type EblVisualizationD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4   []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS     string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	Name    string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *EblVisualizationD) Reset() {
	*x = EblVisualizationD{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EblVisualizationD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EblVisualizationD) ProtoMessage() {}

func (x *EblVisualizationD) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EblVisualizationD.ProtoReflect.Descriptor instead.
func (*EblVisualizationD) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{23}
}

func (x *EblVisualizationD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EblVisualizationD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *EblVisualizationD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *EblVisualizationD) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EblVisualizationD) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CreateIssuanceRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentReference string `protobuf:"bytes,1,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	IssuanceRequestState       string `protobuf:"bytes,2,opt,name=issuance_request_state,json=issuanceRequestState,proto3" json:"issuance_request_state,omitempty"`
	IssueTo                    uint32 `protobuf:"varint,3,opt,name=issue_to,json=issueTo,proto3" json:"issue_to,omitempty"`
	EblVisualizationId         uint32 `protobuf:"varint,4,opt,name=ebl_visualization_id,json=eblVisualizationId,proto3" json:"ebl_visualization_id,omitempty"`
	TransportDocumentJson      string `protobuf:"bytes,5,opt,name=transport_document_json,json=transportDocumentJson,proto3" json:"transport_document_json,omitempty"`
	UserId                     string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                  string `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                  string `protobuf:"bytes,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateIssuanceRequestRequest) Reset() {
	*x = CreateIssuanceRequestRequest{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIssuanceRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssuanceRequestRequest) ProtoMessage() {}

func (x *CreateIssuanceRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssuanceRequestRequest.ProtoReflect.Descriptor instead.
func (*CreateIssuanceRequestRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{24}
}

func (x *CreateIssuanceRequestRequest) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *CreateIssuanceRequestRequest) GetIssuanceRequestState() string {
	if x != nil {
		return x.IssuanceRequestState
	}
	return ""
}

func (x *CreateIssuanceRequestRequest) GetIssueTo() uint32 {
	if x != nil {
		return x.IssueTo
	}
	return 0
}

func (x *CreateIssuanceRequestRequest) GetEblVisualizationId() uint32 {
	if x != nil {
		return x.EblVisualizationId
	}
	return 0
}

func (x *CreateIssuanceRequestRequest) GetTransportDocumentJson() string {
	if x != nil {
		return x.TransportDocumentJson
	}
	return ""
}

func (x *CreateIssuanceRequestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateIssuanceRequestRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateIssuanceRequestRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateIssuanceRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuanceRequest *IssuanceRequest `protobuf:"bytes,1,opt,name=issuance_request,json=issuanceRequest,proto3" json:"issuance_request,omitempty"`
}

func (x *CreateIssuanceRequestResponse) Reset() {
	*x = CreateIssuanceRequestResponse{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIssuanceRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssuanceRequestResponse) ProtoMessage() {}

func (x *CreateIssuanceRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssuanceRequestResponse.ProtoReflect.Descriptor instead.
func (*CreateIssuanceRequestResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{25}
}

func (x *CreateIssuanceRequestResponse) GetIssuanceRequest() *IssuanceRequest {
	if x != nil {
		return x.IssuanceRequest
	}
	return nil
}

type UpdateIssuanceRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentReference string `protobuf:"bytes,1,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	IssuanceRequestState       string `protobuf:"bytes,2,opt,name=issuance_request_state,json=issuanceRequestState,proto3" json:"issuance_request_state,omitempty"`
	Id                         string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	UserId                     string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                  string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                  string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateIssuanceRequestRequest) Reset() {
	*x = UpdateIssuanceRequestRequest{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateIssuanceRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssuanceRequestRequest) ProtoMessage() {}

func (x *UpdateIssuanceRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssuanceRequestRequest.ProtoReflect.Descriptor instead.
func (*UpdateIssuanceRequestRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateIssuanceRequestRequest) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *UpdateIssuanceRequestRequest) GetIssuanceRequestState() string {
	if x != nil {
		return x.IssuanceRequestState
	}
	return ""
}

func (x *UpdateIssuanceRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateIssuanceRequestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateIssuanceRequestRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateIssuanceRequestRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateIssuanceRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateIssuanceRequestResponse) Reset() {
	*x = UpdateIssuanceRequestResponse{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateIssuanceRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssuanceRequestResponse) ProtoMessage() {}

func (x *UpdateIssuanceRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssuanceRequestResponse.ProtoReflect.Descriptor instead.
func (*UpdateIssuanceRequestResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{27}
}

type IssuanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuanceRequestD *IssuanceRequestD `protobuf:"bytes,1,opt,name=issuance_request_d,json=issuanceRequestD,proto3" json:"issuance_request_d,omitempty"`
	CrUpdUser        *v1.CrUpdUser     `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime        *v1.CrUpdTime     `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *IssuanceRequest) Reset() {
	*x = IssuanceRequest{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssuanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuanceRequest) ProtoMessage() {}

func (x *IssuanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuanceRequest.ProtoReflect.Descriptor instead.
func (*IssuanceRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{28}
}

func (x *IssuanceRequest) GetIssuanceRequestD() *IssuanceRequestD {
	if x != nil {
		return x.IssuanceRequestD
	}
	return nil
}

func (x *IssuanceRequest) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *IssuanceRequest) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type IssuanceRequestD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                      []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                        string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	TransportDocumentReference string `protobuf:"bytes,4,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	IssuanceRequestState       string `protobuf:"bytes,5,opt,name=issuance_request_state,json=issuanceRequestState,proto3" json:"issuance_request_state,omitempty"`
	IssueTo                    uint32 `protobuf:"varint,6,opt,name=issue_to,json=issueTo,proto3" json:"issue_to,omitempty"`
	EblVisualizationId         uint32 `protobuf:"varint,7,opt,name=ebl_visualization_id,json=eblVisualizationId,proto3" json:"ebl_visualization_id,omitempty"`
	TransportDocumentJson      string `protobuf:"bytes,8,opt,name=transport_document_json,json=transportDocumentJson,proto3" json:"transport_document_json,omitempty"`
}

func (x *IssuanceRequestD) Reset() {
	*x = IssuanceRequestD{}
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssuanceRequestD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuanceRequestD) ProtoMessage() {}

func (x *IssuanceRequestD) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequest_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuanceRequestD.ProtoReflect.Descriptor instead.
func (*IssuanceRequestD) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequest_proto_rawDescGZIP(), []int{29}
}

func (x *IssuanceRequestD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IssuanceRequestD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *IssuanceRequestD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *IssuanceRequestD) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *IssuanceRequestD) GetIssuanceRequestState() string {
	if x != nil {
		return x.IssuanceRequestState
	}
	return ""
}

func (x *IssuanceRequestD) GetIssueTo() uint32 {
	if x != nil {
		return x.IssueTo
	}
	return 0
}

func (x *IssuanceRequestD) GetEblVisualizationId() uint32 {
	if x != nil {
		return x.EblVisualizationId
	}
	return 0
}

func (x *IssuanceRequestD) GetTransportDocumentJson() string {
	if x != nil {
		return x.TransportDocumentJson
	}
	return ""
}

var File_ebl_v1_issuerequest_proto protoreflect.FileDescriptor

var file_ebl_v1_issuerequest_proto_rawDesc = []byte{
	0x0a, 0x19, 0x65, 0x62, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x62, 0x6c,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x03, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x17, 0x65, 0x62, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x48, 0x0f, 0x72, 0x0d, 0x18, 0x64, 0x32, 0x09,
	0x5e, 0x5c, 0x53, 0x2b, 0x40, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x15, 0x65, 0x62, 0x6c, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x14, 0x72, 0x12, 0x18, 0x64, 0x32, 0x0e, 0x5e,
	0x5c, 0x53, 0x2b, 0x28, 0x5c, 0x73, 0x2b, 0x5c, 0x53, 0x2b, 0x29, 0x2a, 0x24, 0x52, 0x09, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x14, 0x72, 0x12, 0x18, 0x64, 0x32, 0x0e,
	0x5e, 0x5c, 0x53, 0x2b, 0x28, 0x5c, 0x73, 0x2b, 0x5c, 0x53, 0x2b, 0x29, 0x2a, 0x24, 0x52, 0x12,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x4d, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x66, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0x48, 0x10, 0x72, 0x0e, 0x18, 0x02, 0x32, 0x0a, 0x5e,
	0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x32, 0x7d, 0x24, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x0d, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x72, 0x09, 0x18,
	0x64, 0x32, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52, 0x0c, 0x74, 0x61, 0x78, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x4f, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0xc2,
	0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x62,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x62, 0x6c,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x66, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb1, 0x01, 0x0a, 0x0a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x37,
	0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x44, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x0b, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x36, 0x0a, 0x17,
	0x65, 0x62, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65,
	0x62, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x66, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x78, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x4e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x73, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x60, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x62, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0a,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0x9d, 0x02, 0x0a, 0x25, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0xba, 0x48, 0x13, 0x72, 0x11, 0x18, 0x64, 0x32, 0x0d, 0x5e, 0x5c, 0x53, 0x2b, 0x28, 0x5c, 0x73,
	0x2b, 0x5c, 0x53, 0x2b, 0x29, 0x2a, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x40, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x15, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x26, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x1b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x62, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x18, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xba, 0x48, 0x13, 0x72,
	0x11, 0x18, 0x64, 0x32, 0x0d, 0x5e, 0x5c, 0x53, 0x2b, 0x28, 0x5c, 0x73, 0x2b, 0x5c, 0x53, 0x2b,
	0x29, 0x2a, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a,
	0x18, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xeb, 0x01, 0x0a, 0x18, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a,
	0x1d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x52, 0x19, 0x69, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63,
	0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd2,
	0x01, 0x0a, 0x19, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x22, 0xa4, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x62,
	0x6c, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x1e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x62, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x11,
	0x65, 0x62, 0x6c, 0x5f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x62, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x65, 0x62, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x62,
	0x6c, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x62, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x01, 0x0a,
	0x10, 0x45, 0x62, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x13, 0x65, 0x62, 0x6c, 0x5f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x62, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x52, 0x11, 0x65, 0x62, 0x6c, 0x56, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x34, 0x0a, 0x0b,
	0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63,
	0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x11, 0x45, 0x62, 0x6c, 0x56,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0xf2, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x73, 0x75, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x62, 0x6c, 0x5f,
	0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x62, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x73,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x1d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x69, 0x73,
	0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x69,
	0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfd,
	0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x1f,
	0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xc5, 0x01, 0x0a, 0x0f, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x12, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x52, 0x10, 0x69, 0x73, 0x73, 0x75, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55,
	0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x10, 0x49, 0x73, 0x73, 0x75,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x73, 0x75, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x62, 0x6c, 0x5f,
	0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x62, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x73,
	0x6f, 0x6e, 0x32, 0xdf, 0x08, 0x0a, 0x13, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1f,
	0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x55, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1f, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x65, 0x62,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x62,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1c, 0x2e,
	0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x62,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x50, 0x6b, 0x12,
	0x20, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x62,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x62, 0x6c, 0x56,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x65,
	0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x62, 0x6c, 0x56,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x62, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x62, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x62, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65,
	0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x62, 0x6c, 0x56,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73,
	0x63, 0x2d, 0x64, 0x63, 0x73, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x65, 0x62, 0x6c, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ebl_v1_issuerequest_proto_rawDescOnce sync.Once
	file_ebl_v1_issuerequest_proto_rawDescData = file_ebl_v1_issuerequest_proto_rawDesc
)

func file_ebl_v1_issuerequest_proto_rawDescGZIP() []byte {
	file_ebl_v1_issuerequest_proto_rawDescOnce.Do(func() {
		file_ebl_v1_issuerequest_proto_rawDescData = protoimpl.X.CompressGZIP(file_ebl_v1_issuerequest_proto_rawDescData)
	})
	return file_ebl_v1_issuerequest_proto_rawDescData
}

var file_ebl_v1_issuerequest_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_ebl_v1_issuerequest_proto_goTypes = []any{
	(*CreateIssuePartyRequest)(nil),                // 0: ebl.v1.CreateIssuePartyRequest
	(*CreateIssuePartyResponse)(nil),               // 1: ebl.v1.CreateIssuePartyResponse
	(*UpdateIssuePartyRequest)(nil),                // 2: ebl.v1.UpdateIssuePartyRequest
	(*UpdateIssuePartyResponse)(nil),               // 3: ebl.v1.UpdateIssuePartyResponse
	(*IssueParty)(nil),                             // 4: ebl.v1.IssueParty
	(*IssuePartyD)(nil),                            // 5: ebl.v1.IssuePartyD
	(*GetIssuePartyRequest)(nil),                   // 6: ebl.v1.GetIssuePartyRequest
	(*GetIssuePartyResponse)(nil),                  // 7: ebl.v1.GetIssuePartyResponse
	(*GetIssuePartiesRequest)(nil),                 // 8: ebl.v1.GetIssuePartiesRequest
	(*GetIssuePartiesResponse)(nil),                // 9: ebl.v1.GetIssuePartiesResponse
	(*GetIssuePartyByPkRequest)(nil),               // 10: ebl.v1.GetIssuePartyByPkRequest
	(*GetIssuePartyByPkResponse)(nil),              // 11: ebl.v1.GetIssuePartyByPkResponse
	(*CreateIssuePartySupportingCodeRequest)(nil),  // 12: ebl.v1.CreateIssuePartySupportingCodeRequest
	(*CreateIssuePartySupportingCodeResponse)(nil), // 13: ebl.v1.CreateIssuePartySupportingCodeResponse
	(*UpdateIssuePartySupportingCodeRequest)(nil),  // 14: ebl.v1.UpdateIssuePartySupportingCodeRequest
	(*UpdateIssuePartySupportingCodeResponse)(nil), // 15: ebl.v1.UpdateIssuePartySupportingCodeResponse
	(*IssuePartySupportingCode)(nil),               // 16: ebl.v1.IssuePartySupportingCode
	(*IssuePartySupportingCodeD)(nil),              // 17: ebl.v1.IssuePartySupportingCodeD
	(*CreateEblVisualizationRequest)(nil),          // 18: ebl.v1.CreateEblVisualizationRequest
	(*CreateEblVisualizationResponse)(nil),         // 19: ebl.v1.CreateEblVisualizationResponse
	(*UpdateEblVisualizationRequest)(nil),          // 20: ebl.v1.UpdateEblVisualizationRequest
	(*UpdateEblVisualizationResponse)(nil),         // 21: ebl.v1.UpdateEblVisualizationResponse
	(*EblVisualization)(nil),                       // 22: ebl.v1.EblVisualization
	(*EblVisualizationD)(nil),                      // 23: ebl.v1.EblVisualizationD
	(*CreateIssuanceRequestRequest)(nil),           // 24: ebl.v1.CreateIssuanceRequestRequest
	(*CreateIssuanceRequestResponse)(nil),          // 25: ebl.v1.CreateIssuanceRequestResponse
	(*UpdateIssuanceRequestRequest)(nil),           // 26: ebl.v1.UpdateIssuanceRequestRequest
	(*UpdateIssuanceRequestResponse)(nil),          // 27: ebl.v1.UpdateIssuanceRequestResponse
	(*IssuanceRequest)(nil),                        // 28: ebl.v1.IssuanceRequest
	(*IssuanceRequestD)(nil),                       // 29: ebl.v1.IssuanceRequestD
	(*v1.CrUpdUser)(nil),                           // 30: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                           // 31: common.v1.CrUpdTime
	(*v1.GetRequest)(nil),                          // 32: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),                      // 33: common.v1.GetByIdRequest
}
var file_ebl_v1_issuerequest_proto_depIdxs = []int32{
	4,  // 0: ebl.v1.CreateIssuePartyResponse.issue_party:type_name -> ebl.v1.IssueParty
	5,  // 1: ebl.v1.IssueParty.issue_party_d:type_name -> ebl.v1.IssuePartyD
	30, // 2: ebl.v1.IssueParty.cr_upd_user:type_name -> common.v1.CrUpdUser
	31, // 3: ebl.v1.IssueParty.cr_upd_time:type_name -> common.v1.CrUpdTime
	32, // 4: ebl.v1.GetIssuePartyRequest.get_request:type_name -> common.v1.GetRequest
	4,  // 5: ebl.v1.GetIssuePartyResponse.issue_party:type_name -> ebl.v1.IssueParty
	4,  // 6: ebl.v1.GetIssuePartiesResponse.issue_parties:type_name -> ebl.v1.IssueParty
	33, // 7: ebl.v1.GetIssuePartyByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	4,  // 8: ebl.v1.GetIssuePartyByPkResponse.issue_party:type_name -> ebl.v1.IssueParty
	16, // 9: ebl.v1.CreateIssuePartySupportingCodeResponse.issue_party_supporting_code:type_name -> ebl.v1.IssuePartySupportingCode
	17, // 10: ebl.v1.IssuePartySupportingCode.issue_party_supporting_code_d:type_name -> ebl.v1.IssuePartySupportingCodeD
	30, // 11: ebl.v1.IssuePartySupportingCode.cr_upd_user:type_name -> common.v1.CrUpdUser
	31, // 12: ebl.v1.IssuePartySupportingCode.cr_upd_time:type_name -> common.v1.CrUpdTime
	22, // 13: ebl.v1.CreateEblVisualizationResponse.ebl_visualization:type_name -> ebl.v1.EblVisualization
	23, // 14: ebl.v1.EblVisualization.ebl_visualization_d:type_name -> ebl.v1.EblVisualizationD
	30, // 15: ebl.v1.EblVisualization.cr_upd_user:type_name -> common.v1.CrUpdUser
	31, // 16: ebl.v1.EblVisualization.cr_upd_time:type_name -> common.v1.CrUpdTime
	28, // 17: ebl.v1.CreateIssuanceRequestResponse.issuance_request:type_name -> ebl.v1.IssuanceRequest
	29, // 18: ebl.v1.IssuanceRequest.issuance_request_d:type_name -> ebl.v1.IssuanceRequestD
	30, // 19: ebl.v1.IssuanceRequest.cr_upd_user:type_name -> common.v1.CrUpdUser
	31, // 20: ebl.v1.IssuanceRequest.cr_upd_time:type_name -> common.v1.CrUpdTime
	0,  // 21: ebl.v1.IssueRequestService.CreateIssueParty:input_type -> ebl.v1.CreateIssuePartyRequest
	2,  // 22: ebl.v1.IssueRequestService.UpdateIssueParty:input_type -> ebl.v1.UpdateIssuePartyRequest
	8,  // 23: ebl.v1.IssueRequestService.GetIssueParties:input_type -> ebl.v1.GetIssuePartiesRequest
	6,  // 24: ebl.v1.IssueRequestService.GetIssueParty:input_type -> ebl.v1.GetIssuePartyRequest
	10, // 25: ebl.v1.IssueRequestService.GetIssuePartyByPk:input_type -> ebl.v1.GetIssuePartyByPkRequest
	12, // 26: ebl.v1.IssueRequestService.CreateIssuePartySupportingCode:input_type -> ebl.v1.CreateIssuePartySupportingCodeRequest
	14, // 27: ebl.v1.IssueRequestService.UpdateIssuePartySupportingCode:input_type -> ebl.v1.UpdateIssuePartySupportingCodeRequest
	24, // 28: ebl.v1.IssueRequestService.CreateIssuanceRequest:input_type -> ebl.v1.CreateIssuanceRequestRequest
	26, // 29: ebl.v1.IssueRequestService.UpdateIssuanceRequest:input_type -> ebl.v1.UpdateIssuanceRequestRequest
	18, // 30: ebl.v1.IssueRequestService.CreateEblVisualization:input_type -> ebl.v1.CreateEblVisualizationRequest
	20, // 31: ebl.v1.IssueRequestService.UpdateEblVisualization:input_type -> ebl.v1.UpdateEblVisualizationRequest
	1,  // 32: ebl.v1.IssueRequestService.CreateIssueParty:output_type -> ebl.v1.CreateIssuePartyResponse
	3,  // 33: ebl.v1.IssueRequestService.UpdateIssueParty:output_type -> ebl.v1.UpdateIssuePartyResponse
	9,  // 34: ebl.v1.IssueRequestService.GetIssueParties:output_type -> ebl.v1.GetIssuePartiesResponse
	7,  // 35: ebl.v1.IssueRequestService.GetIssueParty:output_type -> ebl.v1.GetIssuePartyResponse
	11, // 36: ebl.v1.IssueRequestService.GetIssuePartyByPk:output_type -> ebl.v1.GetIssuePartyByPkResponse
	13, // 37: ebl.v1.IssueRequestService.CreateIssuePartySupportingCode:output_type -> ebl.v1.CreateIssuePartySupportingCodeResponse
	15, // 38: ebl.v1.IssueRequestService.UpdateIssuePartySupportingCode:output_type -> ebl.v1.UpdateIssuePartySupportingCodeResponse
	25, // 39: ebl.v1.IssueRequestService.CreateIssuanceRequest:output_type -> ebl.v1.CreateIssuanceRequestResponse
	27, // 40: ebl.v1.IssueRequestService.UpdateIssuanceRequest:output_type -> ebl.v1.UpdateIssuanceRequestResponse
	19, // 41: ebl.v1.IssueRequestService.CreateEblVisualization:output_type -> ebl.v1.CreateEblVisualizationResponse
	21, // 42: ebl.v1.IssueRequestService.UpdateEblVisualization:output_type -> ebl.v1.UpdateEblVisualizationResponse
	32, // [32:43] is the sub-list for method output_type
	21, // [21:32] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_ebl_v1_issuerequest_proto_init() }
func file_ebl_v1_issuerequest_proto_init() {
	if File_ebl_v1_issuerequest_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ebl_v1_issuerequest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ebl_v1_issuerequest_proto_goTypes,
		DependencyIndexes: file_ebl_v1_issuerequest_proto_depIdxs,
		MessageInfos:      file_ebl_v1_issuerequest_proto_msgTypes,
	}.Build()
	File_ebl_v1_issuerequest_proto = out.File
	file_ebl_v1_issuerequest_proto_rawDesc = nil
	file_ebl_v1_issuerequest_proto_goTypes = nil
	file_ebl_v1_issuerequest_proto_depIdxs = nil
}
