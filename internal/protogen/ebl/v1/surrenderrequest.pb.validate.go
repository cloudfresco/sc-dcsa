// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ebl/v1/surrenderrequest.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTransactionPartyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransactionPartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransactionPartyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateTransactionPartyRequestMultiError, or nil if none found.
func (m *CreateTransactionPartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransactionPartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EblPlatformIdentifier

	// no validation rules for LegalName

	// no validation rules for RegistrationNumber

	// no validation rules for LocationOfRegistration

	// no validation rules for TaxReference

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateTransactionPartyRequestMultiError(errors)
	}

	return nil
}

// CreateTransactionPartyRequestMultiError is an error wrapping multiple
// validation errors returned by CreateTransactionPartyRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateTransactionPartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransactionPartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransactionPartyRequestMultiError) AllErrors() []error { return m }

// CreateTransactionPartyRequestValidationError is the validation error
// returned by CreateTransactionPartyRequest.Validate if the designated
// constraints aren't met.
type CreateTransactionPartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionPartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionPartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionPartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionPartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionPartyRequestValidationError) ErrorName() string {
	return "CreateTransactionPartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionPartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionPartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionPartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionPartyRequestValidationError{}

// Validate checks the field values on CreateTransactionPartyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransactionPartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransactionPartyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateTransactionPartyResponseMultiError, or nil if none found.
func (m *CreateTransactionPartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransactionPartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransactionParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionPartyResponseValidationError{
					field:  "TransactionParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionPartyResponseValidationError{
					field:  "TransactionParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransactionParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionPartyResponseValidationError{
				field:  "TransactionParty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTransactionPartyResponseMultiError(errors)
	}

	return nil
}

// CreateTransactionPartyResponseMultiError is an error wrapping multiple
// validation errors returned by CreateTransactionPartyResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateTransactionPartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransactionPartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransactionPartyResponseMultiError) AllErrors() []error { return m }

// CreateTransactionPartyResponseValidationError is the validation error
// returned by CreateTransactionPartyResponse.Validate if the designated
// constraints aren't met.
type CreateTransactionPartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionPartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionPartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionPartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionPartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionPartyResponseValidationError) ErrorName() string {
	return "CreateTransactionPartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionPartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionPartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionPartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionPartyResponseValidationError{}

// Validate checks the field values on UpdateTransactionPartyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTransactionPartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTransactionPartyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateTransactionPartyRequestMultiError, or nil if none found.
func (m *UpdateTransactionPartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTransactionPartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EblPlatformIdentifier

	// no validation rules for LegalName

	// no validation rules for RegistrationNumber

	// no validation rules for LocationOfRegistration

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateTransactionPartyRequestMultiError(errors)
	}

	return nil
}

// UpdateTransactionPartyRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateTransactionPartyRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateTransactionPartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTransactionPartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTransactionPartyRequestMultiError) AllErrors() []error { return m }

// UpdateTransactionPartyRequestValidationError is the validation error
// returned by UpdateTransactionPartyRequest.Validate if the designated
// constraints aren't met.
type UpdateTransactionPartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTransactionPartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTransactionPartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTransactionPartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTransactionPartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTransactionPartyRequestValidationError) ErrorName() string {
	return "UpdateTransactionPartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTransactionPartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTransactionPartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTransactionPartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTransactionPartyRequestValidationError{}

// Validate checks the field values on UpdateTransactionPartyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTransactionPartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTransactionPartyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateTransactionPartyResponseMultiError, or nil if none found.
func (m *UpdateTransactionPartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTransactionPartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTransactionPartyResponseMultiError(errors)
	}

	return nil
}

// UpdateTransactionPartyResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateTransactionPartyResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateTransactionPartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTransactionPartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTransactionPartyResponseMultiError) AllErrors() []error { return m }

// UpdateTransactionPartyResponseValidationError is the validation error
// returned by UpdateTransactionPartyResponse.Validate if the designated
// constraints aren't met.
type UpdateTransactionPartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTransactionPartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTransactionPartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTransactionPartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTransactionPartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTransactionPartyResponseValidationError) ErrorName() string {
	return "UpdateTransactionPartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTransactionPartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTransactionPartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTransactionPartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTransactionPartyResponseValidationError{}

// Validate checks the field values on TransactionParty with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransactionParty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionParty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionPartyMultiError, or nil if none found.
func (m *TransactionParty) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionParty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransactionPartyD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionPartyValidationError{
					field:  "TransactionPartyD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionPartyValidationError{
					field:  "TransactionPartyD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransactionPartyD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionPartyValidationError{
				field:  "TransactionPartyD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionPartyValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionPartyValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionPartyValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionPartyValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionPartyValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionPartyValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransactionPartyMultiError(errors)
	}

	return nil
}

// TransactionPartyMultiError is an error wrapping multiple validation errors
// returned by TransactionParty.ValidateAll() if the designated constraints
// aren't met.
type TransactionPartyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionPartyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionPartyMultiError) AllErrors() []error { return m }

// TransactionPartyValidationError is the validation error returned by
// TransactionParty.Validate if the designated constraints aren't met.
type TransactionPartyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionPartyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionPartyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionPartyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionPartyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionPartyValidationError) ErrorName() string { return "TransactionPartyValidationError" }

// Error satisfies the builtin error interface
func (e TransactionPartyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionParty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionPartyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionPartyValidationError{}

// Validate checks the field values on TransactionPartyD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransactionPartyD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionPartyD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionPartyDMultiError, or nil if none found.
func (m *TransactionPartyD) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionPartyD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for EblPlatformIdentifier

	// no validation rules for LegalName

	// no validation rules for RegistrationNumber

	// no validation rules for LocationOfRegistration

	// no validation rules for TaxReference

	if len(errors) > 0 {
		return TransactionPartyDMultiError(errors)
	}

	return nil
}

// TransactionPartyDMultiError is an error wrapping multiple validation errors
// returned by TransactionPartyD.ValidateAll() if the designated constraints
// aren't met.
type TransactionPartyDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionPartyDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionPartyDMultiError) AllErrors() []error { return m }

// TransactionPartyDValidationError is the validation error returned by
// TransactionPartyD.Validate if the designated constraints aren't met.
type TransactionPartyDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionPartyDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionPartyDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionPartyDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionPartyDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionPartyDValidationError) ErrorName() string {
	return "TransactionPartyDValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionPartyDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionPartyD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionPartyDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionPartyDValidationError{}

// Validate checks the field values on GetTransactionPartyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionPartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionPartyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionPartyRequestMultiError, or nil if none found.
func (m *GetTransactionPartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionPartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionPartyRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionPartyRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionPartyRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransactionPartyRequestMultiError(errors)
	}

	return nil
}

// GetTransactionPartyRequestMultiError is an error wrapping multiple
// validation errors returned by GetTransactionPartyRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTransactionPartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionPartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionPartyRequestMultiError) AllErrors() []error { return m }

// GetTransactionPartyRequestValidationError is the validation error returned
// by GetTransactionPartyRequest.Validate if the designated constraints aren't met.
type GetTransactionPartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionPartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionPartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionPartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionPartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionPartyRequestValidationError) ErrorName() string {
	return "GetTransactionPartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionPartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionPartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionPartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionPartyRequestValidationError{}

// Validate checks the field values on GetTransactionPartyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionPartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionPartyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionPartyResponseMultiError, or nil if none found.
func (m *GetTransactionPartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionPartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransactionParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionPartyResponseValidationError{
					field:  "TransactionParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionPartyResponseValidationError{
					field:  "TransactionParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransactionParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionPartyResponseValidationError{
				field:  "TransactionParty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransactionPartyResponseMultiError(errors)
	}

	return nil
}

// GetTransactionPartyResponseMultiError is an error wrapping multiple
// validation errors returned by GetTransactionPartyResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTransactionPartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionPartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionPartyResponseMultiError) AllErrors() []error { return m }

// GetTransactionPartyResponseValidationError is the validation error returned
// by GetTransactionPartyResponse.Validate if the designated constraints
// aren't met.
type GetTransactionPartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionPartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionPartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionPartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionPartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionPartyResponseValidationError) ErrorName() string {
	return "GetTransactionPartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionPartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionPartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionPartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionPartyResponseValidationError{}

// Validate checks the field values on GetTransactionPartiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionPartiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionPartiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionPartiesRequestMultiError, or nil if none found.
func (m *GetTransactionPartiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionPartiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetTransactionPartiesRequestMultiError(errors)
	}

	return nil
}

// GetTransactionPartiesRequestMultiError is an error wrapping multiple
// validation errors returned by GetTransactionPartiesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTransactionPartiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionPartiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionPartiesRequestMultiError) AllErrors() []error { return m }

// GetTransactionPartiesRequestValidationError is the validation error returned
// by GetTransactionPartiesRequest.Validate if the designated constraints
// aren't met.
type GetTransactionPartiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionPartiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionPartiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionPartiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionPartiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionPartiesRequestValidationError) ErrorName() string {
	return "GetTransactionPartiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionPartiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionPartiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionPartiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionPartiesRequestValidationError{}

// Validate checks the field values on GetTransactionPartiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionPartiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionPartiesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTransactionPartiesResponseMultiError, or nil if none found.
func (m *GetTransactionPartiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionPartiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransactionParties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTransactionPartiesResponseValidationError{
						field:  fmt.Sprintf("TransactionParties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTransactionPartiesResponseValidationError{
						field:  fmt.Sprintf("TransactionParties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTransactionPartiesResponseValidationError{
					field:  fmt.Sprintf("TransactionParties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetTransactionPartiesResponseMultiError(errors)
	}

	return nil
}

// GetTransactionPartiesResponseMultiError is an error wrapping multiple
// validation errors returned by GetTransactionPartiesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetTransactionPartiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionPartiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionPartiesResponseMultiError) AllErrors() []error { return m }

// GetTransactionPartiesResponseValidationError is the validation error
// returned by GetTransactionPartiesResponse.Validate if the designated
// constraints aren't met.
type GetTransactionPartiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionPartiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionPartiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionPartiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionPartiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionPartiesResponseValidationError) ErrorName() string {
	return "GetTransactionPartiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionPartiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionPartiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionPartiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionPartiesResponseValidationError{}

// Validate checks the field values on GetTransactionPartyByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionPartyByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionPartyByPkRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTransactionPartyByPkRequestMultiError, or nil if none found.
func (m *GetTransactionPartyByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionPartyByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionPartyByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionPartyByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionPartyByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransactionPartyByPkRequestMultiError(errors)
	}

	return nil
}

// GetTransactionPartyByPkRequestMultiError is an error wrapping multiple
// validation errors returned by GetTransactionPartyByPkRequest.ValidateAll()
// if the designated constraints aren't met.
type GetTransactionPartyByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionPartyByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionPartyByPkRequestMultiError) AllErrors() []error { return m }

// GetTransactionPartyByPkRequestValidationError is the validation error
// returned by GetTransactionPartyByPkRequest.Validate if the designated
// constraints aren't met.
type GetTransactionPartyByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionPartyByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionPartyByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionPartyByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionPartyByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionPartyByPkRequestValidationError) ErrorName() string {
	return "GetTransactionPartyByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionPartyByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionPartyByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionPartyByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionPartyByPkRequestValidationError{}

// Validate checks the field values on GetTransactionPartyByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionPartyByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionPartyByPkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTransactionPartyByPkResponseMultiError, or nil if none found.
func (m *GetTransactionPartyByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionPartyByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransactionParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionPartyByPkResponseValidationError{
					field:  "TransactionParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionPartyByPkResponseValidationError{
					field:  "TransactionParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransactionParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionPartyByPkResponseValidationError{
				field:  "TransactionParty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransactionPartyByPkResponseMultiError(errors)
	}

	return nil
}

// GetTransactionPartyByPkResponseMultiError is an error wrapping multiple
// validation errors returned by GetTransactionPartyByPkResponse.ValidateAll()
// if the designated constraints aren't met.
type GetTransactionPartyByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionPartyByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionPartyByPkResponseMultiError) AllErrors() []error { return m }

// GetTransactionPartyByPkResponseValidationError is the validation error
// returned by GetTransactionPartyByPkResponse.Validate if the designated
// constraints aren't met.
type GetTransactionPartyByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionPartyByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionPartyByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionPartyByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionPartyByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionPartyByPkResponseValidationError) ErrorName() string {
	return "GetTransactionPartyByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionPartyByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionPartyByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionPartyByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionPartyByPkResponseValidationError{}

// Validate checks the field values on
// CreateTransactionPartySupportingCodeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateTransactionPartySupportingCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateTransactionPartySupportingCodeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateTransactionPartySupportingCodeRequestMultiError, or nil if none found.
func (m *CreateTransactionPartySupportingCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransactionPartySupportingCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionPartyId

	// no validation rules for PartyCode

	// no validation rules for PartyCodeListProvider

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateTransactionPartySupportingCodeRequestMultiError(errors)
	}

	return nil
}

// CreateTransactionPartySupportingCodeRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateTransactionPartySupportingCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTransactionPartySupportingCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransactionPartySupportingCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransactionPartySupportingCodeRequestMultiError) AllErrors() []error { return m }

// CreateTransactionPartySupportingCodeRequestValidationError is the validation
// error returned by CreateTransactionPartySupportingCodeRequest.Validate if
// the designated constraints aren't met.
type CreateTransactionPartySupportingCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionPartySupportingCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionPartySupportingCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionPartySupportingCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionPartySupportingCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionPartySupportingCodeRequestValidationError) ErrorName() string {
	return "CreateTransactionPartySupportingCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionPartySupportingCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionPartySupportingCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionPartySupportingCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionPartySupportingCodeRequestValidationError{}

// Validate checks the field values on
// CreateTransactionPartySupportingCodeResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateTransactionPartySupportingCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateTransactionPartySupportingCodeResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateTransactionPartySupportingCodeResponseMultiError, or nil if none found.
func (m *CreateTransactionPartySupportingCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransactionPartySupportingCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransactionPartySupportingCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionPartySupportingCodeResponseValidationError{
					field:  "TransactionPartySupportingCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionPartySupportingCodeResponseValidationError{
					field:  "TransactionPartySupportingCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransactionPartySupportingCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionPartySupportingCodeResponseValidationError{
				field:  "TransactionPartySupportingCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTransactionPartySupportingCodeResponseMultiError(errors)
	}

	return nil
}

// CreateTransactionPartySupportingCodeResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateTransactionPartySupportingCodeResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateTransactionPartySupportingCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransactionPartySupportingCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransactionPartySupportingCodeResponseMultiError) AllErrors() []error { return m }

// CreateTransactionPartySupportingCodeResponseValidationError is the
// validation error returned by
// CreateTransactionPartySupportingCodeResponse.Validate if the designated
// constraints aren't met.
type CreateTransactionPartySupportingCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionPartySupportingCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionPartySupportingCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionPartySupportingCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionPartySupportingCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionPartySupportingCodeResponseValidationError) ErrorName() string {
	return "CreateTransactionPartySupportingCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionPartySupportingCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionPartySupportingCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionPartySupportingCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionPartySupportingCodeResponseValidationError{}

// Validate checks the field values on
// UpdateTransactionPartySupportingCodeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateTransactionPartySupportingCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateTransactionPartySupportingCodeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateTransactionPartySupportingCodeRequestMultiError, or nil if none found.
func (m *UpdateTransactionPartySupportingCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTransactionPartySupportingCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionPartyId

	// no validation rules for PartyCode

	// no validation rules for PartyCodeListProvider

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateTransactionPartySupportingCodeRequestMultiError(errors)
	}

	return nil
}

// UpdateTransactionPartySupportingCodeRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateTransactionPartySupportingCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTransactionPartySupportingCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTransactionPartySupportingCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTransactionPartySupportingCodeRequestMultiError) AllErrors() []error { return m }

// UpdateTransactionPartySupportingCodeRequestValidationError is the validation
// error returned by UpdateTransactionPartySupportingCodeRequest.Validate if
// the designated constraints aren't met.
type UpdateTransactionPartySupportingCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTransactionPartySupportingCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTransactionPartySupportingCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTransactionPartySupportingCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTransactionPartySupportingCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTransactionPartySupportingCodeRequestValidationError) ErrorName() string {
	return "UpdateTransactionPartySupportingCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTransactionPartySupportingCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTransactionPartySupportingCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTransactionPartySupportingCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTransactionPartySupportingCodeRequestValidationError{}

// Validate checks the field values on
// UpdateTransactionPartySupportingCodeResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateTransactionPartySupportingCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateTransactionPartySupportingCodeResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateTransactionPartySupportingCodeResponseMultiError, or nil if none found.
func (m *UpdateTransactionPartySupportingCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTransactionPartySupportingCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTransactionPartySupportingCodeResponseMultiError(errors)
	}

	return nil
}

// UpdateTransactionPartySupportingCodeResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateTransactionPartySupportingCodeResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateTransactionPartySupportingCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTransactionPartySupportingCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTransactionPartySupportingCodeResponseMultiError) AllErrors() []error { return m }

// UpdateTransactionPartySupportingCodeResponseValidationError is the
// validation error returned by
// UpdateTransactionPartySupportingCodeResponse.Validate if the designated
// constraints aren't met.
type UpdateTransactionPartySupportingCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTransactionPartySupportingCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTransactionPartySupportingCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTransactionPartySupportingCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTransactionPartySupportingCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTransactionPartySupportingCodeResponseValidationError) ErrorName() string {
	return "UpdateTransactionPartySupportingCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTransactionPartySupportingCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTransactionPartySupportingCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTransactionPartySupportingCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTransactionPartySupportingCodeResponseValidationError{}

// Validate checks the field values on TransactionPartySupportingCode with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionPartySupportingCode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionPartySupportingCode with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TransactionPartySupportingCodeMultiError, or nil if none found.
func (m *TransactionPartySupportingCode) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionPartySupportingCode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransactionPartySupportingCodeD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionPartySupportingCodeValidationError{
					field:  "TransactionPartySupportingCodeD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionPartySupportingCodeValidationError{
					field:  "TransactionPartySupportingCodeD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransactionPartySupportingCodeD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionPartySupportingCodeValidationError{
				field:  "TransactionPartySupportingCodeD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionPartySupportingCodeValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionPartySupportingCodeValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionPartySupportingCodeValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionPartySupportingCodeValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionPartySupportingCodeValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionPartySupportingCodeValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransactionPartySupportingCodeMultiError(errors)
	}

	return nil
}

// TransactionPartySupportingCodeMultiError is an error wrapping multiple
// validation errors returned by TransactionPartySupportingCode.ValidateAll()
// if the designated constraints aren't met.
type TransactionPartySupportingCodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionPartySupportingCodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionPartySupportingCodeMultiError) AllErrors() []error { return m }

// TransactionPartySupportingCodeValidationError is the validation error
// returned by TransactionPartySupportingCode.Validate if the designated
// constraints aren't met.
type TransactionPartySupportingCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionPartySupportingCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionPartySupportingCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionPartySupportingCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionPartySupportingCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionPartySupportingCodeValidationError) ErrorName() string {
	return "TransactionPartySupportingCodeValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionPartySupportingCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionPartySupportingCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionPartySupportingCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionPartySupportingCodeValidationError{}

// Validate checks the field values on TransactionPartySupportingCodeD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionPartySupportingCodeD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionPartySupportingCodeD with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TransactionPartySupportingCodeDMultiError, or nil if none found.
func (m *TransactionPartySupportingCodeD) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionPartySupportingCodeD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for TransactionPartyId

	// no validation rules for PartyCode

	// no validation rules for PartyCodeListProvider

	if len(errors) > 0 {
		return TransactionPartySupportingCodeDMultiError(errors)
	}

	return nil
}

// TransactionPartySupportingCodeDMultiError is an error wrapping multiple
// validation errors returned by TransactionPartySupportingCodeD.ValidateAll()
// if the designated constraints aren't met.
type TransactionPartySupportingCodeDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionPartySupportingCodeDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionPartySupportingCodeDMultiError) AllErrors() []error { return m }

// TransactionPartySupportingCodeDValidationError is the validation error
// returned by TransactionPartySupportingCodeD.Validate if the designated
// constraints aren't met.
type TransactionPartySupportingCodeDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionPartySupportingCodeDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionPartySupportingCodeDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionPartySupportingCodeDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionPartySupportingCodeDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionPartySupportingCodeDValidationError) ErrorName() string {
	return "TransactionPartySupportingCodeDValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionPartySupportingCodeDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionPartySupportingCodeD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionPartySupportingCodeDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionPartySupportingCodeDValidationError{}

// Validate checks the field values on CreateEndorsementChainLinkRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateEndorsementChainLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEndorsementChainLinkRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateEndorsementChainLinkRequestMultiError, or nil if none found.
func (m *CreateEndorsementChainLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEndorsementChainLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EntryOrder

	// no validation rules for ActionDateTime

	// no validation rules for Actor

	// no validation rules for Recipient

	// no validation rules for SurrenderRequestId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateEndorsementChainLinkRequestMultiError(errors)
	}

	return nil
}

// CreateEndorsementChainLinkRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateEndorsementChainLinkRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEndorsementChainLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEndorsementChainLinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEndorsementChainLinkRequestMultiError) AllErrors() []error { return m }

// CreateEndorsementChainLinkRequestValidationError is the validation error
// returned by CreateEndorsementChainLinkRequest.Validate if the designated
// constraints aren't met.
type CreateEndorsementChainLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEndorsementChainLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEndorsementChainLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEndorsementChainLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEndorsementChainLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEndorsementChainLinkRequestValidationError) ErrorName() string {
	return "CreateEndorsementChainLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEndorsementChainLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEndorsementChainLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEndorsementChainLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEndorsementChainLinkRequestValidationError{}

// Validate checks the field values on CreateEndorsementChainLinkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateEndorsementChainLinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEndorsementChainLinkResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateEndorsementChainLinkResponseMultiError, or nil if none found.
func (m *CreateEndorsementChainLinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEndorsementChainLinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEndorsementChainLink()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEndorsementChainLinkResponseValidationError{
					field:  "EndorsementChainLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEndorsementChainLinkResponseValidationError{
					field:  "EndorsementChainLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndorsementChainLink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEndorsementChainLinkResponseValidationError{
				field:  "EndorsementChainLink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEndorsementChainLinkResponseMultiError(errors)
	}

	return nil
}

// CreateEndorsementChainLinkResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateEndorsementChainLinkResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateEndorsementChainLinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEndorsementChainLinkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEndorsementChainLinkResponseMultiError) AllErrors() []error { return m }

// CreateEndorsementChainLinkResponseValidationError is the validation error
// returned by CreateEndorsementChainLinkResponse.Validate if the designated
// constraints aren't met.
type CreateEndorsementChainLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEndorsementChainLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEndorsementChainLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEndorsementChainLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEndorsementChainLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEndorsementChainLinkResponseValidationError) ErrorName() string {
	return "CreateEndorsementChainLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEndorsementChainLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEndorsementChainLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEndorsementChainLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEndorsementChainLinkResponseValidationError{}

// Validate checks the field values on UpdateEndorsementChainLinkRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateEndorsementChainLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEndorsementChainLinkRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateEndorsementChainLinkRequestMultiError, or nil if none found.
func (m *UpdateEndorsementChainLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEndorsementChainLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EntryOrder

	// no validation rules for Actor

	// no validation rules for Recipient

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateEndorsementChainLinkRequestMultiError(errors)
	}

	return nil
}

// UpdateEndorsementChainLinkRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateEndorsementChainLinkRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEndorsementChainLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEndorsementChainLinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEndorsementChainLinkRequestMultiError) AllErrors() []error { return m }

// UpdateEndorsementChainLinkRequestValidationError is the validation error
// returned by UpdateEndorsementChainLinkRequest.Validate if the designated
// constraints aren't met.
type UpdateEndorsementChainLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEndorsementChainLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEndorsementChainLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEndorsementChainLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEndorsementChainLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEndorsementChainLinkRequestValidationError) ErrorName() string {
	return "UpdateEndorsementChainLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEndorsementChainLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEndorsementChainLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEndorsementChainLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEndorsementChainLinkRequestValidationError{}

// Validate checks the field values on UpdateEndorsementChainLinkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateEndorsementChainLinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEndorsementChainLinkResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateEndorsementChainLinkResponseMultiError, or nil if none found.
func (m *UpdateEndorsementChainLinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEndorsementChainLinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateEndorsementChainLinkResponseMultiError(errors)
	}

	return nil
}

// UpdateEndorsementChainLinkResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateEndorsementChainLinkResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateEndorsementChainLinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEndorsementChainLinkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEndorsementChainLinkResponseMultiError) AllErrors() []error { return m }

// UpdateEndorsementChainLinkResponseValidationError is the validation error
// returned by UpdateEndorsementChainLinkResponse.Validate if the designated
// constraints aren't met.
type UpdateEndorsementChainLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEndorsementChainLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEndorsementChainLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEndorsementChainLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEndorsementChainLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEndorsementChainLinkResponseValidationError) ErrorName() string {
	return "UpdateEndorsementChainLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEndorsementChainLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEndorsementChainLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEndorsementChainLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEndorsementChainLinkResponseValidationError{}

// Validate checks the field values on EndorsementChainLink with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EndorsementChainLink) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndorsementChainLink with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndorsementChainLinkMultiError, or nil if none found.
func (m *EndorsementChainLink) ValidateAll() error {
	return m.validate(true)
}

func (m *EndorsementChainLink) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEndorsementChainLinkD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EndorsementChainLinkValidationError{
					field:  "EndorsementChainLinkD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EndorsementChainLinkValidationError{
					field:  "EndorsementChainLinkD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndorsementChainLinkD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndorsementChainLinkValidationError{
				field:  "EndorsementChainLinkD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndorsementChainLinkT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EndorsementChainLinkValidationError{
					field:  "EndorsementChainLinkT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EndorsementChainLinkValidationError{
					field:  "EndorsementChainLinkT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndorsementChainLinkT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndorsementChainLinkValidationError{
				field:  "EndorsementChainLinkT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EndorsementChainLinkValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EndorsementChainLinkValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndorsementChainLinkValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EndorsementChainLinkValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EndorsementChainLinkValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndorsementChainLinkValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EndorsementChainLinkMultiError(errors)
	}

	return nil
}

// EndorsementChainLinkMultiError is an error wrapping multiple validation
// errors returned by EndorsementChainLink.ValidateAll() if the designated
// constraints aren't met.
type EndorsementChainLinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndorsementChainLinkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndorsementChainLinkMultiError) AllErrors() []error { return m }

// EndorsementChainLinkValidationError is the validation error returned by
// EndorsementChainLink.Validate if the designated constraints aren't met.
type EndorsementChainLinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndorsementChainLinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndorsementChainLinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndorsementChainLinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndorsementChainLinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndorsementChainLinkValidationError) ErrorName() string {
	return "EndorsementChainLinkValidationError"
}

// Error satisfies the builtin error interface
func (e EndorsementChainLinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndorsementChainLink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndorsementChainLinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndorsementChainLinkValidationError{}

// Validate checks the field values on EndorsementChainLinkD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EndorsementChainLinkD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndorsementChainLinkD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndorsementChainLinkDMultiError, or nil if none found.
func (m *EndorsementChainLinkD) ValidateAll() error {
	return m.validate(true)
}

func (m *EndorsementChainLinkD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for EntryOrder

	// no validation rules for Actor

	// no validation rules for Recipient

	// no validation rules for SurrenderRequestId

	if len(errors) > 0 {
		return EndorsementChainLinkDMultiError(errors)
	}

	return nil
}

// EndorsementChainLinkDMultiError is an error wrapping multiple validation
// errors returned by EndorsementChainLinkD.ValidateAll() if the designated
// constraints aren't met.
type EndorsementChainLinkDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndorsementChainLinkDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndorsementChainLinkDMultiError) AllErrors() []error { return m }

// EndorsementChainLinkDValidationError is the validation error returned by
// EndorsementChainLinkD.Validate if the designated constraints aren't met.
type EndorsementChainLinkDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndorsementChainLinkDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndorsementChainLinkDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndorsementChainLinkDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndorsementChainLinkDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndorsementChainLinkDValidationError) ErrorName() string {
	return "EndorsementChainLinkDValidationError"
}

// Error satisfies the builtin error interface
func (e EndorsementChainLinkDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndorsementChainLinkD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndorsementChainLinkDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndorsementChainLinkDValidationError{}

// Validate checks the field values on EndorsementChainLinkT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EndorsementChainLinkT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndorsementChainLinkT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndorsementChainLinkTMultiError, or nil if none found.
func (m *EndorsementChainLinkT) ValidateAll() error {
	return m.validate(true)
}

func (m *EndorsementChainLinkT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActionDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EndorsementChainLinkTValidationError{
					field:  "ActionDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EndorsementChainLinkTValidationError{
					field:  "ActionDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActionDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndorsementChainLinkTValidationError{
				field:  "ActionDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EndorsementChainLinkTMultiError(errors)
	}

	return nil
}

// EndorsementChainLinkTMultiError is an error wrapping multiple validation
// errors returned by EndorsementChainLinkT.ValidateAll() if the designated
// constraints aren't met.
type EndorsementChainLinkTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndorsementChainLinkTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndorsementChainLinkTMultiError) AllErrors() []error { return m }

// EndorsementChainLinkTValidationError is the validation error returned by
// EndorsementChainLinkT.Validate if the designated constraints aren't met.
type EndorsementChainLinkTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndorsementChainLinkTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndorsementChainLinkTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndorsementChainLinkTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndorsementChainLinkTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndorsementChainLinkTValidationError) ErrorName() string {
	return "EndorsementChainLinkTValidationError"
}

// Error satisfies the builtin error interface
func (e EndorsementChainLinkTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndorsementChainLinkT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndorsementChainLinkTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndorsementChainLinkTValidationError{}

// Validate checks the field values on CreateSurrenderRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSurrenderRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSurrenderRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateSurrenderRequestRequestMultiError, or nil if none found.
func (m *CreateSurrenderRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSurrenderRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurrenderRequestReference

	// no validation rules for TransportDocumentReference

	// no validation rules for SurrenderRequestCode

	// no validation rules for Comments

	// no validation rules for SurrenderRequestedBy

	// no validation rules for CreatedDateTime

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateSurrenderRequestRequestMultiError(errors)
	}

	return nil
}

// CreateSurrenderRequestRequestMultiError is an error wrapping multiple
// validation errors returned by CreateSurrenderRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateSurrenderRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSurrenderRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSurrenderRequestRequestMultiError) AllErrors() []error { return m }

// CreateSurrenderRequestRequestValidationError is the validation error
// returned by CreateSurrenderRequestRequest.Validate if the designated
// constraints aren't met.
type CreateSurrenderRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSurrenderRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSurrenderRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSurrenderRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSurrenderRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSurrenderRequestRequestValidationError) ErrorName() string {
	return "CreateSurrenderRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSurrenderRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSurrenderRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSurrenderRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSurrenderRequestRequestValidationError{}

// Validate checks the field values on CreateSurrenderRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSurrenderRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSurrenderRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateSurrenderRequestResponseMultiError, or nil if none found.
func (m *CreateSurrenderRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSurrenderRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurrenderRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSurrenderRequestResponseValidationError{
					field:  "SurrenderRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSurrenderRequestResponseValidationError{
					field:  "SurrenderRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurrenderRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSurrenderRequestResponseValidationError{
				field:  "SurrenderRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSurrenderRequestResponseMultiError(errors)
	}

	return nil
}

// CreateSurrenderRequestResponseMultiError is an error wrapping multiple
// validation errors returned by CreateSurrenderRequestResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateSurrenderRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSurrenderRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSurrenderRequestResponseMultiError) AllErrors() []error { return m }

// CreateSurrenderRequestResponseValidationError is the validation error
// returned by CreateSurrenderRequestResponse.Validate if the designated
// constraints aren't met.
type CreateSurrenderRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSurrenderRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSurrenderRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSurrenderRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSurrenderRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSurrenderRequestResponseValidationError) ErrorName() string {
	return "CreateSurrenderRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSurrenderRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSurrenderRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSurrenderRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSurrenderRequestResponseValidationError{}

// Validate checks the field values on UpdateSurrenderRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSurrenderRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSurrenderRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateSurrenderRequestRequestMultiError, or nil if none found.
func (m *UpdateSurrenderRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSurrenderRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurrenderRequestReference

	// no validation rules for TransportDocumentReference

	// no validation rules for SurrenderRequestCode

	// no validation rules for Comments

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateSurrenderRequestRequestMultiError(errors)
	}

	return nil
}

// UpdateSurrenderRequestRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSurrenderRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateSurrenderRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSurrenderRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSurrenderRequestRequestMultiError) AllErrors() []error { return m }

// UpdateSurrenderRequestRequestValidationError is the validation error
// returned by UpdateSurrenderRequestRequest.Validate if the designated
// constraints aren't met.
type UpdateSurrenderRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSurrenderRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSurrenderRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSurrenderRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSurrenderRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSurrenderRequestRequestValidationError) ErrorName() string {
	return "UpdateSurrenderRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSurrenderRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSurrenderRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSurrenderRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSurrenderRequestRequestValidationError{}

// Validate checks the field values on UpdateSurrenderRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSurrenderRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSurrenderRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateSurrenderRequestResponseMultiError, or nil if none found.
func (m *UpdateSurrenderRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSurrenderRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSurrenderRequestResponseMultiError(errors)
	}

	return nil
}

// UpdateSurrenderRequestResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateSurrenderRequestResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateSurrenderRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSurrenderRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSurrenderRequestResponseMultiError) AllErrors() []error { return m }

// UpdateSurrenderRequestResponseValidationError is the validation error
// returned by UpdateSurrenderRequestResponse.Validate if the designated
// constraints aren't met.
type UpdateSurrenderRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSurrenderRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSurrenderRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSurrenderRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSurrenderRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSurrenderRequestResponseValidationError) ErrorName() string {
	return "UpdateSurrenderRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSurrenderRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSurrenderRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSurrenderRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSurrenderRequestResponseValidationError{}

// Validate checks the field values on SurrenderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SurrenderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurrenderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SurrenderRequestMultiError, or nil if none found.
func (m *SurrenderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SurrenderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurrenderRequestD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurrenderRequestValidationError{
					field:  "SurrenderRequestD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurrenderRequestValidationError{
					field:  "SurrenderRequestD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurrenderRequestD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurrenderRequestValidationError{
				field:  "SurrenderRequestD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSurrenderRequestT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurrenderRequestValidationError{
					field:  "SurrenderRequestT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurrenderRequestValidationError{
					field:  "SurrenderRequestT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurrenderRequestT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurrenderRequestValidationError{
				field:  "SurrenderRequestT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurrenderRequestValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurrenderRequestValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurrenderRequestValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurrenderRequestValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurrenderRequestValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurrenderRequestValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SurrenderRequestMultiError(errors)
	}

	return nil
}

// SurrenderRequestMultiError is an error wrapping multiple validation errors
// returned by SurrenderRequest.ValidateAll() if the designated constraints
// aren't met.
type SurrenderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurrenderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurrenderRequestMultiError) AllErrors() []error { return m }

// SurrenderRequestValidationError is the validation error returned by
// SurrenderRequest.Validate if the designated constraints aren't met.
type SurrenderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurrenderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurrenderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurrenderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurrenderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurrenderRequestValidationError) ErrorName() string { return "SurrenderRequestValidationError" }

// Error satisfies the builtin error interface
func (e SurrenderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurrenderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurrenderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurrenderRequestValidationError{}

// Validate checks the field values on SurrenderRequestD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SurrenderRequestD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurrenderRequestD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SurrenderRequestDMultiError, or nil if none found.
func (m *SurrenderRequestD) ValidateAll() error {
	return m.validate(true)
}

func (m *SurrenderRequestD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for SurrenderRequestReference

	// no validation rules for TransportDocumentReference

	// no validation rules for SurrenderRequestCode

	// no validation rules for Comments

	// no validation rules for SurrenderRequestedBy

	if len(errors) > 0 {
		return SurrenderRequestDMultiError(errors)
	}

	return nil
}

// SurrenderRequestDMultiError is an error wrapping multiple validation errors
// returned by SurrenderRequestD.ValidateAll() if the designated constraints
// aren't met.
type SurrenderRequestDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurrenderRequestDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurrenderRequestDMultiError) AllErrors() []error { return m }

// SurrenderRequestDValidationError is the validation error returned by
// SurrenderRequestD.Validate if the designated constraints aren't met.
type SurrenderRequestDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurrenderRequestDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurrenderRequestDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurrenderRequestDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurrenderRequestDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurrenderRequestDValidationError) ErrorName() string {
	return "SurrenderRequestDValidationError"
}

// Error satisfies the builtin error interface
func (e SurrenderRequestDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurrenderRequestD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurrenderRequestDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurrenderRequestDValidationError{}

// Validate checks the field values on SurrenderRequestT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SurrenderRequestT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurrenderRequestT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SurrenderRequestTMultiError, or nil if none found.
func (m *SurrenderRequestT) ValidateAll() error {
	return m.validate(true)
}

func (m *SurrenderRequestT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurrenderRequestTValidationError{
					field:  "CreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurrenderRequestTValidationError{
					field:  "CreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurrenderRequestTValidationError{
				field:  "CreatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SurrenderRequestTMultiError(errors)
	}

	return nil
}

// SurrenderRequestTMultiError is an error wrapping multiple validation errors
// returned by SurrenderRequestT.ValidateAll() if the designated constraints
// aren't met.
type SurrenderRequestTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurrenderRequestTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurrenderRequestTMultiError) AllErrors() []error { return m }

// SurrenderRequestTValidationError is the validation error returned by
// SurrenderRequestT.Validate if the designated constraints aren't met.
type SurrenderRequestTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurrenderRequestTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurrenderRequestTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurrenderRequestTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurrenderRequestTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurrenderRequestTValidationError) ErrorName() string {
	return "SurrenderRequestTValidationError"
}

// Error satisfies the builtin error interface
func (e SurrenderRequestTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurrenderRequestT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurrenderRequestTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurrenderRequestTValidationError{}
