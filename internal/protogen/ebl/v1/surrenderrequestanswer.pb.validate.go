// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ebl/v1/surrenderrequestanswer.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSurrenderRequestAnswerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateSurrenderRequestAnswerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSurrenderRequestAnswerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateSurrenderRequestAnswerRequestMultiError, or nil if none found.
func (m *CreateSurrenderRequestAnswerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSurrenderRequestAnswerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurrenderRequestReference

	// no validation rules for Action

	// no validation rules for Comments

	// no validation rules for CreatedDateTime

	// no validation rules for SurrenderRequestId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateSurrenderRequestAnswerRequestMultiError(errors)
	}

	return nil
}

// CreateSurrenderRequestAnswerRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateSurrenderRequestAnswerRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSurrenderRequestAnswerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSurrenderRequestAnswerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSurrenderRequestAnswerRequestMultiError) AllErrors() []error { return m }

// CreateSurrenderRequestAnswerRequestValidationError is the validation error
// returned by CreateSurrenderRequestAnswerRequest.Validate if the designated
// constraints aren't met.
type CreateSurrenderRequestAnswerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSurrenderRequestAnswerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSurrenderRequestAnswerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSurrenderRequestAnswerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSurrenderRequestAnswerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSurrenderRequestAnswerRequestValidationError) ErrorName() string {
	return "CreateSurrenderRequestAnswerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSurrenderRequestAnswerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSurrenderRequestAnswerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSurrenderRequestAnswerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSurrenderRequestAnswerRequestValidationError{}

// Validate checks the field values on CreateSurrenderRequestAnswerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateSurrenderRequestAnswerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSurrenderRequestAnswerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateSurrenderRequestAnswerResponseMultiError, or nil if none found.
func (m *CreateSurrenderRequestAnswerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSurrenderRequestAnswerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurrenderRequestAnswer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSurrenderRequestAnswerResponseValidationError{
					field:  "SurrenderRequestAnswer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSurrenderRequestAnswerResponseValidationError{
					field:  "SurrenderRequestAnswer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurrenderRequestAnswer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSurrenderRequestAnswerResponseValidationError{
				field:  "SurrenderRequestAnswer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSurrenderRequestAnswerResponseMultiError(errors)
	}

	return nil
}

// CreateSurrenderRequestAnswerResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateSurrenderRequestAnswerResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSurrenderRequestAnswerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSurrenderRequestAnswerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSurrenderRequestAnswerResponseMultiError) AllErrors() []error { return m }

// CreateSurrenderRequestAnswerResponseValidationError is the validation error
// returned by CreateSurrenderRequestAnswerResponse.Validate if the designated
// constraints aren't met.
type CreateSurrenderRequestAnswerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSurrenderRequestAnswerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSurrenderRequestAnswerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSurrenderRequestAnswerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSurrenderRequestAnswerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSurrenderRequestAnswerResponseValidationError) ErrorName() string {
	return "CreateSurrenderRequestAnswerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSurrenderRequestAnswerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSurrenderRequestAnswerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSurrenderRequestAnswerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSurrenderRequestAnswerResponseValidationError{}

// Validate checks the field values on UpdateSurrenderRequestAnswerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateSurrenderRequestAnswerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSurrenderRequestAnswerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateSurrenderRequestAnswerRequestMultiError, or nil if none found.
func (m *UpdateSurrenderRequestAnswerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSurrenderRequestAnswerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurrenderRequestReference

	// no validation rules for Action

	// no validation rules for Comments

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateSurrenderRequestAnswerRequestMultiError(errors)
	}

	return nil
}

// UpdateSurrenderRequestAnswerRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateSurrenderRequestAnswerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSurrenderRequestAnswerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSurrenderRequestAnswerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSurrenderRequestAnswerRequestMultiError) AllErrors() []error { return m }

// UpdateSurrenderRequestAnswerRequestValidationError is the validation error
// returned by UpdateSurrenderRequestAnswerRequest.Validate if the designated
// constraints aren't met.
type UpdateSurrenderRequestAnswerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSurrenderRequestAnswerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSurrenderRequestAnswerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSurrenderRequestAnswerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSurrenderRequestAnswerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSurrenderRequestAnswerRequestValidationError) ErrorName() string {
	return "UpdateSurrenderRequestAnswerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSurrenderRequestAnswerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSurrenderRequestAnswerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSurrenderRequestAnswerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSurrenderRequestAnswerRequestValidationError{}

// Validate checks the field values on UpdateSurrenderRequestAnswerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateSurrenderRequestAnswerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSurrenderRequestAnswerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateSurrenderRequestAnswerResponseMultiError, or nil if none found.
func (m *UpdateSurrenderRequestAnswerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSurrenderRequestAnswerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSurrenderRequestAnswerResponseMultiError(errors)
	}

	return nil
}

// UpdateSurrenderRequestAnswerResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateSurrenderRequestAnswerResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateSurrenderRequestAnswerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSurrenderRequestAnswerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSurrenderRequestAnswerResponseMultiError) AllErrors() []error { return m }

// UpdateSurrenderRequestAnswerResponseValidationError is the validation error
// returned by UpdateSurrenderRequestAnswerResponse.Validate if the designated
// constraints aren't met.
type UpdateSurrenderRequestAnswerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSurrenderRequestAnswerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSurrenderRequestAnswerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSurrenderRequestAnswerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSurrenderRequestAnswerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSurrenderRequestAnswerResponseValidationError) ErrorName() string {
	return "UpdateSurrenderRequestAnswerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSurrenderRequestAnswerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSurrenderRequestAnswerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSurrenderRequestAnswerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSurrenderRequestAnswerResponseValidationError{}

// Validate checks the field values on SurrenderRequestAnswer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SurrenderRequestAnswer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurrenderRequestAnswer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SurrenderRequestAnswerMultiError, or nil if none found.
func (m *SurrenderRequestAnswer) ValidateAll() error {
	return m.validate(true)
}

func (m *SurrenderRequestAnswer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurrenderRequestAnswerD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurrenderRequestAnswerValidationError{
					field:  "SurrenderRequestAnswerD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurrenderRequestAnswerValidationError{
					field:  "SurrenderRequestAnswerD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurrenderRequestAnswerD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurrenderRequestAnswerValidationError{
				field:  "SurrenderRequestAnswerD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSurrenderRequestAnswerT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurrenderRequestAnswerValidationError{
					field:  "SurrenderRequestAnswerT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurrenderRequestAnswerValidationError{
					field:  "SurrenderRequestAnswerT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurrenderRequestAnswerT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurrenderRequestAnswerValidationError{
				field:  "SurrenderRequestAnswerT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurrenderRequestAnswerValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurrenderRequestAnswerValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurrenderRequestAnswerValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurrenderRequestAnswerValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurrenderRequestAnswerValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurrenderRequestAnswerValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SurrenderRequestAnswerMultiError(errors)
	}

	return nil
}

// SurrenderRequestAnswerMultiError is an error wrapping multiple validation
// errors returned by SurrenderRequestAnswer.ValidateAll() if the designated
// constraints aren't met.
type SurrenderRequestAnswerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurrenderRequestAnswerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurrenderRequestAnswerMultiError) AllErrors() []error { return m }

// SurrenderRequestAnswerValidationError is the validation error returned by
// SurrenderRequestAnswer.Validate if the designated constraints aren't met.
type SurrenderRequestAnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurrenderRequestAnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurrenderRequestAnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurrenderRequestAnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurrenderRequestAnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurrenderRequestAnswerValidationError) ErrorName() string {
	return "SurrenderRequestAnswerValidationError"
}

// Error satisfies the builtin error interface
func (e SurrenderRequestAnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurrenderRequestAnswer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurrenderRequestAnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurrenderRequestAnswerValidationError{}

// Validate checks the field values on SurrenderRequestAnswerD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SurrenderRequestAnswerD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurrenderRequestAnswerD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SurrenderRequestAnswerDMultiError, or nil if none found.
func (m *SurrenderRequestAnswerD) ValidateAll() error {
	return m.validate(true)
}

func (m *SurrenderRequestAnswerD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for SurrenderRequestReference

	// no validation rules for Action

	// no validation rules for Comments

	// no validation rules for SurrenderRequestId

	if len(errors) > 0 {
		return SurrenderRequestAnswerDMultiError(errors)
	}

	return nil
}

// SurrenderRequestAnswerDMultiError is an error wrapping multiple validation
// errors returned by SurrenderRequestAnswerD.ValidateAll() if the designated
// constraints aren't met.
type SurrenderRequestAnswerDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurrenderRequestAnswerDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurrenderRequestAnswerDMultiError) AllErrors() []error { return m }

// SurrenderRequestAnswerDValidationError is the validation error returned by
// SurrenderRequestAnswerD.Validate if the designated constraints aren't met.
type SurrenderRequestAnswerDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurrenderRequestAnswerDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurrenderRequestAnswerDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurrenderRequestAnswerDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurrenderRequestAnswerDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurrenderRequestAnswerDValidationError) ErrorName() string {
	return "SurrenderRequestAnswerDValidationError"
}

// Error satisfies the builtin error interface
func (e SurrenderRequestAnswerDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurrenderRequestAnswerD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurrenderRequestAnswerDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurrenderRequestAnswerDValidationError{}

// Validate checks the field values on SurrenderRequestAnswerT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SurrenderRequestAnswerT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurrenderRequestAnswerT with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SurrenderRequestAnswerTMultiError, or nil if none found.
func (m *SurrenderRequestAnswerT) ValidateAll() error {
	return m.validate(true)
}

func (m *SurrenderRequestAnswerT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurrenderRequestAnswerTValidationError{
					field:  "CreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurrenderRequestAnswerTValidationError{
					field:  "CreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurrenderRequestAnswerTValidationError{
				field:  "CreatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SurrenderRequestAnswerTMultiError(errors)
	}

	return nil
}

// SurrenderRequestAnswerTMultiError is an error wrapping multiple validation
// errors returned by SurrenderRequestAnswerT.ValidateAll() if the designated
// constraints aren't met.
type SurrenderRequestAnswerTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurrenderRequestAnswerTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurrenderRequestAnswerTMultiError) AllErrors() []error { return m }

// SurrenderRequestAnswerTValidationError is the validation error returned by
// SurrenderRequestAnswerT.Validate if the designated constraints aren't met.
type SurrenderRequestAnswerTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurrenderRequestAnswerTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurrenderRequestAnswerTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurrenderRequestAnswerTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurrenderRequestAnswerTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurrenderRequestAnswerTValidationError) ErrorName() string {
	return "SurrenderRequestAnswerTValidationError"
}

// Error satisfies the builtin error interface
func (e SurrenderRequestAnswerTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurrenderRequestAnswerT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurrenderRequestAnswerTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurrenderRequestAnswerTValidationError{}
