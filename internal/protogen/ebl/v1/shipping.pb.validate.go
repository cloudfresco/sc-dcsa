// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ebl/v1/shipping.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateShipmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShipmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShipmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShipmentRequestMultiError, or nil if none found.
func (m *CreateShipmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShipmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookingId

	// no validation rules for CarrierId

	// no validation rules for CarrierBookingReference

	// no validation rules for TermsAndConditions

	// no validation rules for ConfirmationDatetime

	// no validation rules for UpdatedDateTime

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateShipmentRequestMultiError(errors)
	}

	return nil
}

// CreateShipmentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateShipmentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateShipmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShipmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShipmentRequestMultiError) AllErrors() []error { return m }

// CreateShipmentRequestValidationError is the validation error returned by
// CreateShipmentRequest.Validate if the designated constraints aren't met.
type CreateShipmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShipmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShipmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShipmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShipmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShipmentRequestValidationError) ErrorName() string {
	return "CreateShipmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShipmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShipmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShipmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShipmentRequestValidationError{}

// Validate checks the field values on CreateShipmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShipmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShipmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShipmentResponseMultiError, or nil if none found.
func (m *CreateShipmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShipmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShipment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShipmentResponseValidationError{
					field:  "Shipment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShipmentResponseValidationError{
					field:  "Shipment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShipmentResponseValidationError{
				field:  "Shipment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShipmentResponseMultiError(errors)
	}

	return nil
}

// CreateShipmentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateShipmentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateShipmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShipmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShipmentResponseMultiError) AllErrors() []error { return m }

// CreateShipmentResponseValidationError is the validation error returned by
// CreateShipmentResponse.Validate if the designated constraints aren't met.
type CreateShipmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShipmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShipmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShipmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShipmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShipmentResponseValidationError) ErrorName() string {
	return "CreateShipmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShipmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShipmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShipmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShipmentResponseValidationError{}

// Validate checks the field values on
// FindCarrierBookingReferenceByShippingInstructionIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindCarrierBookingReferenceByShippingInstructionIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindCarrierBookingReferenceByShippingInstructionIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindCarrierBookingReferenceByShippingInstructionIdResponseMultiError, or
// nil if none found.
func (m *FindCarrierBookingReferenceByShippingInstructionIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCarrierBookingReferenceByShippingInstructionIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierBookingReference

	if len(errors) > 0 {
		return FindCarrierBookingReferenceByShippingInstructionIdResponseMultiError(errors)
	}

	return nil
}

// FindCarrierBookingReferenceByShippingInstructionIdResponseMultiError is an
// error wrapping multiple validation errors returned by
// FindCarrierBookingReferenceByShippingInstructionIdResponse.ValidateAll() if
// the designated constraints aren't met.
type FindCarrierBookingReferenceByShippingInstructionIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCarrierBookingReferenceByShippingInstructionIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCarrierBookingReferenceByShippingInstructionIdResponseMultiError) AllErrors() []error {
	return m
}

// FindCarrierBookingReferenceByShippingInstructionIdResponseValidationError is
// the validation error returned by
// FindCarrierBookingReferenceByShippingInstructionIdResponse.Validate if the
// designated constraints aren't met.
type FindCarrierBookingReferenceByShippingInstructionIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCarrierBookingReferenceByShippingInstructionIdResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FindCarrierBookingReferenceByShippingInstructionIdResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindCarrierBookingReferenceByShippingInstructionIdResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FindCarrierBookingReferenceByShippingInstructionIdResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e FindCarrierBookingReferenceByShippingInstructionIdResponseValidationError) ErrorName() string {
	return "FindCarrierBookingReferenceByShippingInstructionIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindCarrierBookingReferenceByShippingInstructionIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCarrierBookingReferenceByShippingInstructionIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCarrierBookingReferenceByShippingInstructionIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCarrierBookingReferenceByShippingInstructionIdResponseValidationError{}

// Validate checks the field values on
// FindCarrierBookingReferenceByShippingInstructionIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindCarrierBookingReferenceByShippingInstructionIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindCarrierBookingReferenceByShippingInstructionIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindCarrierBookingReferenceByShippingInstructionIdRequestMultiError, or nil
// if none found.
func (m *FindCarrierBookingReferenceByShippingInstructionIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCarrierBookingReferenceByShippingInstructionIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindCarrierBookingReferenceByShippingInstructionIdRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindCarrierBookingReferenceByShippingInstructionIdRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindCarrierBookingReferenceByShippingInstructionIdRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindCarrierBookingReferenceByShippingInstructionIdRequestMultiError(errors)
	}

	return nil
}

// FindCarrierBookingReferenceByShippingInstructionIdRequestMultiError is an
// error wrapping multiple validation errors returned by
// FindCarrierBookingReferenceByShippingInstructionIdRequest.ValidateAll() if
// the designated constraints aren't met.
type FindCarrierBookingReferenceByShippingInstructionIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCarrierBookingReferenceByShippingInstructionIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCarrierBookingReferenceByShippingInstructionIdRequestMultiError) AllErrors() []error {
	return m
}

// FindCarrierBookingReferenceByShippingInstructionIdRequestValidationError is
// the validation error returned by
// FindCarrierBookingReferenceByShippingInstructionIdRequest.Validate if the
// designated constraints aren't met.
type FindCarrierBookingReferenceByShippingInstructionIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCarrierBookingReferenceByShippingInstructionIdRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FindCarrierBookingReferenceByShippingInstructionIdRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindCarrierBookingReferenceByShippingInstructionIdRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FindCarrierBookingReferenceByShippingInstructionIdRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e FindCarrierBookingReferenceByShippingInstructionIdRequestValidationError) ErrorName() string {
	return "FindCarrierBookingReferenceByShippingInstructionIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindCarrierBookingReferenceByShippingInstructionIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCarrierBookingReferenceByShippingInstructionIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCarrierBookingReferenceByShippingInstructionIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCarrierBookingReferenceByShippingInstructionIdRequestValidationError{}

// Validate checks the field values on GetShipmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShipmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShipmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShipmentRequestMultiError, or nil if none found.
func (m *GetShipmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShipmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShipmentRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShipmentRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShipmentRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShipmentRequestMultiError(errors)
	}

	return nil
}

// GetShipmentRequestMultiError is an error wrapping multiple validation errors
// returned by GetShipmentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetShipmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShipmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShipmentRequestMultiError) AllErrors() []error { return m }

// GetShipmentRequestValidationError is the validation error returned by
// GetShipmentRequest.Validate if the designated constraints aren't met.
type GetShipmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShipmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShipmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShipmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShipmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShipmentRequestValidationError) ErrorName() string {
	return "GetShipmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShipmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShipmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShipmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShipmentRequestValidationError{}

// Validate checks the field values on GetShipmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShipmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShipmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShipmentResponseMultiError, or nil if none found.
func (m *GetShipmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShipmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShipment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShipmentResponseValidationError{
					field:  "Shipment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShipmentResponseValidationError{
					field:  "Shipment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShipmentResponseValidationError{
				field:  "Shipment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShipmentResponseMultiError(errors)
	}

	return nil
}

// GetShipmentResponseMultiError is an error wrapping multiple validation
// errors returned by GetShipmentResponse.ValidateAll() if the designated
// constraints aren't met.
type GetShipmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShipmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShipmentResponseMultiError) AllErrors() []error { return m }

// GetShipmentResponseValidationError is the validation error returned by
// GetShipmentResponse.Validate if the designated constraints aren't met.
type GetShipmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShipmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShipmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShipmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShipmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShipmentResponseValidationError) ErrorName() string {
	return "GetShipmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShipmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShipmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShipmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShipmentResponseValidationError{}

// Validate checks the field values on GetShipmentByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShipmentByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShipmentByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShipmentByPkRequestMultiError, or nil if none found.
func (m *GetShipmentByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShipmentByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShipmentByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShipmentByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShipmentByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShipmentByPkRequestMultiError(errors)
	}

	return nil
}

// GetShipmentByPkRequestMultiError is an error wrapping multiple validation
// errors returned by GetShipmentByPkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetShipmentByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShipmentByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShipmentByPkRequestMultiError) AllErrors() []error { return m }

// GetShipmentByPkRequestValidationError is the validation error returned by
// GetShipmentByPkRequest.Validate if the designated constraints aren't met.
type GetShipmentByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShipmentByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShipmentByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShipmentByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShipmentByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShipmentByPkRequestValidationError) ErrorName() string {
	return "GetShipmentByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShipmentByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShipmentByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShipmentByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShipmentByPkRequestValidationError{}

// Validate checks the field values on GetShipmentByPkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShipmentByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShipmentByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShipmentByPkResponseMultiError, or nil if none found.
func (m *GetShipmentByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShipmentByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShipment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShipmentByPkResponseValidationError{
					field:  "Shipment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShipmentByPkResponseValidationError{
					field:  "Shipment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShipmentByPkResponseValidationError{
				field:  "Shipment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShipmentByPkResponseMultiError(errors)
	}

	return nil
}

// GetShipmentByPkResponseMultiError is an error wrapping multiple validation
// errors returned by GetShipmentByPkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetShipmentByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShipmentByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShipmentByPkResponseMultiError) AllErrors() []error { return m }

// GetShipmentByPkResponseValidationError is the validation error returned by
// GetShipmentByPkResponse.Validate if the designated constraints aren't met.
type GetShipmentByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShipmentByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShipmentByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShipmentByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShipmentByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShipmentByPkResponseValidationError) ErrorName() string {
	return "GetShipmentByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShipmentByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShipmentByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShipmentByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShipmentByPkResponseValidationError{}

// Validate checks the field values on GetShipmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShipmentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShipmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShipmentsRequestMultiError, or nil if none found.
func (m *GetShipmentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShipmentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetShipmentsRequestMultiError(errors)
	}

	return nil
}

// GetShipmentsRequestMultiError is an error wrapping multiple validation
// errors returned by GetShipmentsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetShipmentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShipmentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShipmentsRequestMultiError) AllErrors() []error { return m }

// GetShipmentsRequestValidationError is the validation error returned by
// GetShipmentsRequest.Validate if the designated constraints aren't met.
type GetShipmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShipmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShipmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShipmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShipmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShipmentsRequestValidationError) ErrorName() string {
	return "GetShipmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShipmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShipmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShipmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShipmentsRequestValidationError{}

// Validate checks the field values on GetShipmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShipmentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShipmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShipmentsResponseMultiError, or nil if none found.
func (m *GetShipmentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShipmentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetShipments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetShipmentsResponseValidationError{
						field:  fmt.Sprintf("Shipments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetShipmentsResponseValidationError{
						field:  fmt.Sprintf("Shipments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetShipmentsResponseValidationError{
					field:  fmt.Sprintf("Shipments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetShipmentsResponseMultiError(errors)
	}

	return nil
}

// GetShipmentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetShipmentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetShipmentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShipmentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShipmentsResponseMultiError) AllErrors() []error { return m }

// GetShipmentsResponseValidationError is the validation error returned by
// GetShipmentsResponse.Validate if the designated constraints aren't met.
type GetShipmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShipmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShipmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShipmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShipmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShipmentsResponseValidationError) ErrorName() string {
	return "GetShipmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShipmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShipmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShipmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShipmentsResponseValidationError{}

// Validate checks the field values on Shipment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Shipment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Shipment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShipmentMultiError, or nil
// if none found.
func (m *Shipment) ValidateAll() error {
	return m.validate(true)
}

func (m *Shipment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShipmentD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentValidationError{
					field:  "ShipmentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentValidationError{
					field:  "ShipmentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipmentD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentValidationError{
				field:  "ShipmentD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShipmentT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentValidationError{
					field:  "ShipmentT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentValidationError{
					field:  "ShipmentT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipmentT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentValidationError{
				field:  "ShipmentT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShipmentMultiError(errors)
	}

	return nil
}

// ShipmentMultiError is an error wrapping multiple validation errors returned
// by Shipment.ValidateAll() if the designated constraints aren't met.
type ShipmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipmentMultiError) AllErrors() []error { return m }

// ShipmentValidationError is the validation error returned by
// Shipment.Validate if the designated constraints aren't met.
type ShipmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipmentValidationError) ErrorName() string { return "ShipmentValidationError" }

// Error satisfies the builtin error interface
func (e ShipmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipmentValidationError{}

// Validate checks the field values on ShipmentD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShipmentD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShipmentD with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShipmentDMultiError, or nil
// if none found.
func (m *ShipmentD) ValidateAll() error {
	return m.validate(true)
}

func (m *ShipmentD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for BookingId

	// no validation rules for CarrierId

	// no validation rules for CarrierBookingReference

	// no validation rules for TermsAndConditions

	if len(errors) > 0 {
		return ShipmentDMultiError(errors)
	}

	return nil
}

// ShipmentDMultiError is an error wrapping multiple validation errors returned
// by ShipmentD.ValidateAll() if the designated constraints aren't met.
type ShipmentDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipmentDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipmentDMultiError) AllErrors() []error { return m }

// ShipmentDValidationError is the validation error returned by
// ShipmentD.Validate if the designated constraints aren't met.
type ShipmentDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipmentDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipmentDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipmentDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipmentDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipmentDValidationError) ErrorName() string { return "ShipmentDValidationError" }

// Error satisfies the builtin error interface
func (e ShipmentDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipmentD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipmentDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipmentDValidationError{}

// Validate checks the field values on ShipmentT with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShipmentT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShipmentT with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShipmentTMultiError, or nil
// if none found.
func (m *ShipmentT) ValidateAll() error {
	return m.validate(true)
}

func (m *ShipmentT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfirmationDatetime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentTValidationError{
					field:  "ConfirmationDatetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentTValidationError{
					field:  "ConfirmationDatetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfirmationDatetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentTValidationError{
				field:  "ConfirmationDatetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentTValidationError{
					field:  "UpdatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentTValidationError{
					field:  "UpdatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentTValidationError{
				field:  "UpdatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShipmentTMultiError(errors)
	}

	return nil
}

// ShipmentTMultiError is an error wrapping multiple validation errors returned
// by ShipmentT.ValidateAll() if the designated constraints aren't met.
type ShipmentTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipmentTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipmentTMultiError) AllErrors() []error { return m }

// ShipmentTValidationError is the validation error returned by
// ShipmentT.Validate if the designated constraints aren't met.
type ShipmentTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipmentTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipmentTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipmentTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipmentTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipmentTValidationError) ErrorName() string { return "ShipmentTValidationError" }

// Error satisfies the builtin error interface
func (e ShipmentTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipmentT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipmentTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipmentTValidationError{}

// Validate checks the field values on ShipmentCutoffTime with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShipmentCutoffTime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShipmentCutoffTime with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShipmentCutoffTimeMultiError, or nil if none found.
func (m *ShipmentCutoffTime) ValidateAll() error {
	return m.validate(true)
}

func (m *ShipmentCutoffTime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShipmentCutoffTimeD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentCutoffTimeValidationError{
					field:  "ShipmentCutoffTimeD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentCutoffTimeValidationError{
					field:  "ShipmentCutoffTimeD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipmentCutoffTimeD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentCutoffTimeValidationError{
				field:  "ShipmentCutoffTimeD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShipmentCutoffTimeT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentCutoffTimeValidationError{
					field:  "ShipmentCutoffTimeT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentCutoffTimeValidationError{
					field:  "ShipmentCutoffTimeT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipmentCutoffTimeT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentCutoffTimeValidationError{
				field:  "ShipmentCutoffTimeT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShipmentCutoffTimeMultiError(errors)
	}

	return nil
}

// ShipmentCutoffTimeMultiError is an error wrapping multiple validation errors
// returned by ShipmentCutoffTime.ValidateAll() if the designated constraints
// aren't met.
type ShipmentCutoffTimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipmentCutoffTimeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipmentCutoffTimeMultiError) AllErrors() []error { return m }

// ShipmentCutoffTimeValidationError is the validation error returned by
// ShipmentCutoffTime.Validate if the designated constraints aren't met.
type ShipmentCutoffTimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipmentCutoffTimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipmentCutoffTimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipmentCutoffTimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipmentCutoffTimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipmentCutoffTimeValidationError) ErrorName() string {
	return "ShipmentCutoffTimeValidationError"
}

// Error satisfies the builtin error interface
func (e ShipmentCutoffTimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipmentCutoffTime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipmentCutoffTimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipmentCutoffTimeValidationError{}

// Validate checks the field values on ShipmentCutoffTimeD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShipmentCutoffTimeD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShipmentCutoffTimeD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShipmentCutoffTimeDMultiError, or nil if none found.
func (m *ShipmentCutoffTimeD) ValidateAll() error {
	return m.validate(true)
}

func (m *ShipmentCutoffTimeD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ShipmentId

	// no validation rules for CutOffTimeCode

	if len(errors) > 0 {
		return ShipmentCutoffTimeDMultiError(errors)
	}

	return nil
}

// ShipmentCutoffTimeDMultiError is an error wrapping multiple validation
// errors returned by ShipmentCutoffTimeD.ValidateAll() if the designated
// constraints aren't met.
type ShipmentCutoffTimeDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipmentCutoffTimeDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipmentCutoffTimeDMultiError) AllErrors() []error { return m }

// ShipmentCutoffTimeDValidationError is the validation error returned by
// ShipmentCutoffTimeD.Validate if the designated constraints aren't met.
type ShipmentCutoffTimeDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipmentCutoffTimeDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipmentCutoffTimeDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipmentCutoffTimeDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipmentCutoffTimeDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipmentCutoffTimeDValidationError) ErrorName() string {
	return "ShipmentCutoffTimeDValidationError"
}

// Error satisfies the builtin error interface
func (e ShipmentCutoffTimeDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipmentCutoffTimeD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipmentCutoffTimeDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipmentCutoffTimeDValidationError{}

// Validate checks the field values on ShipmentCutoffTimeT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShipmentCutoffTimeT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShipmentCutoffTimeT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShipmentCutoffTimeTMultiError, or nil if none found.
func (m *ShipmentCutoffTimeT) ValidateAll() error {
	return m.validate(true)
}

func (m *ShipmentCutoffTimeT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCutOffTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentCutoffTimeTValidationError{
					field:  "CutOffTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentCutoffTimeTValidationError{
					field:  "CutOffTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCutOffTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentCutoffTimeTValidationError{
				field:  "CutOffTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShipmentCutoffTimeTMultiError(errors)
	}

	return nil
}

// ShipmentCutoffTimeTMultiError is an error wrapping multiple validation
// errors returned by ShipmentCutoffTimeT.ValidateAll() if the designated
// constraints aren't met.
type ShipmentCutoffTimeTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipmentCutoffTimeTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipmentCutoffTimeTMultiError) AllErrors() []error { return m }

// ShipmentCutoffTimeTValidationError is the validation error returned by
// ShipmentCutoffTimeT.Validate if the designated constraints aren't met.
type ShipmentCutoffTimeTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipmentCutoffTimeTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipmentCutoffTimeTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipmentCutoffTimeTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipmentCutoffTimeTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipmentCutoffTimeTValidationError) ErrorName() string {
	return "ShipmentCutoffTimeTValidationError"
}

// Error satisfies the builtin error interface
func (e ShipmentCutoffTimeTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipmentCutoffTimeT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipmentCutoffTimeTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipmentCutoffTimeTValidationError{}

// Validate checks the field values on CreateShipmentCutoffTimeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShipmentCutoffTimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShipmentCutoffTimeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateShipmentCutoffTimeRequestMultiError, or nil if none found.
func (m *CreateShipmentCutoffTimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShipmentCutoffTimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShipmentId

	// no validation rules for CutOffTimeCode

	// no validation rules for CutOffTime

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateShipmentCutoffTimeRequestMultiError(errors)
	}

	return nil
}

// CreateShipmentCutoffTimeRequestMultiError is an error wrapping multiple
// validation errors returned by CreateShipmentCutoffTimeRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateShipmentCutoffTimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShipmentCutoffTimeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShipmentCutoffTimeRequestMultiError) AllErrors() []error { return m }

// CreateShipmentCutoffTimeRequestValidationError is the validation error
// returned by CreateShipmentCutoffTimeRequest.Validate if the designated
// constraints aren't met.
type CreateShipmentCutoffTimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShipmentCutoffTimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShipmentCutoffTimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShipmentCutoffTimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShipmentCutoffTimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShipmentCutoffTimeRequestValidationError) ErrorName() string {
	return "CreateShipmentCutoffTimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShipmentCutoffTimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShipmentCutoffTimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShipmentCutoffTimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShipmentCutoffTimeRequestValidationError{}

// Validate checks the field values on CreateTransportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransportRequestMultiError, or nil if none found.
func (m *CreateTransportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransportReference

	// no validation rules for TransportName

	// no validation rules for LoadTransportCallId

	// no validation rules for DischargeTransportCallId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateTransportRequestMultiError(errors)
	}

	return nil
}

// CreateTransportRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTransportRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTransportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransportRequestMultiError) AllErrors() []error { return m }

// CreateTransportRequestValidationError is the validation error returned by
// CreateTransportRequest.Validate if the designated constraints aren't met.
type CreateTransportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransportRequestValidationError) ErrorName() string {
	return "CreateTransportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransportRequestValidationError{}

// Validate checks the field values on CreateTransportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransportResponseMultiError, or nil if none found.
func (m *CreateTransportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransport()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransportResponseValidationError{
					field:  "Transport",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransportResponseValidationError{
					field:  "Transport",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransport()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransportResponseValidationError{
				field:  "Transport",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTransportResponseMultiError(errors)
	}

	return nil
}

// CreateTransportResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTransportResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTransportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransportResponseMultiError) AllErrors() []error { return m }

// CreateTransportResponseValidationError is the validation error returned by
// CreateTransportResponse.Validate if the designated constraints aren't met.
type CreateTransportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransportResponseValidationError) ErrorName() string {
	return "CreateTransportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransportResponseValidationError{}

// Validate checks the field values on GetTransportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransportRequestMultiError, or nil if none found.
func (m *GetTransportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransportRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransportRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransportRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransportRequestMultiError(errors)
	}

	return nil
}

// GetTransportRequestMultiError is an error wrapping multiple validation
// errors returned by GetTransportRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTransportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportRequestMultiError) AllErrors() []error { return m }

// GetTransportRequestValidationError is the validation error returned by
// GetTransportRequest.Validate if the designated constraints aren't met.
type GetTransportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportRequestValidationError) ErrorName() string {
	return "GetTransportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportRequestValidationError{}

// Validate checks the field values on GetTransportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransportResponseMultiError, or nil if none found.
func (m *GetTransportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransport()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransportResponseValidationError{
					field:  "Transport",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransportResponseValidationError{
					field:  "Transport",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransport()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransportResponseValidationError{
				field:  "Transport",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransportResponseMultiError(errors)
	}

	return nil
}

// GetTransportResponseMultiError is an error wrapping multiple validation
// errors returned by GetTransportResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTransportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportResponseMultiError) AllErrors() []error { return m }

// GetTransportResponseValidationError is the validation error returned by
// GetTransportResponse.Validate if the designated constraints aren't met.
type GetTransportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportResponseValidationError) ErrorName() string {
	return "GetTransportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportResponseValidationError{}

// Validate checks the field values on GetTransportByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransportByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransportByPkRequestMultiError, or nil if none found.
func (m *GetTransportByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransportByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransportByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransportByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransportByPkRequestMultiError(errors)
	}

	return nil
}

// GetTransportByPkRequestMultiError is an error wrapping multiple validation
// errors returned by GetTransportByPkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTransportByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportByPkRequestMultiError) AllErrors() []error { return m }

// GetTransportByPkRequestValidationError is the validation error returned by
// GetTransportByPkRequest.Validate if the designated constraints aren't met.
type GetTransportByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportByPkRequestValidationError) ErrorName() string {
	return "GetTransportByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportByPkRequestValidationError{}

// Validate checks the field values on GetTransportByPkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransportByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransportByPkResponseMultiError, or nil if none found.
func (m *GetTransportByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransport()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransportByPkResponseValidationError{
					field:  "Transport",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransportByPkResponseValidationError{
					field:  "Transport",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransport()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransportByPkResponseValidationError{
				field:  "Transport",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransportByPkResponseMultiError(errors)
	}

	return nil
}

// GetTransportByPkResponseMultiError is an error wrapping multiple validation
// errors returned by GetTransportByPkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTransportByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportByPkResponseMultiError) AllErrors() []error { return m }

// GetTransportByPkResponseValidationError is the validation error returned by
// GetTransportByPkResponse.Validate if the designated constraints aren't met.
type GetTransportByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportByPkResponseValidationError) ErrorName() string {
	return "GetTransportByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportByPkResponseValidationError{}

// Validate checks the field values on Transport with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transport with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransportMultiError, or nil
// if none found.
func (m *Transport) ValidateAll() error {
	return m.validate(true)
}

func (m *Transport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportValidationError{
					field:  "TransportD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportValidationError{
					field:  "TransportD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportValidationError{
				field:  "TransportD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransportMultiError(errors)
	}

	return nil
}

// TransportMultiError is an error wrapping multiple validation errors returned
// by Transport.ValidateAll() if the designated constraints aren't met.
type TransportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportMultiError) AllErrors() []error { return m }

// TransportValidationError is the validation error returned by
// Transport.Validate if the designated constraints aren't met.
type TransportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportValidationError) ErrorName() string { return "TransportValidationError" }

// Error satisfies the builtin error interface
func (e TransportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportValidationError{}

// Validate checks the field values on TransportD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TransportD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransportD with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransportDMultiError, or
// nil if none found.
func (m *TransportD) ValidateAll() error {
	return m.validate(true)
}

func (m *TransportD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for TransportReference

	// no validation rules for TransportName

	// no validation rules for LoadTransportCallId

	// no validation rules for DischargeTransportCallId

	if len(errors) > 0 {
		return TransportDMultiError(errors)
	}

	return nil
}

// TransportDMultiError is an error wrapping multiple validation errors
// returned by TransportD.ValidateAll() if the designated constraints aren't met.
type TransportDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportDMultiError) AllErrors() []error { return m }

// TransportDValidationError is the validation error returned by
// TransportD.Validate if the designated constraints aren't met.
type TransportDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportDValidationError) ErrorName() string { return "TransportDValidationError" }

// Error satisfies the builtin error interface
func (e TransportDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransportD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportDValidationError{}

// Validate checks the field values on GetTransportsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransportsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransportsResponseMultiError, or nil if none found.
func (m *GetTransportsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransports() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTransportsResponseValidationError{
						field:  fmt.Sprintf("Transports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTransportsResponseValidationError{
						field:  fmt.Sprintf("Transports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTransportsResponseValidationError{
					field:  fmt.Sprintf("Transports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetTransportsResponseMultiError(errors)
	}

	return nil
}

// GetTransportsResponseMultiError is an error wrapping multiple validation
// errors returned by GetTransportsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTransportsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportsResponseMultiError) AllErrors() []error { return m }

// GetTransportsResponseValidationError is the validation error returned by
// GetTransportsResponse.Validate if the designated constraints aren't met.
type GetTransportsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportsResponseValidationError) ErrorName() string {
	return "GetTransportsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportsResponseValidationError{}

// Validate checks the field values on GetTransportsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransportsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransportsRequestMultiError, or nil if none found.
func (m *GetTransportsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetTransportsRequestMultiError(errors)
	}

	return nil
}

// GetTransportsRequestMultiError is an error wrapping multiple validation
// errors returned by GetTransportsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTransportsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportsRequestMultiError) AllErrors() []error { return m }

// GetTransportsRequestValidationError is the validation error returned by
// GetTransportsRequest.Validate if the designated constraints aren't met.
type GetTransportsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportsRequestValidationError) ErrorName() string {
	return "GetTransportsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportsRequestValidationError{}
