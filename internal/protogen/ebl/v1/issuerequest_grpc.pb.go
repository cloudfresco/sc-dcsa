// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ebl/v1/issuerequest.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IssueRequestService_CreateIssueParty_FullMethodName               = "/ebl.v1.IssueRequestService/CreateIssueParty"
	IssueRequestService_UpdateIssueParty_FullMethodName               = "/ebl.v1.IssueRequestService/UpdateIssueParty"
	IssueRequestService_GetIssueParties_FullMethodName                = "/ebl.v1.IssueRequestService/GetIssueParties"
	IssueRequestService_GetIssueParty_FullMethodName                  = "/ebl.v1.IssueRequestService/GetIssueParty"
	IssueRequestService_GetIssuePartyByPk_FullMethodName              = "/ebl.v1.IssueRequestService/GetIssuePartyByPk"
	IssueRequestService_CreateIssuePartySupportingCode_FullMethodName = "/ebl.v1.IssueRequestService/CreateIssuePartySupportingCode"
	IssueRequestService_UpdateIssuePartySupportingCode_FullMethodName = "/ebl.v1.IssueRequestService/UpdateIssuePartySupportingCode"
	IssueRequestService_CreateIssuanceRequest_FullMethodName          = "/ebl.v1.IssueRequestService/CreateIssuanceRequest"
	IssueRequestService_UpdateIssuanceRequest_FullMethodName          = "/ebl.v1.IssueRequestService/UpdateIssuanceRequest"
	IssueRequestService_CreateEblVisualization_FullMethodName         = "/ebl.v1.IssueRequestService/CreateEblVisualization"
	IssueRequestService_UpdateEblVisualization_FullMethodName         = "/ebl.v1.IssueRequestService/UpdateEblVisualization"
)

// IssueRequestServiceClient is the client API for IssueRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The IssueRequestService service definition.
type IssueRequestServiceClient interface {
	CreateIssueParty(ctx context.Context, in *CreateIssuePartyRequest, opts ...grpc.CallOption) (*CreateIssuePartyResponse, error)
	UpdateIssueParty(ctx context.Context, in *UpdateIssuePartyRequest, opts ...grpc.CallOption) (*UpdateIssuePartyResponse, error)
	GetIssueParties(ctx context.Context, in *GetIssuePartiesRequest, opts ...grpc.CallOption) (*GetIssuePartiesResponse, error)
	GetIssueParty(ctx context.Context, in *GetIssuePartyRequest, opts ...grpc.CallOption) (*GetIssuePartyResponse, error)
	GetIssuePartyByPk(ctx context.Context, in *GetIssuePartyByPkRequest, opts ...grpc.CallOption) (*GetIssuePartyByPkResponse, error)
	CreateIssuePartySupportingCode(ctx context.Context, in *CreateIssuePartySupportingCodeRequest, opts ...grpc.CallOption) (*CreateIssuePartySupportingCodeResponse, error)
	UpdateIssuePartySupportingCode(ctx context.Context, in *UpdateIssuePartySupportingCodeRequest, opts ...grpc.CallOption) (*UpdateIssuePartySupportingCodeResponse, error)
	CreateIssuanceRequest(ctx context.Context, in *CreateIssuanceRequestRequest, opts ...grpc.CallOption) (*CreateIssuanceRequestResponse, error)
	UpdateIssuanceRequest(ctx context.Context, in *UpdateIssuanceRequestRequest, opts ...grpc.CallOption) (*UpdateIssuanceRequestResponse, error)
	CreateEblVisualization(ctx context.Context, in *CreateEblVisualizationRequest, opts ...grpc.CallOption) (*CreateEblVisualizationResponse, error)
	UpdateEblVisualization(ctx context.Context, in *UpdateEblVisualizationRequest, opts ...grpc.CallOption) (*UpdateEblVisualizationResponse, error)
}

type issueRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIssueRequestServiceClient(cc grpc.ClientConnInterface) IssueRequestServiceClient {
	return &issueRequestServiceClient{cc}
}

func (c *issueRequestServiceClient) CreateIssueParty(ctx context.Context, in *CreateIssuePartyRequest, opts ...grpc.CallOption) (*CreateIssuePartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIssuePartyResponse)
	err := c.cc.Invoke(ctx, IssueRequestService_CreateIssueParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRequestServiceClient) UpdateIssueParty(ctx context.Context, in *UpdateIssuePartyRequest, opts ...grpc.CallOption) (*UpdateIssuePartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateIssuePartyResponse)
	err := c.cc.Invoke(ctx, IssueRequestService_UpdateIssueParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRequestServiceClient) GetIssueParties(ctx context.Context, in *GetIssuePartiesRequest, opts ...grpc.CallOption) (*GetIssuePartiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIssuePartiesResponse)
	err := c.cc.Invoke(ctx, IssueRequestService_GetIssueParties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRequestServiceClient) GetIssueParty(ctx context.Context, in *GetIssuePartyRequest, opts ...grpc.CallOption) (*GetIssuePartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIssuePartyResponse)
	err := c.cc.Invoke(ctx, IssueRequestService_GetIssueParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRequestServiceClient) GetIssuePartyByPk(ctx context.Context, in *GetIssuePartyByPkRequest, opts ...grpc.CallOption) (*GetIssuePartyByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIssuePartyByPkResponse)
	err := c.cc.Invoke(ctx, IssueRequestService_GetIssuePartyByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRequestServiceClient) CreateIssuePartySupportingCode(ctx context.Context, in *CreateIssuePartySupportingCodeRequest, opts ...grpc.CallOption) (*CreateIssuePartySupportingCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIssuePartySupportingCodeResponse)
	err := c.cc.Invoke(ctx, IssueRequestService_CreateIssuePartySupportingCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRequestServiceClient) UpdateIssuePartySupportingCode(ctx context.Context, in *UpdateIssuePartySupportingCodeRequest, opts ...grpc.CallOption) (*UpdateIssuePartySupportingCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateIssuePartySupportingCodeResponse)
	err := c.cc.Invoke(ctx, IssueRequestService_UpdateIssuePartySupportingCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRequestServiceClient) CreateIssuanceRequest(ctx context.Context, in *CreateIssuanceRequestRequest, opts ...grpc.CallOption) (*CreateIssuanceRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIssuanceRequestResponse)
	err := c.cc.Invoke(ctx, IssueRequestService_CreateIssuanceRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRequestServiceClient) UpdateIssuanceRequest(ctx context.Context, in *UpdateIssuanceRequestRequest, opts ...grpc.CallOption) (*UpdateIssuanceRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateIssuanceRequestResponse)
	err := c.cc.Invoke(ctx, IssueRequestService_UpdateIssuanceRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRequestServiceClient) CreateEblVisualization(ctx context.Context, in *CreateEblVisualizationRequest, opts ...grpc.CallOption) (*CreateEblVisualizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEblVisualizationResponse)
	err := c.cc.Invoke(ctx, IssueRequestService_CreateEblVisualization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRequestServiceClient) UpdateEblVisualization(ctx context.Context, in *UpdateEblVisualizationRequest, opts ...grpc.CallOption) (*UpdateEblVisualizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEblVisualizationResponse)
	err := c.cc.Invoke(ctx, IssueRequestService_UpdateEblVisualization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssueRequestServiceServer is the server API for IssueRequestService service.
// All implementations must embed UnimplementedIssueRequestServiceServer
// for forward compatibility.
//
// The IssueRequestService service definition.
type IssueRequestServiceServer interface {
	CreateIssueParty(context.Context, *CreateIssuePartyRequest) (*CreateIssuePartyResponse, error)
	UpdateIssueParty(context.Context, *UpdateIssuePartyRequest) (*UpdateIssuePartyResponse, error)
	GetIssueParties(context.Context, *GetIssuePartiesRequest) (*GetIssuePartiesResponse, error)
	GetIssueParty(context.Context, *GetIssuePartyRequest) (*GetIssuePartyResponse, error)
	GetIssuePartyByPk(context.Context, *GetIssuePartyByPkRequest) (*GetIssuePartyByPkResponse, error)
	CreateIssuePartySupportingCode(context.Context, *CreateIssuePartySupportingCodeRequest) (*CreateIssuePartySupportingCodeResponse, error)
	UpdateIssuePartySupportingCode(context.Context, *UpdateIssuePartySupportingCodeRequest) (*UpdateIssuePartySupportingCodeResponse, error)
	CreateIssuanceRequest(context.Context, *CreateIssuanceRequestRequest) (*CreateIssuanceRequestResponse, error)
	UpdateIssuanceRequest(context.Context, *UpdateIssuanceRequestRequest) (*UpdateIssuanceRequestResponse, error)
	CreateEblVisualization(context.Context, *CreateEblVisualizationRequest) (*CreateEblVisualizationResponse, error)
	UpdateEblVisualization(context.Context, *UpdateEblVisualizationRequest) (*UpdateEblVisualizationResponse, error)
	mustEmbedUnimplementedIssueRequestServiceServer()
}

// UnimplementedIssueRequestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIssueRequestServiceServer struct{}

func (UnimplementedIssueRequestServiceServer) CreateIssueParty(context.Context, *CreateIssuePartyRequest) (*CreateIssuePartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssueParty not implemented")
}
func (UnimplementedIssueRequestServiceServer) UpdateIssueParty(context.Context, *UpdateIssuePartyRequest) (*UpdateIssuePartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssueParty not implemented")
}
func (UnimplementedIssueRequestServiceServer) GetIssueParties(context.Context, *GetIssuePartiesRequest) (*GetIssuePartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssueParties not implemented")
}
func (UnimplementedIssueRequestServiceServer) GetIssueParty(context.Context, *GetIssuePartyRequest) (*GetIssuePartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssueParty not implemented")
}
func (UnimplementedIssueRequestServiceServer) GetIssuePartyByPk(context.Context, *GetIssuePartyByPkRequest) (*GetIssuePartyByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssuePartyByPk not implemented")
}
func (UnimplementedIssueRequestServiceServer) CreateIssuePartySupportingCode(context.Context, *CreateIssuePartySupportingCodeRequest) (*CreateIssuePartySupportingCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssuePartySupportingCode not implemented")
}
func (UnimplementedIssueRequestServiceServer) UpdateIssuePartySupportingCode(context.Context, *UpdateIssuePartySupportingCodeRequest) (*UpdateIssuePartySupportingCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssuePartySupportingCode not implemented")
}
func (UnimplementedIssueRequestServiceServer) CreateIssuanceRequest(context.Context, *CreateIssuanceRequestRequest) (*CreateIssuanceRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssuanceRequest not implemented")
}
func (UnimplementedIssueRequestServiceServer) UpdateIssuanceRequest(context.Context, *UpdateIssuanceRequestRequest) (*UpdateIssuanceRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssuanceRequest not implemented")
}
func (UnimplementedIssueRequestServiceServer) CreateEblVisualization(context.Context, *CreateEblVisualizationRequest) (*CreateEblVisualizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEblVisualization not implemented")
}
func (UnimplementedIssueRequestServiceServer) UpdateEblVisualization(context.Context, *UpdateEblVisualizationRequest) (*UpdateEblVisualizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEblVisualization not implemented")
}
func (UnimplementedIssueRequestServiceServer) mustEmbedUnimplementedIssueRequestServiceServer() {}
func (UnimplementedIssueRequestServiceServer) testEmbeddedByValue()                             {}

// UnsafeIssueRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IssueRequestServiceServer will
// result in compilation errors.
type UnsafeIssueRequestServiceServer interface {
	mustEmbedUnimplementedIssueRequestServiceServer()
}

func RegisterIssueRequestServiceServer(s grpc.ServiceRegistrar, srv IssueRequestServiceServer) {
	// If the following call pancis, it indicates UnimplementedIssueRequestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IssueRequestService_ServiceDesc, srv)
}

func _IssueRequestService_CreateIssueParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIssuePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRequestServiceServer).CreateIssueParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueRequestService_CreateIssueParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRequestServiceServer).CreateIssueParty(ctx, req.(*CreateIssuePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRequestService_UpdateIssueParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIssuePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRequestServiceServer).UpdateIssueParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueRequestService_UpdateIssueParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRequestServiceServer).UpdateIssueParty(ctx, req.(*UpdateIssuePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRequestService_GetIssueParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssuePartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRequestServiceServer).GetIssueParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueRequestService_GetIssueParties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRequestServiceServer).GetIssueParties(ctx, req.(*GetIssuePartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRequestService_GetIssueParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssuePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRequestServiceServer).GetIssueParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueRequestService_GetIssueParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRequestServiceServer).GetIssueParty(ctx, req.(*GetIssuePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRequestService_GetIssuePartyByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssuePartyByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRequestServiceServer).GetIssuePartyByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueRequestService_GetIssuePartyByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRequestServiceServer).GetIssuePartyByPk(ctx, req.(*GetIssuePartyByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRequestService_CreateIssuePartySupportingCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIssuePartySupportingCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRequestServiceServer).CreateIssuePartySupportingCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueRequestService_CreateIssuePartySupportingCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRequestServiceServer).CreateIssuePartySupportingCode(ctx, req.(*CreateIssuePartySupportingCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRequestService_UpdateIssuePartySupportingCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIssuePartySupportingCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRequestServiceServer).UpdateIssuePartySupportingCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueRequestService_UpdateIssuePartySupportingCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRequestServiceServer).UpdateIssuePartySupportingCode(ctx, req.(*UpdateIssuePartySupportingCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRequestService_CreateIssuanceRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIssuanceRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRequestServiceServer).CreateIssuanceRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueRequestService_CreateIssuanceRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRequestServiceServer).CreateIssuanceRequest(ctx, req.(*CreateIssuanceRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRequestService_UpdateIssuanceRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIssuanceRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRequestServiceServer).UpdateIssuanceRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueRequestService_UpdateIssuanceRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRequestServiceServer).UpdateIssuanceRequest(ctx, req.(*UpdateIssuanceRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRequestService_CreateEblVisualization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEblVisualizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRequestServiceServer).CreateEblVisualization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueRequestService_CreateEblVisualization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRequestServiceServer).CreateEblVisualization(ctx, req.(*CreateEblVisualizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRequestService_UpdateEblVisualization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEblVisualizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRequestServiceServer).UpdateEblVisualization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueRequestService_UpdateEblVisualization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRequestServiceServer).UpdateEblVisualization(ctx, req.(*UpdateEblVisualizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IssueRequestService_ServiceDesc is the grpc.ServiceDesc for IssueRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IssueRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ebl.v1.IssueRequestService",
	HandlerType: (*IssueRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIssueParty",
			Handler:    _IssueRequestService_CreateIssueParty_Handler,
		},
		{
			MethodName: "UpdateIssueParty",
			Handler:    _IssueRequestService_UpdateIssueParty_Handler,
		},
		{
			MethodName: "GetIssueParties",
			Handler:    _IssueRequestService_GetIssueParties_Handler,
		},
		{
			MethodName: "GetIssueParty",
			Handler:    _IssueRequestService_GetIssueParty_Handler,
		},
		{
			MethodName: "GetIssuePartyByPk",
			Handler:    _IssueRequestService_GetIssuePartyByPk_Handler,
		},
		{
			MethodName: "CreateIssuePartySupportingCode",
			Handler:    _IssueRequestService_CreateIssuePartySupportingCode_Handler,
		},
		{
			MethodName: "UpdateIssuePartySupportingCode",
			Handler:    _IssueRequestService_UpdateIssuePartySupportingCode_Handler,
		},
		{
			MethodName: "CreateIssuanceRequest",
			Handler:    _IssueRequestService_CreateIssuanceRequest_Handler,
		},
		{
			MethodName: "UpdateIssuanceRequest",
			Handler:    _IssueRequestService_UpdateIssuanceRequest_Handler,
		},
		{
			MethodName: "CreateEblVisualization",
			Handler:    _IssueRequestService_CreateEblVisualization_Handler,
		},
		{
			MethodName: "UpdateEblVisualization",
			Handler:    _IssueRequestService_UpdateEblVisualization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ebl/v1/issuerequest.proto",
}
