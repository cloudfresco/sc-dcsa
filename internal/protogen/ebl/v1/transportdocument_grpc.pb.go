// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ebl/v1/transportdocument.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransportDocumentService_CreateTransportDocument_FullMethodName                          = "/ebl.v1.TransportDocumentService/CreateTransportDocument"
	TransportDocumentService_CreateTransportDocumentFromShippingInstructionTO_FullMethodName = "/ebl.v1.TransportDocumentService/CreateTransportDocumentFromShippingInstructionTO"
	TransportDocumentService_GetTransportDocuments_FullMethodName                            = "/ebl.v1.TransportDocumentService/GetTransportDocuments"
	TransportDocumentService_FindTransportDocumentById_FullMethodName                        = "/ebl.v1.TransportDocumentService/FindTransportDocumentById"
	TransportDocumentService_GetTransportDocumentByPk_FullMethodName                         = "/ebl.v1.TransportDocumentService/GetTransportDocumentByPk"
	TransportDocumentService_FindByTransportDocumentReference_FullMethodName                 = "/ebl.v1.TransportDocumentService/FindByTransportDocumentReference"
	TransportDocumentService_ApproveTransportDocument_FullMethodName                         = "/ebl.v1.TransportDocumentService/ApproveTransportDocument"
	TransportDocumentService_CreateTransportDocumentSummary_FullMethodName                   = "/ebl.v1.TransportDocumentService/CreateTransportDocumentSummary"
	TransportDocumentService_GetTransportDocumentSummaries_FullMethodName                    = "/ebl.v1.TransportDocumentService/GetTransportDocumentSummaries"
	TransportDocumentService_GetTransportDocumentSummaryByPk_FullMethodName                  = "/ebl.v1.TransportDocumentService/GetTransportDocumentSummaryByPk"
)

// TransportDocumentServiceClient is the client API for TransportDocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The TransportDocumentService service definition.
type TransportDocumentServiceClient interface {
	CreateTransportDocument(ctx context.Context, in *CreateTransportDocumentRequest, opts ...grpc.CallOption) (*CreateTransportDocumentResponse, error)
	CreateTransportDocumentFromShippingInstructionTO(ctx context.Context, in *CreateTransportDocumentFromShippingInstructionTORequest, opts ...grpc.CallOption) (*CreateTransportDocumentFromShippingInstructionTOResponse, error)
	GetTransportDocuments(ctx context.Context, in *GetTransportDocumentsRequest, opts ...grpc.CallOption) (*GetTransportDocumentsResponse, error)
	FindTransportDocumentById(ctx context.Context, in *FindTransportDocumentByIdRequest, opts ...grpc.CallOption) (*FindTransportDocumentByIdResponse, error)
	GetTransportDocumentByPk(ctx context.Context, in *GetTransportDocumentByPkRequest, opts ...grpc.CallOption) (*GetTransportDocumentByPkResponse, error)
	FindByTransportDocumentReference(ctx context.Context, in *FindByTransportDocumentReferenceRequest, opts ...grpc.CallOption) (*FindByTransportDocumentReferenceResponse, error)
	ApproveTransportDocument(ctx context.Context, in *ApproveTransportDocumentRequest, opts ...grpc.CallOption) (*ApproveTransportDocumentResponse, error)
	CreateTransportDocumentSummary(ctx context.Context, in *CreateTransportDocumentSummaryRequest, opts ...grpc.CallOption) (*CreateTransportDocumentSummaryResponse, error)
	GetTransportDocumentSummaries(ctx context.Context, in *GetTransportDocumentSummariesRequest, opts ...grpc.CallOption) (*GetTransportDocumentSummariesResponse, error)
	GetTransportDocumentSummaryByPk(ctx context.Context, in *GetTransportDocumentSummaryByPkRequest, opts ...grpc.CallOption) (*GetTransportDocumentSummaryByPkResponse, error)
}

type transportDocumentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportDocumentServiceClient(cc grpc.ClientConnInterface) TransportDocumentServiceClient {
	return &transportDocumentServiceClient{cc}
}

func (c *transportDocumentServiceClient) CreateTransportDocument(ctx context.Context, in *CreateTransportDocumentRequest, opts ...grpc.CallOption) (*CreateTransportDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransportDocumentResponse)
	err := c.cc.Invoke(ctx, TransportDocumentService_CreateTransportDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportDocumentServiceClient) CreateTransportDocumentFromShippingInstructionTO(ctx context.Context, in *CreateTransportDocumentFromShippingInstructionTORequest, opts ...grpc.CallOption) (*CreateTransportDocumentFromShippingInstructionTOResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransportDocumentFromShippingInstructionTOResponse)
	err := c.cc.Invoke(ctx, TransportDocumentService_CreateTransportDocumentFromShippingInstructionTO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportDocumentServiceClient) GetTransportDocuments(ctx context.Context, in *GetTransportDocumentsRequest, opts ...grpc.CallOption) (*GetTransportDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransportDocumentsResponse)
	err := c.cc.Invoke(ctx, TransportDocumentService_GetTransportDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportDocumentServiceClient) FindTransportDocumentById(ctx context.Context, in *FindTransportDocumentByIdRequest, opts ...grpc.CallOption) (*FindTransportDocumentByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindTransportDocumentByIdResponse)
	err := c.cc.Invoke(ctx, TransportDocumentService_FindTransportDocumentById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportDocumentServiceClient) GetTransportDocumentByPk(ctx context.Context, in *GetTransportDocumentByPkRequest, opts ...grpc.CallOption) (*GetTransportDocumentByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransportDocumentByPkResponse)
	err := c.cc.Invoke(ctx, TransportDocumentService_GetTransportDocumentByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportDocumentServiceClient) FindByTransportDocumentReference(ctx context.Context, in *FindByTransportDocumentReferenceRequest, opts ...grpc.CallOption) (*FindByTransportDocumentReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByTransportDocumentReferenceResponse)
	err := c.cc.Invoke(ctx, TransportDocumentService_FindByTransportDocumentReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportDocumentServiceClient) ApproveTransportDocument(ctx context.Context, in *ApproveTransportDocumentRequest, opts ...grpc.CallOption) (*ApproveTransportDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveTransportDocumentResponse)
	err := c.cc.Invoke(ctx, TransportDocumentService_ApproveTransportDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportDocumentServiceClient) CreateTransportDocumentSummary(ctx context.Context, in *CreateTransportDocumentSummaryRequest, opts ...grpc.CallOption) (*CreateTransportDocumentSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransportDocumentSummaryResponse)
	err := c.cc.Invoke(ctx, TransportDocumentService_CreateTransportDocumentSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportDocumentServiceClient) GetTransportDocumentSummaries(ctx context.Context, in *GetTransportDocumentSummariesRequest, opts ...grpc.CallOption) (*GetTransportDocumentSummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransportDocumentSummariesResponse)
	err := c.cc.Invoke(ctx, TransportDocumentService_GetTransportDocumentSummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportDocumentServiceClient) GetTransportDocumentSummaryByPk(ctx context.Context, in *GetTransportDocumentSummaryByPkRequest, opts ...grpc.CallOption) (*GetTransportDocumentSummaryByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransportDocumentSummaryByPkResponse)
	err := c.cc.Invoke(ctx, TransportDocumentService_GetTransportDocumentSummaryByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportDocumentServiceServer is the server API for TransportDocumentService service.
// All implementations must embed UnimplementedTransportDocumentServiceServer
// for forward compatibility.
//
// The TransportDocumentService service definition.
type TransportDocumentServiceServer interface {
	CreateTransportDocument(context.Context, *CreateTransportDocumentRequest) (*CreateTransportDocumentResponse, error)
	CreateTransportDocumentFromShippingInstructionTO(context.Context, *CreateTransportDocumentFromShippingInstructionTORequest) (*CreateTransportDocumentFromShippingInstructionTOResponse, error)
	GetTransportDocuments(context.Context, *GetTransportDocumentsRequest) (*GetTransportDocumentsResponse, error)
	FindTransportDocumentById(context.Context, *FindTransportDocumentByIdRequest) (*FindTransportDocumentByIdResponse, error)
	GetTransportDocumentByPk(context.Context, *GetTransportDocumentByPkRequest) (*GetTransportDocumentByPkResponse, error)
	FindByTransportDocumentReference(context.Context, *FindByTransportDocumentReferenceRequest) (*FindByTransportDocumentReferenceResponse, error)
	ApproveTransportDocument(context.Context, *ApproveTransportDocumentRequest) (*ApproveTransportDocumentResponse, error)
	CreateTransportDocumentSummary(context.Context, *CreateTransportDocumentSummaryRequest) (*CreateTransportDocumentSummaryResponse, error)
	GetTransportDocumentSummaries(context.Context, *GetTransportDocumentSummariesRequest) (*GetTransportDocumentSummariesResponse, error)
	GetTransportDocumentSummaryByPk(context.Context, *GetTransportDocumentSummaryByPkRequest) (*GetTransportDocumentSummaryByPkResponse, error)
	mustEmbedUnimplementedTransportDocumentServiceServer()
}

// UnimplementedTransportDocumentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransportDocumentServiceServer struct{}

func (UnimplementedTransportDocumentServiceServer) CreateTransportDocument(context.Context, *CreateTransportDocumentRequest) (*CreateTransportDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransportDocument not implemented")
}
func (UnimplementedTransportDocumentServiceServer) CreateTransportDocumentFromShippingInstructionTO(context.Context, *CreateTransportDocumentFromShippingInstructionTORequest) (*CreateTransportDocumentFromShippingInstructionTOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransportDocumentFromShippingInstructionTO not implemented")
}
func (UnimplementedTransportDocumentServiceServer) GetTransportDocuments(context.Context, *GetTransportDocumentsRequest) (*GetTransportDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransportDocuments not implemented")
}
func (UnimplementedTransportDocumentServiceServer) FindTransportDocumentById(context.Context, *FindTransportDocumentByIdRequest) (*FindTransportDocumentByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTransportDocumentById not implemented")
}
func (UnimplementedTransportDocumentServiceServer) GetTransportDocumentByPk(context.Context, *GetTransportDocumentByPkRequest) (*GetTransportDocumentByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransportDocumentByPk not implemented")
}
func (UnimplementedTransportDocumentServiceServer) FindByTransportDocumentReference(context.Context, *FindByTransportDocumentReferenceRequest) (*FindByTransportDocumentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTransportDocumentReference not implemented")
}
func (UnimplementedTransportDocumentServiceServer) ApproveTransportDocument(context.Context, *ApproveTransportDocumentRequest) (*ApproveTransportDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveTransportDocument not implemented")
}
func (UnimplementedTransportDocumentServiceServer) CreateTransportDocumentSummary(context.Context, *CreateTransportDocumentSummaryRequest) (*CreateTransportDocumentSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransportDocumentSummary not implemented")
}
func (UnimplementedTransportDocumentServiceServer) GetTransportDocumentSummaries(context.Context, *GetTransportDocumentSummariesRequest) (*GetTransportDocumentSummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransportDocumentSummaries not implemented")
}
func (UnimplementedTransportDocumentServiceServer) GetTransportDocumentSummaryByPk(context.Context, *GetTransportDocumentSummaryByPkRequest) (*GetTransportDocumentSummaryByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransportDocumentSummaryByPk not implemented")
}
func (UnimplementedTransportDocumentServiceServer) mustEmbedUnimplementedTransportDocumentServiceServer() {
}
func (UnimplementedTransportDocumentServiceServer) testEmbeddedByValue() {}

// UnsafeTransportDocumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportDocumentServiceServer will
// result in compilation errors.
type UnsafeTransportDocumentServiceServer interface {
	mustEmbedUnimplementedTransportDocumentServiceServer()
}

func RegisterTransportDocumentServiceServer(s grpc.ServiceRegistrar, srv TransportDocumentServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransportDocumentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransportDocumentService_ServiceDesc, srv)
}

func _TransportDocumentService_CreateTransportDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransportDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportDocumentServiceServer).CreateTransportDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportDocumentService_CreateTransportDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportDocumentServiceServer).CreateTransportDocument(ctx, req.(*CreateTransportDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportDocumentService_CreateTransportDocumentFromShippingInstructionTO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransportDocumentFromShippingInstructionTORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportDocumentServiceServer).CreateTransportDocumentFromShippingInstructionTO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportDocumentService_CreateTransportDocumentFromShippingInstructionTO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportDocumentServiceServer).CreateTransportDocumentFromShippingInstructionTO(ctx, req.(*CreateTransportDocumentFromShippingInstructionTORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportDocumentService_GetTransportDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransportDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportDocumentServiceServer).GetTransportDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportDocumentService_GetTransportDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportDocumentServiceServer).GetTransportDocuments(ctx, req.(*GetTransportDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportDocumentService_FindTransportDocumentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTransportDocumentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportDocumentServiceServer).FindTransportDocumentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportDocumentService_FindTransportDocumentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportDocumentServiceServer).FindTransportDocumentById(ctx, req.(*FindTransportDocumentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportDocumentService_GetTransportDocumentByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransportDocumentByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportDocumentServiceServer).GetTransportDocumentByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportDocumentService_GetTransportDocumentByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportDocumentServiceServer).GetTransportDocumentByPk(ctx, req.(*GetTransportDocumentByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportDocumentService_FindByTransportDocumentReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByTransportDocumentReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportDocumentServiceServer).FindByTransportDocumentReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportDocumentService_FindByTransportDocumentReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportDocumentServiceServer).FindByTransportDocumentReference(ctx, req.(*FindByTransportDocumentReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportDocumentService_ApproveTransportDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveTransportDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportDocumentServiceServer).ApproveTransportDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportDocumentService_ApproveTransportDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportDocumentServiceServer).ApproveTransportDocument(ctx, req.(*ApproveTransportDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportDocumentService_CreateTransportDocumentSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransportDocumentSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportDocumentServiceServer).CreateTransportDocumentSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportDocumentService_CreateTransportDocumentSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportDocumentServiceServer).CreateTransportDocumentSummary(ctx, req.(*CreateTransportDocumentSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportDocumentService_GetTransportDocumentSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransportDocumentSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportDocumentServiceServer).GetTransportDocumentSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportDocumentService_GetTransportDocumentSummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportDocumentServiceServer).GetTransportDocumentSummaries(ctx, req.(*GetTransportDocumentSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportDocumentService_GetTransportDocumentSummaryByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransportDocumentSummaryByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportDocumentServiceServer).GetTransportDocumentSummaryByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportDocumentService_GetTransportDocumentSummaryByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportDocumentServiceServer).GetTransportDocumentSummaryByPk(ctx, req.(*GetTransportDocumentSummaryByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransportDocumentService_ServiceDesc is the grpc.ServiceDesc for TransportDocumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportDocumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ebl.v1.TransportDocumentService",
	HandlerType: (*TransportDocumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransportDocument",
			Handler:    _TransportDocumentService_CreateTransportDocument_Handler,
		},
		{
			MethodName: "CreateTransportDocumentFromShippingInstructionTO",
			Handler:    _TransportDocumentService_CreateTransportDocumentFromShippingInstructionTO_Handler,
		},
		{
			MethodName: "GetTransportDocuments",
			Handler:    _TransportDocumentService_GetTransportDocuments_Handler,
		},
		{
			MethodName: "FindTransportDocumentById",
			Handler:    _TransportDocumentService_FindTransportDocumentById_Handler,
		},
		{
			MethodName: "GetTransportDocumentByPk",
			Handler:    _TransportDocumentService_GetTransportDocumentByPk_Handler,
		},
		{
			MethodName: "FindByTransportDocumentReference",
			Handler:    _TransportDocumentService_FindByTransportDocumentReference_Handler,
		},
		{
			MethodName: "ApproveTransportDocument",
			Handler:    _TransportDocumentService_ApproveTransportDocument_Handler,
		},
		{
			MethodName: "CreateTransportDocumentSummary",
			Handler:    _TransportDocumentService_CreateTransportDocumentSummary_Handler,
		},
		{
			MethodName: "GetTransportDocumentSummaries",
			Handler:    _TransportDocumentService_GetTransportDocumentSummaries_Handler,
		},
		{
			MethodName: "GetTransportDocumentSummaryByPk",
			Handler:    _TransportDocumentService_GetTransportDocumentSummaryByPk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ebl/v1/transportdocument.proto",
}
