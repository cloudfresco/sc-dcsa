// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: ebl/v1/shippinginstruction.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v2 "github.com/cloudfresco/sc-dcsa/internal/protogen/bkg/v2"
	v11 "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	v1 "github.com/cloudfresco/sc-dcsa/internal/protogen/eventcore/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateShippingInstructionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShippingInstructionReference    string                                        `protobuf:"bytes,1,opt,name=shipping_instruction_reference,json=shippingInstructionReference,proto3" json:"shipping_instruction_reference,omitempty"`
	DocumentStatus                  string                                        `protobuf:"bytes,2,opt,name=document_status,json=documentStatus,proto3" json:"document_status,omitempty"`
	IsShippedOnboardType            bool                                          `protobuf:"varint,3,opt,name=is_shipped_onboard_type,json=isShippedOnboardType,proto3" json:"is_shipped_onboard_type,omitempty"`
	NumberOfCopies                  uint32                                        `protobuf:"varint,4,opt,name=number_of_copies,json=numberOfCopies,proto3" json:"number_of_copies,omitempty"`
	NumberOfOriginals               uint32                                        `protobuf:"varint,5,opt,name=number_of_originals,json=numberOfOriginals,proto3" json:"number_of_originals,omitempty"`
	IsElectronic                    bool                                          `protobuf:"varint,6,opt,name=is_electronic,json=isElectronic,proto3" json:"is_electronic,omitempty"`
	IsToOrder                       bool                                          `protobuf:"varint,7,opt,name=is_to_order,json=isToOrder,proto3" json:"is_to_order,omitempty"`
	AreChargesDisplayedOnOriginals  bool                                          `protobuf:"varint,8,opt,name=are_charges_displayed_on_originals,json=areChargesDisplayedOnOriginals,proto3" json:"are_charges_displayed_on_originals,omitempty"`
	AreChargesDisplayedOnCopies     bool                                          `protobuf:"varint,9,opt,name=are_charges_displayed_on_copies,json=areChargesDisplayedOnCopies,proto3" json:"are_charges_displayed_on_copies,omitempty"`
	LocationId                      uint32                                        `protobuf:"varint,10,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	TransportDocumentTypeCode       string                                        `protobuf:"bytes,11,opt,name=transport_document_type_code,json=transportDocumentTypeCode,proto3" json:"transport_document_type_code,omitempty"`
	DisplayedNameForPlaceOfReceipt  string                                        `protobuf:"bytes,12,opt,name=displayed_name_for_place_of_receipt,json=displayedNameForPlaceOfReceipt,proto3" json:"displayed_name_for_place_of_receipt,omitempty"`
	DisplayedNameForPortOfLoad      string                                        `protobuf:"bytes,13,opt,name=displayed_name_for_port_of_load,json=displayedNameForPortOfLoad,proto3" json:"displayed_name_for_port_of_load,omitempty"`
	DisplayedNameForPortOfDischarge string                                        `protobuf:"bytes,14,opt,name=displayed_name_for_port_of_discharge,json=displayedNameForPortOfDischarge,proto3" json:"displayed_name_for_port_of_discharge,omitempty"`
	DisplayedNameForPlaceOfDelivery string                                        `protobuf:"bytes,15,opt,name=displayed_name_for_place_of_delivery,json=displayedNameForPlaceOfDelivery,proto3" json:"displayed_name_for_place_of_delivery,omitempty"`
	AmendToTransportDocument        string                                        `protobuf:"bytes,16,opt,name=amend_to_transport_document,json=amendToTransportDocument,proto3" json:"amend_to_transport_document,omitempty"`
	CreatedDateTime                 string                                        `protobuf:"bytes,17,opt,name=created_date_time,json=createdDateTime,proto3" json:"created_date_time,omitempty"`
	UpdatedDateTime                 string                                        `protobuf:"bytes,18,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	UserId                          string                                        `protobuf:"bytes,19,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                       string                                        `protobuf:"bytes,20,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                       string                                        `protobuf:"bytes,21,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	References                      []*v2.CreateReferenceRequest                  `protobuf:"bytes,22,rep,name=references,proto3" json:"references,omitempty"`
	UtilizedTransportEquipments     []*v1.CreateUtilizedTransportEquipmentRequest `protobuf:"bytes,23,rep,name=utilized_transport_equipments,json=utilizedTransportEquipments,proto3" json:"utilized_transport_equipments,omitempty"`
	ConsignmentItems                []*CreateConsignmentItemRequest               `protobuf:"bytes,24,rep,name=consignment_items,json=consignmentItems,proto3" json:"consignment_items,omitempty"`
}

func (x *CreateShippingInstructionRequest) Reset() {
	*x = CreateShippingInstructionRequest{}
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShippingInstructionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShippingInstructionRequest) ProtoMessage() {}

func (x *CreateShippingInstructionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShippingInstructionRequest.ProtoReflect.Descriptor instead.
func (*CreateShippingInstructionRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_shippinginstruction_proto_rawDescGZIP(), []int{0}
}

func (x *CreateShippingInstructionRequest) GetShippingInstructionReference() string {
	if x != nil {
		return x.ShippingInstructionReference
	}
	return ""
}

func (x *CreateShippingInstructionRequest) GetDocumentStatus() string {
	if x != nil {
		return x.DocumentStatus
	}
	return ""
}

func (x *CreateShippingInstructionRequest) GetIsShippedOnboardType() bool {
	if x != nil {
		return x.IsShippedOnboardType
	}
	return false
}

func (x *CreateShippingInstructionRequest) GetNumberOfCopies() uint32 {
	if x != nil {
		return x.NumberOfCopies
	}
	return 0
}

func (x *CreateShippingInstructionRequest) GetNumberOfOriginals() uint32 {
	if x != nil {
		return x.NumberOfOriginals
	}
	return 0
}

func (x *CreateShippingInstructionRequest) GetIsElectronic() bool {
	if x != nil {
		return x.IsElectronic
	}
	return false
}

func (x *CreateShippingInstructionRequest) GetIsToOrder() bool {
	if x != nil {
		return x.IsToOrder
	}
	return false
}

func (x *CreateShippingInstructionRequest) GetAreChargesDisplayedOnOriginals() bool {
	if x != nil {
		return x.AreChargesDisplayedOnOriginals
	}
	return false
}

func (x *CreateShippingInstructionRequest) GetAreChargesDisplayedOnCopies() bool {
	if x != nil {
		return x.AreChargesDisplayedOnCopies
	}
	return false
}

func (x *CreateShippingInstructionRequest) GetLocationId() uint32 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *CreateShippingInstructionRequest) GetTransportDocumentTypeCode() string {
	if x != nil {
		return x.TransportDocumentTypeCode
	}
	return ""
}

func (x *CreateShippingInstructionRequest) GetDisplayedNameForPlaceOfReceipt() string {
	if x != nil {
		return x.DisplayedNameForPlaceOfReceipt
	}
	return ""
}

func (x *CreateShippingInstructionRequest) GetDisplayedNameForPortOfLoad() string {
	if x != nil {
		return x.DisplayedNameForPortOfLoad
	}
	return ""
}

func (x *CreateShippingInstructionRequest) GetDisplayedNameForPortOfDischarge() string {
	if x != nil {
		return x.DisplayedNameForPortOfDischarge
	}
	return ""
}

func (x *CreateShippingInstructionRequest) GetDisplayedNameForPlaceOfDelivery() string {
	if x != nil {
		return x.DisplayedNameForPlaceOfDelivery
	}
	return ""
}

func (x *CreateShippingInstructionRequest) GetAmendToTransportDocument() string {
	if x != nil {
		return x.AmendToTransportDocument
	}
	return ""
}

func (x *CreateShippingInstructionRequest) GetCreatedDateTime() string {
	if x != nil {
		return x.CreatedDateTime
	}
	return ""
}

func (x *CreateShippingInstructionRequest) GetUpdatedDateTime() string {
	if x != nil {
		return x.UpdatedDateTime
	}
	return ""
}

func (x *CreateShippingInstructionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateShippingInstructionRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateShippingInstructionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateShippingInstructionRequest) GetReferences() []*v2.CreateReferenceRequest {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *CreateShippingInstructionRequest) GetUtilizedTransportEquipments() []*v1.CreateUtilizedTransportEquipmentRequest {
	if x != nil {
		return x.UtilizedTransportEquipments
	}
	return nil
}

func (x *CreateShippingInstructionRequest) GetConsignmentItems() []*CreateConsignmentItemRequest {
	if x != nil {
		return x.ConsignmentItems
	}
	return nil
}

type CreateShippingInstructionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShippingInstruction *ShippingInstruction `protobuf:"bytes,1,opt,name=shipping_instruction,json=shippingInstruction,proto3" json:"shipping_instruction,omitempty"`
}

func (x *CreateShippingInstructionResponse) Reset() {
	*x = CreateShippingInstructionResponse{}
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShippingInstructionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShippingInstructionResponse) ProtoMessage() {}

func (x *CreateShippingInstructionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShippingInstructionResponse.ProtoReflect.Descriptor instead.
func (*CreateShippingInstructionResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_shippinginstruction_proto_rawDescGZIP(), []int{1}
}

func (x *CreateShippingInstructionResponse) GetShippingInstruction() *ShippingInstruction {
	if x != nil {
		return x.ShippingInstruction
	}
	return nil
}

type GetShippingInstructionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShippingInstructions []*ShippingInstruction `protobuf:"bytes,1,rep,name=shipping_instructions,json=shippingInstructions,proto3" json:"shipping_instructions,omitempty"`
	NextCursor           string                 `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetShippingInstructionsResponse) Reset() {
	*x = GetShippingInstructionsResponse{}
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShippingInstructionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShippingInstructionsResponse) ProtoMessage() {}

func (x *GetShippingInstructionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShippingInstructionsResponse.ProtoReflect.Descriptor instead.
func (*GetShippingInstructionsResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_shippinginstruction_proto_rawDescGZIP(), []int{2}
}

func (x *GetShippingInstructionsResponse) GetShippingInstructions() []*ShippingInstruction {
	if x != nil {
		return x.ShippingInstructions
	}
	return nil
}

func (x *GetShippingInstructionsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetShippingInstructionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetShippingInstructionsRequest) Reset() {
	*x = GetShippingInstructionsRequest{}
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShippingInstructionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShippingInstructionsRequest) ProtoMessage() {}

func (x *GetShippingInstructionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShippingInstructionsRequest.ProtoReflect.Descriptor instead.
func (*GetShippingInstructionsRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_shippinginstruction_proto_rawDescGZIP(), []int{3}
}

func (x *GetShippingInstructionsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetShippingInstructionsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetShippingInstructionsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetShippingInstructionsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type FindByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v11.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *FindByIdRequest) Reset() {
	*x = FindByIdRequest{}
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByIdRequest) ProtoMessage() {}

func (x *FindByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByIdRequest.ProtoReflect.Descriptor instead.
func (*FindByIdRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_shippinginstruction_proto_rawDescGZIP(), []int{4}
}

func (x *FindByIdRequest) GetGetRequest() *v11.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type FindByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShippingInstruction *ShippingInstruction `protobuf:"bytes,1,opt,name=shipping_instruction,json=shippingInstruction,proto3" json:"shipping_instruction,omitempty"`
}

func (x *FindByIdResponse) Reset() {
	*x = FindByIdResponse{}
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByIdResponse) ProtoMessage() {}

func (x *FindByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByIdResponse.ProtoReflect.Descriptor instead.
func (*FindByIdResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_shippinginstruction_proto_rawDescGZIP(), []int{5}
}

func (x *FindByIdResponse) GetShippingInstruction() *ShippingInstruction {
	if x != nil {
		return x.ShippingInstruction
	}
	return nil
}

type GetShippingInstructionByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v11.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetShippingInstructionByPkRequest) Reset() {
	*x = GetShippingInstructionByPkRequest{}
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShippingInstructionByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShippingInstructionByPkRequest) ProtoMessage() {}

func (x *GetShippingInstructionByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShippingInstructionByPkRequest.ProtoReflect.Descriptor instead.
func (*GetShippingInstructionByPkRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_shippinginstruction_proto_rawDescGZIP(), []int{6}
}

func (x *GetShippingInstructionByPkRequest) GetGetByIdRequest() *v11.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetShippingInstructionByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShippingInstruction *ShippingInstruction `protobuf:"bytes,1,opt,name=shipping_instruction,json=shippingInstruction,proto3" json:"shipping_instruction,omitempty"`
}

func (x *GetShippingInstructionByPkResponse) Reset() {
	*x = GetShippingInstructionByPkResponse{}
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShippingInstructionByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShippingInstructionByPkResponse) ProtoMessage() {}

func (x *GetShippingInstructionByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShippingInstructionByPkResponse.ProtoReflect.Descriptor instead.
func (*GetShippingInstructionByPkResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_shippinginstruction_proto_rawDescGZIP(), []int{7}
}

func (x *GetShippingInstructionByPkResponse) GetShippingInstruction() *ShippingInstruction {
	if x != nil {
		return x.ShippingInstruction
	}
	return nil
}

type FindByReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShippingInstructionReference string `protobuf:"bytes,1,opt,name=shipping_instruction_reference,json=shippingInstructionReference,proto3" json:"shipping_instruction_reference,omitempty"`
	UserEmail                    string `protobuf:"bytes,2,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                    string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *FindByReferenceRequest) Reset() {
	*x = FindByReferenceRequest{}
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindByReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByReferenceRequest) ProtoMessage() {}

func (x *FindByReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByReferenceRequest.ProtoReflect.Descriptor instead.
func (*FindByReferenceRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_shippinginstruction_proto_rawDescGZIP(), []int{8}
}

func (x *FindByReferenceRequest) GetShippingInstructionReference() string {
	if x != nil {
		return x.ShippingInstructionReference
	}
	return ""
}

func (x *FindByReferenceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *FindByReferenceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type FindByReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShippingInstruction *ShippingInstruction `protobuf:"bytes,1,opt,name=shipping_instruction,json=shippingInstruction,proto3" json:"shipping_instruction,omitempty"`
}

func (x *FindByReferenceResponse) Reset() {
	*x = FindByReferenceResponse{}
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindByReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByReferenceResponse) ProtoMessage() {}

func (x *FindByReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByReferenceResponse.ProtoReflect.Descriptor instead.
func (*FindByReferenceResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_shippinginstruction_proto_rawDescGZIP(), []int{9}
}

func (x *FindByReferenceResponse) GetShippingInstruction() *ShippingInstruction {
	if x != nil {
		return x.ShippingInstruction
	}
	return nil
}

type UpdateShippingInstructionByShippingInstructionReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShippingInstructionReference   string `protobuf:"bytes,1,opt,name=shipping_instruction_reference,json=shippingInstructionReference,proto3" json:"shipping_instruction_reference,omitempty"`
	DocumentStatus                 string `protobuf:"bytes,2,opt,name=document_status,json=documentStatus,proto3" json:"document_status,omitempty"`
	TransportDocumentTypeCode      string `protobuf:"bytes,3,opt,name=transport_document_type_code,json=transportDocumentTypeCode,proto3" json:"transport_document_type_code,omitempty"`
	DisplayedNameForPlaceOfReceipt string `protobuf:"bytes,4,opt,name=displayed_name_for_place_of_receipt,json=displayedNameForPlaceOfReceipt,proto3" json:"displayed_name_for_place_of_receipt,omitempty"`
	UserId                         string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                      string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                      string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateShippingInstructionByShippingInstructionReferenceRequest) Reset() {
	*x = UpdateShippingInstructionByShippingInstructionReferenceRequest{}
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShippingInstructionByShippingInstructionReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShippingInstructionByShippingInstructionReferenceRequest) ProtoMessage() {}

func (x *UpdateShippingInstructionByShippingInstructionReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShippingInstructionByShippingInstructionReferenceRequest.ProtoReflect.Descriptor instead.
func (*UpdateShippingInstructionByShippingInstructionReferenceRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_shippinginstruction_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateShippingInstructionByShippingInstructionReferenceRequest) GetShippingInstructionReference() string {
	if x != nil {
		return x.ShippingInstructionReference
	}
	return ""
}

func (x *UpdateShippingInstructionByShippingInstructionReferenceRequest) GetDocumentStatus() string {
	if x != nil {
		return x.DocumentStatus
	}
	return ""
}

func (x *UpdateShippingInstructionByShippingInstructionReferenceRequest) GetTransportDocumentTypeCode() string {
	if x != nil {
		return x.TransportDocumentTypeCode
	}
	return ""
}

func (x *UpdateShippingInstructionByShippingInstructionReferenceRequest) GetDisplayedNameForPlaceOfReceipt() string {
	if x != nil {
		return x.DisplayedNameForPlaceOfReceipt
	}
	return ""
}

func (x *UpdateShippingInstructionByShippingInstructionReferenceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateShippingInstructionByShippingInstructionReferenceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateShippingInstructionByShippingInstructionReferenceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateShippingInstructionByShippingInstructionReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateShippingInstructionByShippingInstructionReferenceResponse) Reset() {
	*x = UpdateShippingInstructionByShippingInstructionReferenceResponse{}
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShippingInstructionByShippingInstructionReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShippingInstructionByShippingInstructionReferenceResponse) ProtoMessage() {}

func (x *UpdateShippingInstructionByShippingInstructionReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShippingInstructionByShippingInstructionReferenceResponse.ProtoReflect.Descriptor instead.
func (*UpdateShippingInstructionByShippingInstructionReferenceResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_shippinginstruction_proto_rawDescGZIP(), []int{11}
}

type ShippingInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShippingInstructionD *ShippingInstructionD `protobuf:"bytes,1,opt,name=shipping_instruction_d,json=shippingInstructionD,proto3" json:"shipping_instruction_d,omitempty"`
	ShippingInstructionT *ShippingInstructionT `protobuf:"bytes,2,opt,name=shipping_instruction_t,json=shippingInstructionT,proto3" json:"shipping_instruction_t,omitempty"`
}

func (x *ShippingInstruction) Reset() {
	*x = ShippingInstruction{}
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShippingInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingInstruction) ProtoMessage() {}

func (x *ShippingInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingInstruction.ProtoReflect.Descriptor instead.
func (*ShippingInstruction) Descriptor() ([]byte, []int) {
	return file_ebl_v1_shippinginstruction_proto_rawDescGZIP(), []int{12}
}

func (x *ShippingInstruction) GetShippingInstructionD() *ShippingInstructionD {
	if x != nil {
		return x.ShippingInstructionD
	}
	return nil
}

func (x *ShippingInstruction) GetShippingInstructionT() *ShippingInstructionT {
	if x != nil {
		return x.ShippingInstructionT
	}
	return nil
}

type ShippingInstructionD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                           []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                             string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	ShippingInstructionReference    string `protobuf:"bytes,4,opt,name=shipping_instruction_reference,json=shippingInstructionReference,proto3" json:"shipping_instruction_reference,omitempty"`
	DocumentStatus                  string `protobuf:"bytes,5,opt,name=document_status,json=documentStatus,proto3" json:"document_status,omitempty"`
	IsShippedOnboardType            bool   `protobuf:"varint,6,opt,name=is_shipped_onboard_type,json=isShippedOnboardType,proto3" json:"is_shipped_onboard_type,omitempty"`
	NumberOfCopies                  uint32 `protobuf:"varint,7,opt,name=number_of_copies,json=numberOfCopies,proto3" json:"number_of_copies,omitempty"`
	NumberOfOriginals               uint32 `protobuf:"varint,8,opt,name=number_of_originals,json=numberOfOriginals,proto3" json:"number_of_originals,omitempty"`
	IsElectronic                    bool   `protobuf:"varint,9,opt,name=is_electronic,json=isElectronic,proto3" json:"is_electronic,omitempty"`
	IsToOrder                       bool   `protobuf:"varint,10,opt,name=is_to_order,json=isToOrder,proto3" json:"is_to_order,omitempty"`
	AreChargesDisplayedOnOriginals  bool   `protobuf:"varint,11,opt,name=are_charges_displayed_on_originals,json=areChargesDisplayedOnOriginals,proto3" json:"are_charges_displayed_on_originals,omitempty"`
	AreChargesDisplayedOnCopies     bool   `protobuf:"varint,12,opt,name=are_charges_displayed_on_copies,json=areChargesDisplayedOnCopies,proto3" json:"are_charges_displayed_on_copies,omitempty"`
	LocationId                      uint32 `protobuf:"varint,13,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	TransportDocumentTypeCode       string `protobuf:"bytes,14,opt,name=transport_document_type_code,json=transportDocumentTypeCode,proto3" json:"transport_document_type_code,omitempty"`
	DisplayedNameForPlaceOfReceipt  string `protobuf:"bytes,15,opt,name=displayed_name_for_place_of_receipt,json=displayedNameForPlaceOfReceipt,proto3" json:"displayed_name_for_place_of_receipt,omitempty"`
	DisplayedNameForPortOfLoad      string `protobuf:"bytes,16,opt,name=displayed_name_for_port_of_load,json=displayedNameForPortOfLoad,proto3" json:"displayed_name_for_port_of_load,omitempty"`
	DisplayedNameForPortOfDischarge string `protobuf:"bytes,17,opt,name=displayed_name_for_port_of_discharge,json=displayedNameForPortOfDischarge,proto3" json:"displayed_name_for_port_of_discharge,omitempty"`
	DisplayedNameForPlaceOfDelivery string `protobuf:"bytes,18,opt,name=displayed_name_for_place_of_delivery,json=displayedNameForPlaceOfDelivery,proto3" json:"displayed_name_for_place_of_delivery,omitempty"`
	AmendToTransportDocument        string `protobuf:"bytes,19,opt,name=amend_to_transport_document,json=amendToTransportDocument,proto3" json:"amend_to_transport_document,omitempty"`
}

func (x *ShippingInstructionD) Reset() {
	*x = ShippingInstructionD{}
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShippingInstructionD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingInstructionD) ProtoMessage() {}

func (x *ShippingInstructionD) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingInstructionD.ProtoReflect.Descriptor instead.
func (*ShippingInstructionD) Descriptor() ([]byte, []int) {
	return file_ebl_v1_shippinginstruction_proto_rawDescGZIP(), []int{13}
}

func (x *ShippingInstructionD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShippingInstructionD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ShippingInstructionD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ShippingInstructionD) GetShippingInstructionReference() string {
	if x != nil {
		return x.ShippingInstructionReference
	}
	return ""
}

func (x *ShippingInstructionD) GetDocumentStatus() string {
	if x != nil {
		return x.DocumentStatus
	}
	return ""
}

func (x *ShippingInstructionD) GetIsShippedOnboardType() bool {
	if x != nil {
		return x.IsShippedOnboardType
	}
	return false
}

func (x *ShippingInstructionD) GetNumberOfCopies() uint32 {
	if x != nil {
		return x.NumberOfCopies
	}
	return 0
}

func (x *ShippingInstructionD) GetNumberOfOriginals() uint32 {
	if x != nil {
		return x.NumberOfOriginals
	}
	return 0
}

func (x *ShippingInstructionD) GetIsElectronic() bool {
	if x != nil {
		return x.IsElectronic
	}
	return false
}

func (x *ShippingInstructionD) GetIsToOrder() bool {
	if x != nil {
		return x.IsToOrder
	}
	return false
}

func (x *ShippingInstructionD) GetAreChargesDisplayedOnOriginals() bool {
	if x != nil {
		return x.AreChargesDisplayedOnOriginals
	}
	return false
}

func (x *ShippingInstructionD) GetAreChargesDisplayedOnCopies() bool {
	if x != nil {
		return x.AreChargesDisplayedOnCopies
	}
	return false
}

func (x *ShippingInstructionD) GetLocationId() uint32 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *ShippingInstructionD) GetTransportDocumentTypeCode() string {
	if x != nil {
		return x.TransportDocumentTypeCode
	}
	return ""
}

func (x *ShippingInstructionD) GetDisplayedNameForPlaceOfReceipt() string {
	if x != nil {
		return x.DisplayedNameForPlaceOfReceipt
	}
	return ""
}

func (x *ShippingInstructionD) GetDisplayedNameForPortOfLoad() string {
	if x != nil {
		return x.DisplayedNameForPortOfLoad
	}
	return ""
}

func (x *ShippingInstructionD) GetDisplayedNameForPortOfDischarge() string {
	if x != nil {
		return x.DisplayedNameForPortOfDischarge
	}
	return ""
}

func (x *ShippingInstructionD) GetDisplayedNameForPlaceOfDelivery() string {
	if x != nil {
		return x.DisplayedNameForPlaceOfDelivery
	}
	return ""
}

func (x *ShippingInstructionD) GetAmendToTransportDocument() string {
	if x != nil {
		return x.AmendToTransportDocument
	}
	return ""
}

type ShippingInstructionT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_date_time,json=createdDateTime,proto3" json:"created_date_time,omitempty"`
	UpdatedDateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
}

func (x *ShippingInstructionT) Reset() {
	*x = ShippingInstructionT{}
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShippingInstructionT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingInstructionT) ProtoMessage() {}

func (x *ShippingInstructionT) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_shippinginstruction_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingInstructionT.ProtoReflect.Descriptor instead.
func (*ShippingInstructionT) Descriptor() ([]byte, []int) {
	return file_ebl_v1_shippinginstruction_proto_rawDescGZIP(), []int{14}
}

func (x *ShippingInstructionT) GetCreatedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDateTime
	}
	return nil
}

func (x *ShippingInstructionT) GetUpdatedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDateTime
	}
	return nil
}

var File_ebl_v1_shippinginstruction_proto protoreflect.FileDescriptor

var file_ebl_v1_shippinginstruction_proto_rawDesc = []byte{
	0x0a, 0x20, 0x65, 0x62, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x62, 0x6b, 0x67, 0x2f, 0x76, 0x32,
	0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x65, 0x62, 0x6c, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x65, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x0b, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x1e, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x1c, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x10, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x0e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x13,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02,
	0x28, 0x00, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x6a, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x69, 0x73, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xba, 0x48, 0x04, 0x6a, 0x02, 0x08,
	0x01, 0x52, 0x09, 0x69, 0x73, 0x54, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x22,
	0x61, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4f, 0x6e, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x61, 0x72, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1b, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4f, 0x6e, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x54, 0x0a, 0x23, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x18, 0x23, 0x52, 0x1e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x4c, 0x0a, 0x1f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x23, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x66,
	0x4c, 0x6f, 0x61, 0x64, 0x12, 0x56, 0x0a, 0x24, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x23, 0x52, 0x1f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x4f, 0x66, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x24,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x18, 0x23, 0x52, 0x1f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x1b, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xba, 0x48, 0x13, 0x72, 0x11,
	0x18, 0x14, 0x32, 0x0d, 0x5e, 0x5c, 0x53, 0x2b, 0x28, 0x5c, 0x73, 0x2b, 0x5c, 0x53, 0x2b, 0x29,
	0x24, 0x52, 0x18, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x62, 0x6b, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x1d, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1b, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x73, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x14, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x62,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x22, 0x95, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x0f,
	0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x62, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x14,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x62, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a,
	0x16, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x1e, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x17, 0x46,
	0x69, 0x6e, 0x64, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x03, 0x0a, 0x3e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x1e, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x23, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x41, 0x0a,
	0x3f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xbd, 0x01, 0x0a, 0x13, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x16, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x52, 0x14, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x52, 0x0a, 0x16,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65,
	0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x52, 0x14, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x22, 0xf7, 0x07, 0x0a, 0x14, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12,
	0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x53, 0x12, 0x44, 0x0a, 0x1e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x70, 0x69,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x54, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x22, 0x61, 0x72, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4f, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x61, 0x72,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x4f, 0x6e, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x23, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f,
	0x66, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x43, 0x0a, 0x1f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x46, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x66, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x4d, 0x0a,
	0x24, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x4f, 0x66, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x24,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x4f, 0x66, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x61,
	0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x53,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0xcf, 0x05, 0x0a, 0x1a, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x70, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x62, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x26, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x17, 0x2e, 0x65,
	0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x73, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x6b, 0x12, 0x29, 0x2e,
	0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x37, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x65,
	0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f,
	0x73, 0x63, 0x2d, 0x64, 0x63, 0x73, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x65, 0x62, 0x6c, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ebl_v1_shippinginstruction_proto_rawDescOnce sync.Once
	file_ebl_v1_shippinginstruction_proto_rawDescData = file_ebl_v1_shippinginstruction_proto_rawDesc
)

func file_ebl_v1_shippinginstruction_proto_rawDescGZIP() []byte {
	file_ebl_v1_shippinginstruction_proto_rawDescOnce.Do(func() {
		file_ebl_v1_shippinginstruction_proto_rawDescData = protoimpl.X.CompressGZIP(file_ebl_v1_shippinginstruction_proto_rawDescData)
	})
	return file_ebl_v1_shippinginstruction_proto_rawDescData
}

var file_ebl_v1_shippinginstruction_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_ebl_v1_shippinginstruction_proto_goTypes = []any{
	(*CreateShippingInstructionRequest)(nil),                                // 0: ebl.v1.CreateShippingInstructionRequest
	(*CreateShippingInstructionResponse)(nil),                               // 1: ebl.v1.CreateShippingInstructionResponse
	(*GetShippingInstructionsResponse)(nil),                                 // 2: ebl.v1.GetShippingInstructionsResponse
	(*GetShippingInstructionsRequest)(nil),                                  // 3: ebl.v1.GetShippingInstructionsRequest
	(*FindByIdRequest)(nil),                                                 // 4: ebl.v1.FindByIdRequest
	(*FindByIdResponse)(nil),                                                // 5: ebl.v1.FindByIdResponse
	(*GetShippingInstructionByPkRequest)(nil),                               // 6: ebl.v1.GetShippingInstructionByPkRequest
	(*GetShippingInstructionByPkResponse)(nil),                              // 7: ebl.v1.GetShippingInstructionByPkResponse
	(*FindByReferenceRequest)(nil),                                          // 8: ebl.v1.FindByReferenceRequest
	(*FindByReferenceResponse)(nil),                                         // 9: ebl.v1.FindByReferenceResponse
	(*UpdateShippingInstructionByShippingInstructionReferenceRequest)(nil),  // 10: ebl.v1.UpdateShippingInstructionByShippingInstructionReferenceRequest
	(*UpdateShippingInstructionByShippingInstructionReferenceResponse)(nil), // 11: ebl.v1.UpdateShippingInstructionByShippingInstructionReferenceResponse
	(*ShippingInstruction)(nil),                                             // 12: ebl.v1.ShippingInstruction
	(*ShippingInstructionD)(nil),                                            // 13: ebl.v1.ShippingInstructionD
	(*ShippingInstructionT)(nil),                                            // 14: ebl.v1.ShippingInstructionT
	(*v2.CreateReferenceRequest)(nil),                                       // 15: bkg.v2.CreateReferenceRequest
	(*v1.CreateUtilizedTransportEquipmentRequest)(nil),                      // 16: eventcore.v1.CreateUtilizedTransportEquipmentRequest
	(*CreateConsignmentItemRequest)(nil),                                    // 17: ebl.v1.CreateConsignmentItemRequest
	(*v11.GetRequest)(nil),                                                  // 18: common.v1.GetRequest
	(*v11.GetByIdRequest)(nil),                                              // 19: common.v1.GetByIdRequest
	(*timestamppb.Timestamp)(nil),                                           // 20: google.protobuf.Timestamp
}
var file_ebl_v1_shippinginstruction_proto_depIdxs = []int32{
	15, // 0: ebl.v1.CreateShippingInstructionRequest.references:type_name -> bkg.v2.CreateReferenceRequest
	16, // 1: ebl.v1.CreateShippingInstructionRequest.utilized_transport_equipments:type_name -> eventcore.v1.CreateUtilizedTransportEquipmentRequest
	17, // 2: ebl.v1.CreateShippingInstructionRequest.consignment_items:type_name -> ebl.v1.CreateConsignmentItemRequest
	12, // 3: ebl.v1.CreateShippingInstructionResponse.shipping_instruction:type_name -> ebl.v1.ShippingInstruction
	12, // 4: ebl.v1.GetShippingInstructionsResponse.shipping_instructions:type_name -> ebl.v1.ShippingInstruction
	18, // 5: ebl.v1.FindByIdRequest.get_request:type_name -> common.v1.GetRequest
	12, // 6: ebl.v1.FindByIdResponse.shipping_instruction:type_name -> ebl.v1.ShippingInstruction
	19, // 7: ebl.v1.GetShippingInstructionByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	12, // 8: ebl.v1.GetShippingInstructionByPkResponse.shipping_instruction:type_name -> ebl.v1.ShippingInstruction
	12, // 9: ebl.v1.FindByReferenceResponse.shipping_instruction:type_name -> ebl.v1.ShippingInstruction
	13, // 10: ebl.v1.ShippingInstruction.shipping_instruction_d:type_name -> ebl.v1.ShippingInstructionD
	14, // 11: ebl.v1.ShippingInstruction.shipping_instruction_t:type_name -> ebl.v1.ShippingInstructionT
	20, // 12: ebl.v1.ShippingInstructionT.created_date_time:type_name -> google.protobuf.Timestamp
	20, // 13: ebl.v1.ShippingInstructionT.updated_date_time:type_name -> google.protobuf.Timestamp
	0,  // 14: ebl.v1.ShippingInstructionService.CreateShippingInstruction:input_type -> ebl.v1.CreateShippingInstructionRequest
	3,  // 15: ebl.v1.ShippingInstructionService.GetShippingInstructions:input_type -> ebl.v1.GetShippingInstructionsRequest
	4,  // 16: ebl.v1.ShippingInstructionService.FindById:input_type -> ebl.v1.FindByIdRequest
	6,  // 17: ebl.v1.ShippingInstructionService.GetShippingInstructionByPk:input_type -> ebl.v1.GetShippingInstructionByPkRequest
	8,  // 18: ebl.v1.ShippingInstructionService.FindByReference:input_type -> ebl.v1.FindByReferenceRequest
	10, // 19: ebl.v1.ShippingInstructionService.UpdateShippingInstructionByShippingInstructionReference:input_type -> ebl.v1.UpdateShippingInstructionByShippingInstructionReferenceRequest
	1,  // 20: ebl.v1.ShippingInstructionService.CreateShippingInstruction:output_type -> ebl.v1.CreateShippingInstructionResponse
	2,  // 21: ebl.v1.ShippingInstructionService.GetShippingInstructions:output_type -> ebl.v1.GetShippingInstructionsResponse
	5,  // 22: ebl.v1.ShippingInstructionService.FindById:output_type -> ebl.v1.FindByIdResponse
	7,  // 23: ebl.v1.ShippingInstructionService.GetShippingInstructionByPk:output_type -> ebl.v1.GetShippingInstructionByPkResponse
	9,  // 24: ebl.v1.ShippingInstructionService.FindByReference:output_type -> ebl.v1.FindByReferenceResponse
	11, // 25: ebl.v1.ShippingInstructionService.UpdateShippingInstructionByShippingInstructionReference:output_type -> ebl.v1.UpdateShippingInstructionByShippingInstructionReferenceResponse
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_ebl_v1_shippinginstruction_proto_init() }
func file_ebl_v1_shippinginstruction_proto_init() {
	if File_ebl_v1_shippinginstruction_proto != nil {
		return
	}
	file_ebl_v1_consignmentitem_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ebl_v1_shippinginstruction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ebl_v1_shippinginstruction_proto_goTypes,
		DependencyIndexes: file_ebl_v1_shippinginstruction_proto_depIdxs,
		MessageInfos:      file_ebl_v1_shippinginstruction_proto_msgTypes,
	}.Build()
	File_ebl_v1_shippinginstruction_proto = out.File
	file_ebl_v1_shippinginstruction_proto_rawDesc = nil
	file_ebl_v1_shippinginstruction_proto_goTypes = nil
	file_ebl_v1_shippinginstruction_proto_depIdxs = nil
}
