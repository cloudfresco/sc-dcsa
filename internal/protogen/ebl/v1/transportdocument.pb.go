// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: ebl/v1/transportdocument.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateTransportDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentReference string  `protobuf:"bytes,1,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	LocationId                 uint32  `protobuf:"varint,2,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	IssueDate                  string  `protobuf:"bytes,3,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	ShippedOnboardDate         string  `protobuf:"bytes,4,opt,name=shipped_onboard_date,json=shippedOnboardDate,proto3" json:"shipped_onboard_date,omitempty"`
	ReceivedForShipmentDate    string  `protobuf:"bytes,5,opt,name=received_for_shipment_date,json=receivedForShipmentDate,proto3" json:"received_for_shipment_date,omitempty"`
	NumberOfOriginals          uint32  `protobuf:"varint,6,opt,name=number_of_originals,json=numberOfOriginals,proto3" json:"number_of_originals,omitempty"`
	CarrierId                  uint32  `protobuf:"varint,7,opt,name=carrier_id,json=carrierId,proto3" json:"carrier_id,omitempty"`
	ShippingInstructionId      uint32  `protobuf:"varint,8,opt,name=shipping_instruction_id,json=shippingInstructionId,proto3" json:"shipping_instruction_id,omitempty"`
	DeclaredValueCurrency      string  `protobuf:"bytes,9,opt,name=declared_value_currency,json=declaredValueCurrency,proto3" json:"declared_value_currency,omitempty"`
	DeclaredValue              float64 `protobuf:"fixed64,10,opt,name=declared_value,json=declaredValue,proto3" json:"declared_value,omitempty"`
	NumberOfRiderPages         int32   `protobuf:"varint,11,opt,name=number_of_rider_pages,json=numberOfRiderPages,proto3" json:"number_of_rider_pages,omitempty"`
	IssuingParty               string  `protobuf:"bytes,12,opt,name=issuing_party,json=issuingParty,proto3" json:"issuing_party,omitempty"`
	CreatedDateTime            string  `protobuf:"bytes,13,opt,name=created_date_time,json=createdDateTime,proto3" json:"created_date_time,omitempty"`
	UpdatedDateTime            string  `protobuf:"bytes,14,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
	UserId                     string  `protobuf:"bytes,15,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                  string  `protobuf:"bytes,16,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                  string  `protobuf:"bytes,17,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTransportDocumentRequest) Reset() {
	*x = CreateTransportDocumentRequest{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransportDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransportDocumentRequest) ProtoMessage() {}

func (x *CreateTransportDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransportDocumentRequest.ProtoReflect.Descriptor instead.
func (*CreateTransportDocumentRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTransportDocumentRequest) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *CreateTransportDocumentRequest) GetLocationId() uint32 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *CreateTransportDocumentRequest) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *CreateTransportDocumentRequest) GetShippedOnboardDate() string {
	if x != nil {
		return x.ShippedOnboardDate
	}
	return ""
}

func (x *CreateTransportDocumentRequest) GetReceivedForShipmentDate() string {
	if x != nil {
		return x.ReceivedForShipmentDate
	}
	return ""
}

func (x *CreateTransportDocumentRequest) GetNumberOfOriginals() uint32 {
	if x != nil {
		return x.NumberOfOriginals
	}
	return 0
}

func (x *CreateTransportDocumentRequest) GetCarrierId() uint32 {
	if x != nil {
		return x.CarrierId
	}
	return 0
}

func (x *CreateTransportDocumentRequest) GetShippingInstructionId() uint32 {
	if x != nil {
		return x.ShippingInstructionId
	}
	return 0
}

func (x *CreateTransportDocumentRequest) GetDeclaredValueCurrency() string {
	if x != nil {
		return x.DeclaredValueCurrency
	}
	return ""
}

func (x *CreateTransportDocumentRequest) GetDeclaredValue() float64 {
	if x != nil {
		return x.DeclaredValue
	}
	return 0
}

func (x *CreateTransportDocumentRequest) GetNumberOfRiderPages() int32 {
	if x != nil {
		return x.NumberOfRiderPages
	}
	return 0
}

func (x *CreateTransportDocumentRequest) GetIssuingParty() string {
	if x != nil {
		return x.IssuingParty
	}
	return ""
}

func (x *CreateTransportDocumentRequest) GetCreatedDateTime() string {
	if x != nil {
		return x.CreatedDateTime
	}
	return ""
}

func (x *CreateTransportDocumentRequest) GetUpdatedDateTime() string {
	if x != nil {
		return x.UpdatedDateTime
	}
	return ""
}

func (x *CreateTransportDocumentRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTransportDocumentRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTransportDocumentRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTransportDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocument *TransportDocument `protobuf:"bytes,1,opt,name=transport_document,json=transportDocument,proto3" json:"transport_document,omitempty"`
}

func (x *CreateTransportDocumentResponse) Reset() {
	*x = CreateTransportDocumentResponse{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransportDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransportDocumentResponse) ProtoMessage() {}

func (x *CreateTransportDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransportDocumentResponse.ProtoReflect.Descriptor instead.
func (*CreateTransportDocumentResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTransportDocumentResponse) GetTransportDocument() *TransportDocument {
	if x != nil {
		return x.TransportDocument
	}
	return nil
}

type FindTransportDocumentByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *FindTransportDocumentByIdRequest) Reset() {
	*x = FindTransportDocumentByIdRequest{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindTransportDocumentByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTransportDocumentByIdRequest) ProtoMessage() {}

func (x *FindTransportDocumentByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTransportDocumentByIdRequest.ProtoReflect.Descriptor instead.
func (*FindTransportDocumentByIdRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{2}
}

func (x *FindTransportDocumentByIdRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type FindTransportDocumentByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocument *TransportDocument `protobuf:"bytes,1,opt,name=transport_document,json=transportDocument,proto3" json:"transport_document,omitempty"`
}

func (x *FindTransportDocumentByIdResponse) Reset() {
	*x = FindTransportDocumentByIdResponse{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindTransportDocumentByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTransportDocumentByIdResponse) ProtoMessage() {}

func (x *FindTransportDocumentByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTransportDocumentByIdResponse.ProtoReflect.Descriptor instead.
func (*FindTransportDocumentByIdResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{3}
}

func (x *FindTransportDocumentByIdResponse) GetTransportDocument() *TransportDocument {
	if x != nil {
		return x.TransportDocument
	}
	return nil
}

type GetTransportDocumentByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetTransportDocumentByPkRequest) Reset() {
	*x = GetTransportDocumentByPkRequest{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransportDocumentByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportDocumentByPkRequest) ProtoMessage() {}

func (x *GetTransportDocumentByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportDocumentByPkRequest.ProtoReflect.Descriptor instead.
func (*GetTransportDocumentByPkRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{4}
}

func (x *GetTransportDocumentByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetTransportDocumentByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocument *TransportDocument `protobuf:"bytes,1,opt,name=transport_document,json=transportDocument,proto3" json:"transport_document,omitempty"`
}

func (x *GetTransportDocumentByPkResponse) Reset() {
	*x = GetTransportDocumentByPkResponse{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransportDocumentByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportDocumentByPkResponse) ProtoMessage() {}

func (x *GetTransportDocumentByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportDocumentByPkResponse.ProtoReflect.Descriptor instead.
func (*GetTransportDocumentByPkResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{5}
}

func (x *GetTransportDocumentByPkResponse) GetTransportDocument() *TransportDocument {
	if x != nil {
		return x.TransportDocument
	}
	return nil
}

type FindByTransportDocumentReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocument *TransportDocument `protobuf:"bytes,1,opt,name=transport_document,json=transportDocument,proto3" json:"transport_document,omitempty"`
}

func (x *FindByTransportDocumentReferenceResponse) Reset() {
	*x = FindByTransportDocumentReferenceResponse{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindByTransportDocumentReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByTransportDocumentReferenceResponse) ProtoMessage() {}

func (x *FindByTransportDocumentReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByTransportDocumentReferenceResponse.ProtoReflect.Descriptor instead.
func (*FindByTransportDocumentReferenceResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{6}
}

func (x *FindByTransportDocumentReferenceResponse) GetTransportDocument() *TransportDocument {
	if x != nil {
		return x.TransportDocument
	}
	return nil
}

type FindByTransportDocumentReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentReference string `protobuf:"bytes,1,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	UserEmail                  string `protobuf:"bytes,2,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                  string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *FindByTransportDocumentReferenceRequest) Reset() {
	*x = FindByTransportDocumentReferenceRequest{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindByTransportDocumentReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByTransportDocumentReferenceRequest) ProtoMessage() {}

func (x *FindByTransportDocumentReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByTransportDocumentReferenceRequest.ProtoReflect.Descriptor instead.
func (*FindByTransportDocumentReferenceRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{7}
}

func (x *FindByTransportDocumentReferenceRequest) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *FindByTransportDocumentReferenceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *FindByTransportDocumentReferenceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTransportDocumentFromShippingInstructionTORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTransportDocumentRequest *CreateTransportDocumentRequest `protobuf:"bytes,1,opt,name=create_transport_document_request,json=createTransportDocumentRequest,proto3" json:"create_transport_document_request,omitempty"`
}

func (x *CreateTransportDocumentFromShippingInstructionTORequest) Reset() {
	*x = CreateTransportDocumentFromShippingInstructionTORequest{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransportDocumentFromShippingInstructionTORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransportDocumentFromShippingInstructionTORequest) ProtoMessage() {}

func (x *CreateTransportDocumentFromShippingInstructionTORequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransportDocumentFromShippingInstructionTORequest.ProtoReflect.Descriptor instead.
func (*CreateTransportDocumentFromShippingInstructionTORequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTransportDocumentFromShippingInstructionTORequest) GetCreateTransportDocumentRequest() *CreateTransportDocumentRequest {
	if x != nil {
		return x.CreateTransportDocumentRequest
	}
	return nil
}

type CreateTransportDocumentFromShippingInstructionTOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocument *TransportDocument `protobuf:"bytes,1,opt,name=transport_document,json=transportDocument,proto3" json:"transport_document,omitempty"`
}

func (x *CreateTransportDocumentFromShippingInstructionTOResponse) Reset() {
	*x = CreateTransportDocumentFromShippingInstructionTOResponse{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransportDocumentFromShippingInstructionTOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransportDocumentFromShippingInstructionTOResponse) ProtoMessage() {}

func (x *CreateTransportDocumentFromShippingInstructionTOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransportDocumentFromShippingInstructionTOResponse.ProtoReflect.Descriptor instead.
func (*CreateTransportDocumentFromShippingInstructionTOResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{9}
}

func (x *CreateTransportDocumentFromShippingInstructionTOResponse) GetTransportDocument() *TransportDocument {
	if x != nil {
		return x.TransportDocument
	}
	return nil
}

type GetTransportDocumentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocuments []*TransportDocument `protobuf:"bytes,1,rep,name=transport_documents,json=transportDocuments,proto3" json:"transport_documents,omitempty"`
	NextCursor         string               `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetTransportDocumentsResponse) Reset() {
	*x = GetTransportDocumentsResponse{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransportDocumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportDocumentsResponse) ProtoMessage() {}

func (x *GetTransportDocumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportDocumentsResponse.ProtoReflect.Descriptor instead.
func (*GetTransportDocumentsResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{10}
}

func (x *GetTransportDocumentsResponse) GetTransportDocuments() []*TransportDocument {
	if x != nil {
		return x.TransportDocuments
	}
	return nil
}

func (x *GetTransportDocumentsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetTransportDocumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetTransportDocumentsRequest) Reset() {
	*x = GetTransportDocumentsRequest{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransportDocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportDocumentsRequest) ProtoMessage() {}

func (x *GetTransportDocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportDocumentsRequest.ProtoReflect.Descriptor instead.
func (*GetTransportDocumentsRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{11}
}

func (x *GetTransportDocumentsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetTransportDocumentsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetTransportDocumentsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetTransportDocumentsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ApproveTransportDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentReference string `protobuf:"bytes,1,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	UserId                     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *ApproveTransportDocumentRequest) Reset() {
	*x = ApproveTransportDocumentRequest{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveTransportDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveTransportDocumentRequest) ProtoMessage() {}

func (x *ApproveTransportDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveTransportDocumentRequest.ProtoReflect.Descriptor instead.
func (*ApproveTransportDocumentRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{12}
}

func (x *ApproveTransportDocumentRequest) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *ApproveTransportDocumentRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ApproveTransportDocumentRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *ApproveTransportDocumentRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ApproveTransportDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApproveTransportDocumentResponse) Reset() {
	*x = ApproveTransportDocumentResponse{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveTransportDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveTransportDocumentResponse) ProtoMessage() {}

func (x *ApproveTransportDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveTransportDocumentResponse.ProtoReflect.Descriptor instead.
func (*ApproveTransportDocumentResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{13}
}

type TransportDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentD *TransportDocumentD `protobuf:"bytes,1,opt,name=transport_document_d,json=transportDocumentD,proto3" json:"transport_document_d,omitempty"`
	TransportDocumentT *TransportDocumentT `protobuf:"bytes,2,opt,name=transport_document_t,json=transportDocumentT,proto3" json:"transport_document_t,omitempty"`
}

func (x *TransportDocument) Reset() {
	*x = TransportDocument{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportDocument) ProtoMessage() {}

func (x *TransportDocument) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportDocument.ProtoReflect.Descriptor instead.
func (*TransportDocument) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{14}
}

func (x *TransportDocument) GetTransportDocumentD() *TransportDocumentD {
	if x != nil {
		return x.TransportDocumentD
	}
	return nil
}

func (x *TransportDocument) GetTransportDocumentT() *TransportDocumentT {
	if x != nil {
		return x.TransportDocumentT
	}
	return nil
}

type TransportDocumentD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                      []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                        string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	TransportDocumentReference string  `protobuf:"bytes,4,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	LocationId                 uint32  `protobuf:"varint,5,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	NumberOfOriginals          uint32  `protobuf:"varint,6,opt,name=number_of_originals,json=numberOfOriginals,proto3" json:"number_of_originals,omitempty"`
	CarrierId                  uint32  `protobuf:"varint,7,opt,name=carrier_id,json=carrierId,proto3" json:"carrier_id,omitempty"`
	ShippingInstructionId      uint32  `protobuf:"varint,8,opt,name=shipping_instruction_id,json=shippingInstructionId,proto3" json:"shipping_instruction_id,omitempty"`
	DeclaredValueCurrency      string  `protobuf:"bytes,9,opt,name=declared_value_currency,json=declaredValueCurrency,proto3" json:"declared_value_currency,omitempty"`
	DeclaredValue              float64 `protobuf:"fixed64,10,opt,name=declared_value,json=declaredValue,proto3" json:"declared_value,omitempty"`
	NumberOfRiderPages         int32   `protobuf:"varint,11,opt,name=number_of_rider_pages,json=numberOfRiderPages,proto3" json:"number_of_rider_pages,omitempty"`
	IssuingParty               string  `protobuf:"bytes,12,opt,name=issuing_party,json=issuingParty,proto3" json:"issuing_party,omitempty"`
}

func (x *TransportDocumentD) Reset() {
	*x = TransportDocumentD{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportDocumentD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportDocumentD) ProtoMessage() {}

func (x *TransportDocumentD) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportDocumentD.ProtoReflect.Descriptor instead.
func (*TransportDocumentD) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{15}
}

func (x *TransportDocumentD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransportDocumentD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *TransportDocumentD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *TransportDocumentD) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *TransportDocumentD) GetLocationId() uint32 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *TransportDocumentD) GetNumberOfOriginals() uint32 {
	if x != nil {
		return x.NumberOfOriginals
	}
	return 0
}

func (x *TransportDocumentD) GetCarrierId() uint32 {
	if x != nil {
		return x.CarrierId
	}
	return 0
}

func (x *TransportDocumentD) GetShippingInstructionId() uint32 {
	if x != nil {
		return x.ShippingInstructionId
	}
	return 0
}

func (x *TransportDocumentD) GetDeclaredValueCurrency() string {
	if x != nil {
		return x.DeclaredValueCurrency
	}
	return ""
}

func (x *TransportDocumentD) GetDeclaredValue() float64 {
	if x != nil {
		return x.DeclaredValue
	}
	return 0
}

func (x *TransportDocumentD) GetNumberOfRiderPages() int32 {
	if x != nil {
		return x.NumberOfRiderPages
	}
	return 0
}

func (x *TransportDocumentD) GetIssuingParty() string {
	if x != nil {
		return x.IssuingParty
	}
	return ""
}

type TransportDocumentT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueDate               *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	ShippedOnboardDate      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=shipped_onboard_date,json=shippedOnboardDate,proto3" json:"shipped_onboard_date,omitempty"`
	ReceivedForShipmentDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=received_for_shipment_date,json=receivedForShipmentDate,proto3" json:"received_for_shipment_date,omitempty"`
	CreatedDateTime         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_date_time,json=createdDateTime,proto3" json:"created_date_time,omitempty"`
	UpdatedDateTime         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_date_time,json=updatedDateTime,proto3" json:"updated_date_time,omitempty"`
}

func (x *TransportDocumentT) Reset() {
	*x = TransportDocumentT{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportDocumentT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportDocumentT) ProtoMessage() {}

func (x *TransportDocumentT) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportDocumentT.ProtoReflect.Descriptor instead.
func (*TransportDocumentT) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{16}
}

func (x *TransportDocumentT) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *TransportDocumentT) GetShippedOnboardDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ShippedOnboardDate
	}
	return nil
}

func (x *TransportDocumentT) GetReceivedForShipmentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedForShipmentDate
	}
	return nil
}

func (x *TransportDocumentT) GetCreatedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDateTime
	}
	return nil
}

func (x *TransportDocumentT) GetUpdatedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDateTime
	}
	return nil
}

type CreateTransportDocumentSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentReference       string `protobuf:"bytes,1,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	TransportDocumentCreatedDateTime string `protobuf:"bytes,2,opt,name=transport_document_created_date_time,json=transportDocumentCreatedDateTime,proto3" json:"transport_document_created_date_time,omitempty"`
	TransportDocumentUpdatedDateTime string `protobuf:"bytes,3,opt,name=transport_document_updated_date_time,json=transportDocumentUpdatedDateTime,proto3" json:"transport_document_updated_date_time,omitempty"`
	IssueDate                        string `protobuf:"bytes,4,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	ShippedOnboardDate               string `protobuf:"bytes,5,opt,name=shipped_onboard_date,json=shippedOnboardDate,proto3" json:"shipped_onboard_date,omitempty"`
	ReceivedForShipmentDate          string `protobuf:"bytes,6,opt,name=received_for_shipment_date,json=receivedForShipmentDate,proto3" json:"received_for_shipment_date,omitempty"`
	NumberOfOriginals                uint32 `protobuf:"varint,7,opt,name=number_of_originals,json=numberOfOriginals,proto3" json:"number_of_originals,omitempty"`
	CarrierCode                      string `protobuf:"bytes,8,opt,name=carrier_code,json=carrierCode,proto3" json:"carrier_code,omitempty"`
	CarrierCodeListProvider          string `protobuf:"bytes,9,opt,name=carrier_code_list_provider,json=carrierCodeListProvider,proto3" json:"carrier_code_list_provider,omitempty"`
	NumberOfRiderPages               int32  `protobuf:"varint,10,opt,name=number_of_rider_pages,json=numberOfRiderPages,proto3" json:"number_of_rider_pages,omitempty"`
	ShippingInstructionReference     string `protobuf:"bytes,11,opt,name=shipping_instruction_reference,json=shippingInstructionReference,proto3" json:"shipping_instruction_reference,omitempty"`
	DocumentStatus                   string `protobuf:"bytes,12,opt,name=document_status,json=documentStatus,proto3" json:"document_status,omitempty"`
	UserId                           string `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                        string `protobuf:"bytes,14,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                        string `protobuf:"bytes,15,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTransportDocumentSummaryRequest) Reset() {
	*x = CreateTransportDocumentSummaryRequest{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransportDocumentSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransportDocumentSummaryRequest) ProtoMessage() {}

func (x *CreateTransportDocumentSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransportDocumentSummaryRequest.ProtoReflect.Descriptor instead.
func (*CreateTransportDocumentSummaryRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{17}
}

func (x *CreateTransportDocumentSummaryRequest) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *CreateTransportDocumentSummaryRequest) GetTransportDocumentCreatedDateTime() string {
	if x != nil {
		return x.TransportDocumentCreatedDateTime
	}
	return ""
}

func (x *CreateTransportDocumentSummaryRequest) GetTransportDocumentUpdatedDateTime() string {
	if x != nil {
		return x.TransportDocumentUpdatedDateTime
	}
	return ""
}

func (x *CreateTransportDocumentSummaryRequest) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *CreateTransportDocumentSummaryRequest) GetShippedOnboardDate() string {
	if x != nil {
		return x.ShippedOnboardDate
	}
	return ""
}

func (x *CreateTransportDocumentSummaryRequest) GetReceivedForShipmentDate() string {
	if x != nil {
		return x.ReceivedForShipmentDate
	}
	return ""
}

func (x *CreateTransportDocumentSummaryRequest) GetNumberOfOriginals() uint32 {
	if x != nil {
		return x.NumberOfOriginals
	}
	return 0
}

func (x *CreateTransportDocumentSummaryRequest) GetCarrierCode() string {
	if x != nil {
		return x.CarrierCode
	}
	return ""
}

func (x *CreateTransportDocumentSummaryRequest) GetCarrierCodeListProvider() string {
	if x != nil {
		return x.CarrierCodeListProvider
	}
	return ""
}

func (x *CreateTransportDocumentSummaryRequest) GetNumberOfRiderPages() int32 {
	if x != nil {
		return x.NumberOfRiderPages
	}
	return 0
}

func (x *CreateTransportDocumentSummaryRequest) GetShippingInstructionReference() string {
	if x != nil {
		return x.ShippingInstructionReference
	}
	return ""
}

func (x *CreateTransportDocumentSummaryRequest) GetDocumentStatus() string {
	if x != nil {
		return x.DocumentStatus
	}
	return ""
}

func (x *CreateTransportDocumentSummaryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTransportDocumentSummaryRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTransportDocumentSummaryRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTransportDocumentSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentSummary *TransportDocumentSummary `protobuf:"bytes,1,opt,name=transport_document_summary,json=transportDocumentSummary,proto3" json:"transport_document_summary,omitempty"`
}

func (x *CreateTransportDocumentSummaryResponse) Reset() {
	*x = CreateTransportDocumentSummaryResponse{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransportDocumentSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransportDocumentSummaryResponse) ProtoMessage() {}

func (x *CreateTransportDocumentSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransportDocumentSummaryResponse.ProtoReflect.Descriptor instead.
func (*CreateTransportDocumentSummaryResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{18}
}

func (x *CreateTransportDocumentSummaryResponse) GetTransportDocumentSummary() *TransportDocumentSummary {
	if x != nil {
		return x.TransportDocumentSummary
	}
	return nil
}

type GetTransportDocumentSummariesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentSummaries []*TransportDocumentSummary `protobuf:"bytes,1,rep,name=transport_document_summaries,json=transportDocumentSummaries,proto3" json:"transport_document_summaries,omitempty"`
	NextCursor                 string                      `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetTransportDocumentSummariesResponse) Reset() {
	*x = GetTransportDocumentSummariesResponse{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransportDocumentSummariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportDocumentSummariesResponse) ProtoMessage() {}

func (x *GetTransportDocumentSummariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportDocumentSummariesResponse.ProtoReflect.Descriptor instead.
func (*GetTransportDocumentSummariesResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{19}
}

func (x *GetTransportDocumentSummariesResponse) GetTransportDocumentSummaries() []*TransportDocumentSummary {
	if x != nil {
		return x.TransportDocumentSummaries
	}
	return nil
}

func (x *GetTransportDocumentSummariesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetTransportDocumentSummariesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetTransportDocumentSummariesRequest) Reset() {
	*x = GetTransportDocumentSummariesRequest{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransportDocumentSummariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportDocumentSummariesRequest) ProtoMessage() {}

func (x *GetTransportDocumentSummariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportDocumentSummariesRequest.ProtoReflect.Descriptor instead.
func (*GetTransportDocumentSummariesRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{20}
}

func (x *GetTransportDocumentSummariesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetTransportDocumentSummariesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetTransportDocumentSummariesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetTransportDocumentSummariesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetTransportDocumentSummaryByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetTransportDocumentSummaryByPkRequest) Reset() {
	*x = GetTransportDocumentSummaryByPkRequest{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransportDocumentSummaryByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportDocumentSummaryByPkRequest) ProtoMessage() {}

func (x *GetTransportDocumentSummaryByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportDocumentSummaryByPkRequest.ProtoReflect.Descriptor instead.
func (*GetTransportDocumentSummaryByPkRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{21}
}

func (x *GetTransportDocumentSummaryByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetTransportDocumentSummaryByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentSummary *TransportDocumentSummary `protobuf:"bytes,1,opt,name=transport_document_summary,json=transportDocumentSummary,proto3" json:"transport_document_summary,omitempty"`
}

func (x *GetTransportDocumentSummaryByPkResponse) Reset() {
	*x = GetTransportDocumentSummaryByPkResponse{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransportDocumentSummaryByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportDocumentSummaryByPkResponse) ProtoMessage() {}

func (x *GetTransportDocumentSummaryByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportDocumentSummaryByPkResponse.ProtoReflect.Descriptor instead.
func (*GetTransportDocumentSummaryByPkResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{22}
}

func (x *GetTransportDocumentSummaryByPkResponse) GetTransportDocumentSummary() *TransportDocumentSummary {
	if x != nil {
		return x.TransportDocumentSummary
	}
	return nil
}

type TransportDocumentSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentSummaryD *TransportDocumentSummaryD `protobuf:"bytes,1,opt,name=transport_document_summary_d,json=transportDocumentSummaryD,proto3" json:"transport_document_summary_d,omitempty"`
	TransportDocumentSummaryT *TransportDocumentSummaryT `protobuf:"bytes,2,opt,name=transport_document_summary_t,json=transportDocumentSummaryT,proto3" json:"transport_document_summary_t,omitempty"`
	CrUpdUser                 *v1.CrUpdUser              `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                 *v1.CrUpdTime              `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *TransportDocumentSummary) Reset() {
	*x = TransportDocumentSummary{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportDocumentSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportDocumentSummary) ProtoMessage() {}

func (x *TransportDocumentSummary) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportDocumentSummary.ProtoReflect.Descriptor instead.
func (*TransportDocumentSummary) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{23}
}

func (x *TransportDocumentSummary) GetTransportDocumentSummaryD() *TransportDocumentSummaryD {
	if x != nil {
		return x.TransportDocumentSummaryD
	}
	return nil
}

func (x *TransportDocumentSummary) GetTransportDocumentSummaryT() *TransportDocumentSummaryT {
	if x != nil {
		return x.TransportDocumentSummaryT
	}
	return nil
}

func (x *TransportDocumentSummary) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *TransportDocumentSummary) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type TransportDocumentSummaryD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                        []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                          string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	TransportDocumentReference   string `protobuf:"bytes,4,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	NumberOfOriginals            uint32 `protobuf:"varint,5,opt,name=number_of_originals,json=numberOfOriginals,proto3" json:"number_of_originals,omitempty"`
	CarrierCode                  string `protobuf:"bytes,6,opt,name=carrier_code,json=carrierCode,proto3" json:"carrier_code,omitempty"`
	CarrierCodeListProvider      string `protobuf:"bytes,7,opt,name=carrier_code_list_provider,json=carrierCodeListProvider,proto3" json:"carrier_code_list_provider,omitempty"`
	NumberOfRiderPages           int32  `protobuf:"varint,8,opt,name=number_of_rider_pages,json=numberOfRiderPages,proto3" json:"number_of_rider_pages,omitempty"`
	ShippingInstructionReference string `protobuf:"bytes,9,opt,name=shipping_instruction_reference,json=shippingInstructionReference,proto3" json:"shipping_instruction_reference,omitempty"`
	DocumentStatus               string `protobuf:"bytes,10,opt,name=document_status,json=documentStatus,proto3" json:"document_status,omitempty"`
}

func (x *TransportDocumentSummaryD) Reset() {
	*x = TransportDocumentSummaryD{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportDocumentSummaryD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportDocumentSummaryD) ProtoMessage() {}

func (x *TransportDocumentSummaryD) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportDocumentSummaryD.ProtoReflect.Descriptor instead.
func (*TransportDocumentSummaryD) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{24}
}

func (x *TransportDocumentSummaryD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransportDocumentSummaryD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *TransportDocumentSummaryD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *TransportDocumentSummaryD) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *TransportDocumentSummaryD) GetNumberOfOriginals() uint32 {
	if x != nil {
		return x.NumberOfOriginals
	}
	return 0
}

func (x *TransportDocumentSummaryD) GetCarrierCode() string {
	if x != nil {
		return x.CarrierCode
	}
	return ""
}

func (x *TransportDocumentSummaryD) GetCarrierCodeListProvider() string {
	if x != nil {
		return x.CarrierCodeListProvider
	}
	return ""
}

func (x *TransportDocumentSummaryD) GetNumberOfRiderPages() int32 {
	if x != nil {
		return x.NumberOfRiderPages
	}
	return 0
}

func (x *TransportDocumentSummaryD) GetShippingInstructionReference() string {
	if x != nil {
		return x.ShippingInstructionReference
	}
	return ""
}

func (x *TransportDocumentSummaryD) GetDocumentStatus() string {
	if x != nil {
		return x.DocumentStatus
	}
	return ""
}

type TransportDocumentSummaryT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentCreatedDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=transport_document_created_date_time,json=transportDocumentCreatedDateTime,proto3" json:"transport_document_created_date_time,omitempty"`
	TransportDocumentUpdatedDateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=transport_document_updated_date_time,json=transportDocumentUpdatedDateTime,proto3" json:"transport_document_updated_date_time,omitempty"`
	IssueDate                        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	ShippedOnboardDate               *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=shipped_onboard_date,json=shippedOnboardDate,proto3" json:"shipped_onboard_date,omitempty"`
	ReceivedForShipmentDate          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=received_for_shipment_date,json=receivedForShipmentDate,proto3" json:"received_for_shipment_date,omitempty"`
}

func (x *TransportDocumentSummaryT) Reset() {
	*x = TransportDocumentSummaryT{}
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportDocumentSummaryT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportDocumentSummaryT) ProtoMessage() {}

func (x *TransportDocumentSummaryT) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_transportdocument_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportDocumentSummaryT.ProtoReflect.Descriptor instead.
func (*TransportDocumentSummaryT) Descriptor() ([]byte, []int) {
	return file_ebl_v1_transportdocument_proto_rawDescGZIP(), []int{25}
}

func (x *TransportDocumentSummaryT) GetTransportDocumentCreatedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransportDocumentCreatedDateTime
	}
	return nil
}

func (x *TransportDocumentSummaryT) GetTransportDocumentUpdatedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransportDocumentUpdatedDateTime
	}
	return nil
}

func (x *TransportDocumentSummaryT) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *TransportDocumentSummaryT) GetShippedOnboardDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ShippedOnboardDate
	}
	return nil
}

func (x *TransportDocumentSummaryT) GetReceivedForShipmentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedForShipmentDate
	}
	return nil
}

var File_ebl_v1_transportdocument_proto protoreflect.FileDescriptor

var file_ebl_v1_transportdocument_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x65, 0x62, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc,
	0x06, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x59, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x14, 0x72, 0x12, 0x18, 0x14,
	0x32, 0x0e, 0x5e, 0x5c, 0x53, 0x2b, 0x28, 0x5c, 0x73, 0x2b, 0x5c, 0x73, 0x2b, 0x29, 0x2a, 0x24,
	0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x4b, 0x0a, 0x17, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0x48, 0x10, 0x72, 0x0e, 0x18, 0x03, 0x32, 0x0a, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x7d, 0x24, 0x52, 0x15, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x35, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x12, 0x09, 0x29, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52,
	0x69, 0x64, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x73,
	0x75, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x6b, 0x0a,
	0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x20, 0x46, 0x69,
	0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f,
	0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e,
	0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6c,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x28,
	0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xac,
	0x01, 0x0a, 0x37, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x21, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x84, 0x01,
	0x0a, 0x38, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x1f, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x4c, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x4c,
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x22, 0xee, 0x03, 0x0a,
	0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x40, 0x0a, 0x1c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x17, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x72, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x69,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0x86, 0x03,
	0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x4c, 0x0a, 0x14, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a,
	0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc9, 0x06, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x59, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x14, 0x72, 0x12, 0x18, 0x14, 0x32,
	0x0e, 0x5e, 0x5c, 0x53, 0x2b, 0x28, 0x5c, 0x73, 0x2b, 0x5c, 0x73, 0x2b, 0x29, 0x2a, 0x24, 0x52,
	0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0xba, 0x48, 0x0b, 0x72, 0x09, 0x18, 0x04, 0x32, 0x05, 0x5e, 0x5c, 0x53, 0x2b, 0x24, 0x52,
	0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x1a,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x52, 0x69, 0x64, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1e,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xac, 0x01,
	0x0a, 0x25, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x9b, 0x01, 0x0a,
	0x24, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x26, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x27, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x62, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x18, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xce, 0x02, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x62, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x62, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x52, 0x19, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x12, 0x62, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54,
	0x52, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55,
	0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x03, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69,
	0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x40,
	0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x69, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xd5, 0x03, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54,
	0x12, 0x6a, 0x0a, 0x24, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x20, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x24,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x57, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x32, 0x80, 0x0a, 0x0a, 0x18, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x26, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x62, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x30, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x4f, 0x12, 0x3f, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x65, 0x62, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x62, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x70, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x28,
	0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x6b, 0x12,
	0x27, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x1e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x2e, 0x65, 0x62,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x62, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x65, 0x62,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x62, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x79, 0x50, 0x6b, 0x12, 0x2e, 0x2e, 0x65,
	0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65,
	0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0x5a,
	0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x64, 0x63, 0x73, 0x61, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65,
	0x6e, 0x2f, 0x65, 0x62, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ebl_v1_transportdocument_proto_rawDescOnce sync.Once
	file_ebl_v1_transportdocument_proto_rawDescData = file_ebl_v1_transportdocument_proto_rawDesc
)

func file_ebl_v1_transportdocument_proto_rawDescGZIP() []byte {
	file_ebl_v1_transportdocument_proto_rawDescOnce.Do(func() {
		file_ebl_v1_transportdocument_proto_rawDescData = protoimpl.X.CompressGZIP(file_ebl_v1_transportdocument_proto_rawDescData)
	})
	return file_ebl_v1_transportdocument_proto_rawDescData
}

var file_ebl_v1_transportdocument_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_ebl_v1_transportdocument_proto_goTypes = []any{
	(*CreateTransportDocumentRequest)(nil),                           // 0: ebl.v1.CreateTransportDocumentRequest
	(*CreateTransportDocumentResponse)(nil),                          // 1: ebl.v1.CreateTransportDocumentResponse
	(*FindTransportDocumentByIdRequest)(nil),                         // 2: ebl.v1.FindTransportDocumentByIdRequest
	(*FindTransportDocumentByIdResponse)(nil),                        // 3: ebl.v1.FindTransportDocumentByIdResponse
	(*GetTransportDocumentByPkRequest)(nil),                          // 4: ebl.v1.GetTransportDocumentByPkRequest
	(*GetTransportDocumentByPkResponse)(nil),                         // 5: ebl.v1.GetTransportDocumentByPkResponse
	(*FindByTransportDocumentReferenceResponse)(nil),                 // 6: ebl.v1.FindByTransportDocumentReferenceResponse
	(*FindByTransportDocumentReferenceRequest)(nil),                  // 7: ebl.v1.FindByTransportDocumentReferenceRequest
	(*CreateTransportDocumentFromShippingInstructionTORequest)(nil),  // 8: ebl.v1.CreateTransportDocumentFromShippingInstructionTORequest
	(*CreateTransportDocumentFromShippingInstructionTOResponse)(nil), // 9: ebl.v1.CreateTransportDocumentFromShippingInstructionTOResponse
	(*GetTransportDocumentsResponse)(nil),                            // 10: ebl.v1.GetTransportDocumentsResponse
	(*GetTransportDocumentsRequest)(nil),                             // 11: ebl.v1.GetTransportDocumentsRequest
	(*ApproveTransportDocumentRequest)(nil),                          // 12: ebl.v1.ApproveTransportDocumentRequest
	(*ApproveTransportDocumentResponse)(nil),                         // 13: ebl.v1.ApproveTransportDocumentResponse
	(*TransportDocument)(nil),                                        // 14: ebl.v1.TransportDocument
	(*TransportDocumentD)(nil),                                       // 15: ebl.v1.TransportDocumentD
	(*TransportDocumentT)(nil),                                       // 16: ebl.v1.TransportDocumentT
	(*CreateTransportDocumentSummaryRequest)(nil),                    // 17: ebl.v1.CreateTransportDocumentSummaryRequest
	(*CreateTransportDocumentSummaryResponse)(nil),                   // 18: ebl.v1.CreateTransportDocumentSummaryResponse
	(*GetTransportDocumentSummariesResponse)(nil),                    // 19: ebl.v1.GetTransportDocumentSummariesResponse
	(*GetTransportDocumentSummariesRequest)(nil),                     // 20: ebl.v1.GetTransportDocumentSummariesRequest
	(*GetTransportDocumentSummaryByPkRequest)(nil),                   // 21: ebl.v1.GetTransportDocumentSummaryByPkRequest
	(*GetTransportDocumentSummaryByPkResponse)(nil),                  // 22: ebl.v1.GetTransportDocumentSummaryByPkResponse
	(*TransportDocumentSummary)(nil),                                 // 23: ebl.v1.TransportDocumentSummary
	(*TransportDocumentSummaryD)(nil),                                // 24: ebl.v1.TransportDocumentSummaryD
	(*TransportDocumentSummaryT)(nil),                                // 25: ebl.v1.TransportDocumentSummaryT
	(*v1.GetRequest)(nil),                                            // 26: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),                                        // 27: common.v1.GetByIdRequest
	(*timestamppb.Timestamp)(nil),                                    // 28: google.protobuf.Timestamp
	(*v1.CrUpdUser)(nil),                                             // 29: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                                             // 30: common.v1.CrUpdTime
}
var file_ebl_v1_transportdocument_proto_depIdxs = []int32{
	14, // 0: ebl.v1.CreateTransportDocumentResponse.transport_document:type_name -> ebl.v1.TransportDocument
	26, // 1: ebl.v1.FindTransportDocumentByIdRequest.get_request:type_name -> common.v1.GetRequest
	14, // 2: ebl.v1.FindTransportDocumentByIdResponse.transport_document:type_name -> ebl.v1.TransportDocument
	27, // 3: ebl.v1.GetTransportDocumentByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	14, // 4: ebl.v1.GetTransportDocumentByPkResponse.transport_document:type_name -> ebl.v1.TransportDocument
	14, // 5: ebl.v1.FindByTransportDocumentReferenceResponse.transport_document:type_name -> ebl.v1.TransportDocument
	0,  // 6: ebl.v1.CreateTransportDocumentFromShippingInstructionTORequest.create_transport_document_request:type_name -> ebl.v1.CreateTransportDocumentRequest
	14, // 7: ebl.v1.CreateTransportDocumentFromShippingInstructionTOResponse.transport_document:type_name -> ebl.v1.TransportDocument
	14, // 8: ebl.v1.GetTransportDocumentsResponse.transport_documents:type_name -> ebl.v1.TransportDocument
	15, // 9: ebl.v1.TransportDocument.transport_document_d:type_name -> ebl.v1.TransportDocumentD
	16, // 10: ebl.v1.TransportDocument.transport_document_t:type_name -> ebl.v1.TransportDocumentT
	28, // 11: ebl.v1.TransportDocumentT.issue_date:type_name -> google.protobuf.Timestamp
	28, // 12: ebl.v1.TransportDocumentT.shipped_onboard_date:type_name -> google.protobuf.Timestamp
	28, // 13: ebl.v1.TransportDocumentT.received_for_shipment_date:type_name -> google.protobuf.Timestamp
	28, // 14: ebl.v1.TransportDocumentT.created_date_time:type_name -> google.protobuf.Timestamp
	28, // 15: ebl.v1.TransportDocumentT.updated_date_time:type_name -> google.protobuf.Timestamp
	23, // 16: ebl.v1.CreateTransportDocumentSummaryResponse.transport_document_summary:type_name -> ebl.v1.TransportDocumentSummary
	23, // 17: ebl.v1.GetTransportDocumentSummariesResponse.transport_document_summaries:type_name -> ebl.v1.TransportDocumentSummary
	27, // 18: ebl.v1.GetTransportDocumentSummaryByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	23, // 19: ebl.v1.GetTransportDocumentSummaryByPkResponse.transport_document_summary:type_name -> ebl.v1.TransportDocumentSummary
	24, // 20: ebl.v1.TransportDocumentSummary.transport_document_summary_d:type_name -> ebl.v1.TransportDocumentSummaryD
	25, // 21: ebl.v1.TransportDocumentSummary.transport_document_summary_t:type_name -> ebl.v1.TransportDocumentSummaryT
	29, // 22: ebl.v1.TransportDocumentSummary.cr_upd_user:type_name -> common.v1.CrUpdUser
	30, // 23: ebl.v1.TransportDocumentSummary.cr_upd_time:type_name -> common.v1.CrUpdTime
	28, // 24: ebl.v1.TransportDocumentSummaryT.transport_document_created_date_time:type_name -> google.protobuf.Timestamp
	28, // 25: ebl.v1.TransportDocumentSummaryT.transport_document_updated_date_time:type_name -> google.protobuf.Timestamp
	28, // 26: ebl.v1.TransportDocumentSummaryT.issue_date:type_name -> google.protobuf.Timestamp
	28, // 27: ebl.v1.TransportDocumentSummaryT.shipped_onboard_date:type_name -> google.protobuf.Timestamp
	28, // 28: ebl.v1.TransportDocumentSummaryT.received_for_shipment_date:type_name -> google.protobuf.Timestamp
	0,  // 29: ebl.v1.TransportDocumentService.CreateTransportDocument:input_type -> ebl.v1.CreateTransportDocumentRequest
	8,  // 30: ebl.v1.TransportDocumentService.CreateTransportDocumentFromShippingInstructionTO:input_type -> ebl.v1.CreateTransportDocumentFromShippingInstructionTORequest
	11, // 31: ebl.v1.TransportDocumentService.GetTransportDocuments:input_type -> ebl.v1.GetTransportDocumentsRequest
	2,  // 32: ebl.v1.TransportDocumentService.FindTransportDocumentById:input_type -> ebl.v1.FindTransportDocumentByIdRequest
	4,  // 33: ebl.v1.TransportDocumentService.GetTransportDocumentByPk:input_type -> ebl.v1.GetTransportDocumentByPkRequest
	7,  // 34: ebl.v1.TransportDocumentService.FindByTransportDocumentReference:input_type -> ebl.v1.FindByTransportDocumentReferenceRequest
	12, // 35: ebl.v1.TransportDocumentService.ApproveTransportDocument:input_type -> ebl.v1.ApproveTransportDocumentRequest
	17, // 36: ebl.v1.TransportDocumentService.CreateTransportDocumentSummary:input_type -> ebl.v1.CreateTransportDocumentSummaryRequest
	20, // 37: ebl.v1.TransportDocumentService.GetTransportDocumentSummaries:input_type -> ebl.v1.GetTransportDocumentSummariesRequest
	21, // 38: ebl.v1.TransportDocumentService.GetTransportDocumentSummaryByPk:input_type -> ebl.v1.GetTransportDocumentSummaryByPkRequest
	1,  // 39: ebl.v1.TransportDocumentService.CreateTransportDocument:output_type -> ebl.v1.CreateTransportDocumentResponse
	9,  // 40: ebl.v1.TransportDocumentService.CreateTransportDocumentFromShippingInstructionTO:output_type -> ebl.v1.CreateTransportDocumentFromShippingInstructionTOResponse
	10, // 41: ebl.v1.TransportDocumentService.GetTransportDocuments:output_type -> ebl.v1.GetTransportDocumentsResponse
	3,  // 42: ebl.v1.TransportDocumentService.FindTransportDocumentById:output_type -> ebl.v1.FindTransportDocumentByIdResponse
	5,  // 43: ebl.v1.TransportDocumentService.GetTransportDocumentByPk:output_type -> ebl.v1.GetTransportDocumentByPkResponse
	6,  // 44: ebl.v1.TransportDocumentService.FindByTransportDocumentReference:output_type -> ebl.v1.FindByTransportDocumentReferenceResponse
	13, // 45: ebl.v1.TransportDocumentService.ApproveTransportDocument:output_type -> ebl.v1.ApproveTransportDocumentResponse
	18, // 46: ebl.v1.TransportDocumentService.CreateTransportDocumentSummary:output_type -> ebl.v1.CreateTransportDocumentSummaryResponse
	19, // 47: ebl.v1.TransportDocumentService.GetTransportDocumentSummaries:output_type -> ebl.v1.GetTransportDocumentSummariesResponse
	22, // 48: ebl.v1.TransportDocumentService.GetTransportDocumentSummaryByPk:output_type -> ebl.v1.GetTransportDocumentSummaryByPkResponse
	39, // [39:49] is the sub-list for method output_type
	29, // [29:39] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_ebl_v1_transportdocument_proto_init() }
func file_ebl_v1_transportdocument_proto_init() {
	if File_ebl_v1_transportdocument_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ebl_v1_transportdocument_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ebl_v1_transportdocument_proto_goTypes,
		DependencyIndexes: file_ebl_v1_transportdocument_proto_depIdxs,
		MessageInfos:      file_ebl_v1_transportdocument_proto_msgTypes,
	}.Build()
	File_ebl_v1_transportdocument_proto = out.File
	file_ebl_v1_transportdocument_proto_rawDesc = nil
	file_ebl_v1_transportdocument_proto_goTypes = nil
	file_ebl_v1_transportdocument_proto_depIdxs = nil
}
