// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ebl/v1/consignmentitem.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConsignmentItemService_CreateConsignmentItem_FullMethodName                               = "/ebl.v1.ConsignmentItemService/CreateConsignmentItem"
	ConsignmentItemService_CreateConsignmentItemsByShippingInstructionIdAndTOs_FullMethodName = "/ebl.v1.ConsignmentItemService/CreateConsignmentItemsByShippingInstructionIdAndTOs"
	ConsignmentItemService_FetchConsignmentItemsTOByShippingInstructionId_FullMethodName      = "/ebl.v1.ConsignmentItemService/FetchConsignmentItemsTOByShippingInstructionId"
	ConsignmentItemService_RemoveConsignmentItemsByShippingInstructionId_FullMethodName       = "/ebl.v1.ConsignmentItemService/RemoveConsignmentItemsByShippingInstructionId"
)

// ConsignmentItemServiceClient is the client API for ConsignmentItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The ConsignmentItemService service definition.
type ConsignmentItemServiceClient interface {
	CreateConsignmentItem(ctx context.Context, in *CreateConsignmentItemRequest, opts ...grpc.CallOption) (*CreateConsignmentItemResponse, error)
	CreateConsignmentItemsByShippingInstructionIdAndTOs(ctx context.Context, in *CreateConsignmentItemsByShippingInstructionIdAndTOsRequest, opts ...grpc.CallOption) (*CreateConsignmentItemsByShippingInstructionIdAndTOsResponse, error)
	FetchConsignmentItemsTOByShippingInstructionId(ctx context.Context, in *FetchConsignmentItemsTOByShippingInstructionIdRequest, opts ...grpc.CallOption) (*FetchConsignmentItemsTOByShippingInstructionIdResponse, error)
	RemoveConsignmentItemsByShippingInstructionId(ctx context.Context, in *RemoveConsignmentItemsByShippingInstructionIdRequest, opts ...grpc.CallOption) (*RemoveConsignmentItemsByShippingInstructionIdResponse, error)
}

type consignmentItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsignmentItemServiceClient(cc grpc.ClientConnInterface) ConsignmentItemServiceClient {
	return &consignmentItemServiceClient{cc}
}

func (c *consignmentItemServiceClient) CreateConsignmentItem(ctx context.Context, in *CreateConsignmentItemRequest, opts ...grpc.CallOption) (*CreateConsignmentItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConsignmentItemResponse)
	err := c.cc.Invoke(ctx, ConsignmentItemService_CreateConsignmentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consignmentItemServiceClient) CreateConsignmentItemsByShippingInstructionIdAndTOs(ctx context.Context, in *CreateConsignmentItemsByShippingInstructionIdAndTOsRequest, opts ...grpc.CallOption) (*CreateConsignmentItemsByShippingInstructionIdAndTOsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConsignmentItemsByShippingInstructionIdAndTOsResponse)
	err := c.cc.Invoke(ctx, ConsignmentItemService_CreateConsignmentItemsByShippingInstructionIdAndTOs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consignmentItemServiceClient) FetchConsignmentItemsTOByShippingInstructionId(ctx context.Context, in *FetchConsignmentItemsTOByShippingInstructionIdRequest, opts ...grpc.CallOption) (*FetchConsignmentItemsTOByShippingInstructionIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchConsignmentItemsTOByShippingInstructionIdResponse)
	err := c.cc.Invoke(ctx, ConsignmentItemService_FetchConsignmentItemsTOByShippingInstructionId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consignmentItemServiceClient) RemoveConsignmentItemsByShippingInstructionId(ctx context.Context, in *RemoveConsignmentItemsByShippingInstructionIdRequest, opts ...grpc.CallOption) (*RemoveConsignmentItemsByShippingInstructionIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveConsignmentItemsByShippingInstructionIdResponse)
	err := c.cc.Invoke(ctx, ConsignmentItemService_RemoveConsignmentItemsByShippingInstructionId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsignmentItemServiceServer is the server API for ConsignmentItemService service.
// All implementations must embed UnimplementedConsignmentItemServiceServer
// for forward compatibility.
//
// The ConsignmentItemService service definition.
type ConsignmentItemServiceServer interface {
	CreateConsignmentItem(context.Context, *CreateConsignmentItemRequest) (*CreateConsignmentItemResponse, error)
	CreateConsignmentItemsByShippingInstructionIdAndTOs(context.Context, *CreateConsignmentItemsByShippingInstructionIdAndTOsRequest) (*CreateConsignmentItemsByShippingInstructionIdAndTOsResponse, error)
	FetchConsignmentItemsTOByShippingInstructionId(context.Context, *FetchConsignmentItemsTOByShippingInstructionIdRequest) (*FetchConsignmentItemsTOByShippingInstructionIdResponse, error)
	RemoveConsignmentItemsByShippingInstructionId(context.Context, *RemoveConsignmentItemsByShippingInstructionIdRequest) (*RemoveConsignmentItemsByShippingInstructionIdResponse, error)
	mustEmbedUnimplementedConsignmentItemServiceServer()
}

// UnimplementedConsignmentItemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsignmentItemServiceServer struct{}

func (UnimplementedConsignmentItemServiceServer) CreateConsignmentItem(context.Context, *CreateConsignmentItemRequest) (*CreateConsignmentItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsignmentItem not implemented")
}
func (UnimplementedConsignmentItemServiceServer) CreateConsignmentItemsByShippingInstructionIdAndTOs(context.Context, *CreateConsignmentItemsByShippingInstructionIdAndTOsRequest) (*CreateConsignmentItemsByShippingInstructionIdAndTOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsignmentItemsByShippingInstructionIdAndTOs not implemented")
}
func (UnimplementedConsignmentItemServiceServer) FetchConsignmentItemsTOByShippingInstructionId(context.Context, *FetchConsignmentItemsTOByShippingInstructionIdRequest) (*FetchConsignmentItemsTOByShippingInstructionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchConsignmentItemsTOByShippingInstructionId not implemented")
}
func (UnimplementedConsignmentItemServiceServer) RemoveConsignmentItemsByShippingInstructionId(context.Context, *RemoveConsignmentItemsByShippingInstructionIdRequest) (*RemoveConsignmentItemsByShippingInstructionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveConsignmentItemsByShippingInstructionId not implemented")
}
func (UnimplementedConsignmentItemServiceServer) mustEmbedUnimplementedConsignmentItemServiceServer() {
}
func (UnimplementedConsignmentItemServiceServer) testEmbeddedByValue() {}

// UnsafeConsignmentItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsignmentItemServiceServer will
// result in compilation errors.
type UnsafeConsignmentItemServiceServer interface {
	mustEmbedUnimplementedConsignmentItemServiceServer()
}

func RegisterConsignmentItemServiceServer(s grpc.ServiceRegistrar, srv ConsignmentItemServiceServer) {
	// If the following call pancis, it indicates UnimplementedConsignmentItemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsignmentItemService_ServiceDesc, srv)
}

func _ConsignmentItemService_CreateConsignmentItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsignmentItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsignmentItemServiceServer).CreateConsignmentItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsignmentItemService_CreateConsignmentItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsignmentItemServiceServer).CreateConsignmentItem(ctx, req.(*CreateConsignmentItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsignmentItemService_CreateConsignmentItemsByShippingInstructionIdAndTOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsignmentItemsByShippingInstructionIdAndTOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsignmentItemServiceServer).CreateConsignmentItemsByShippingInstructionIdAndTOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsignmentItemService_CreateConsignmentItemsByShippingInstructionIdAndTOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsignmentItemServiceServer).CreateConsignmentItemsByShippingInstructionIdAndTOs(ctx, req.(*CreateConsignmentItemsByShippingInstructionIdAndTOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsignmentItemService_FetchConsignmentItemsTOByShippingInstructionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchConsignmentItemsTOByShippingInstructionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsignmentItemServiceServer).FetchConsignmentItemsTOByShippingInstructionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsignmentItemService_FetchConsignmentItemsTOByShippingInstructionId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsignmentItemServiceServer).FetchConsignmentItemsTOByShippingInstructionId(ctx, req.(*FetchConsignmentItemsTOByShippingInstructionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsignmentItemService_RemoveConsignmentItemsByShippingInstructionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveConsignmentItemsByShippingInstructionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsignmentItemServiceServer).RemoveConsignmentItemsByShippingInstructionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsignmentItemService_RemoveConsignmentItemsByShippingInstructionId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsignmentItemServiceServer).RemoveConsignmentItemsByShippingInstructionId(ctx, req.(*RemoveConsignmentItemsByShippingInstructionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsignmentItemService_ServiceDesc is the grpc.ServiceDesc for ConsignmentItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsignmentItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ebl.v1.ConsignmentItemService",
	HandlerType: (*ConsignmentItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConsignmentItem",
			Handler:    _ConsignmentItemService_CreateConsignmentItem_Handler,
		},
		{
			MethodName: "CreateConsignmentItemsByShippingInstructionIdAndTOs",
			Handler:    _ConsignmentItemService_CreateConsignmentItemsByShippingInstructionIdAndTOs_Handler,
		},
		{
			MethodName: "FetchConsignmentItemsTOByShippingInstructionId",
			Handler:    _ConsignmentItemService_FetchConsignmentItemsTOByShippingInstructionId_Handler,
		},
		{
			MethodName: "RemoveConsignmentItemsByShippingInstructionId",
			Handler:    _ConsignmentItemService_RemoveConsignmentItemsByShippingInstructionId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ebl/v1/consignmentitem.proto",
}
