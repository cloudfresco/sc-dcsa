// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ebl/v1/shippinginstructionsummary.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateShippingInstructionSummaryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateShippingInstructionSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateShippingInstructionSummaryResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateShippingInstructionSummaryResponseMultiError, or nil if none found.
func (m *CreateShippingInstructionSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShippingInstructionSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShippingInstructionSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShippingInstructionSummaryResponseValidationError{
					field:  "ShippingInstructionSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShippingInstructionSummaryResponseValidationError{
					field:  "ShippingInstructionSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingInstructionSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShippingInstructionSummaryResponseValidationError{
				field:  "ShippingInstructionSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShippingInstructionSummaryResponseMultiError(errors)
	}

	return nil
}

// CreateShippingInstructionSummaryResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateShippingInstructionSummaryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateShippingInstructionSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShippingInstructionSummaryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShippingInstructionSummaryResponseMultiError) AllErrors() []error { return m }

// CreateShippingInstructionSummaryResponseValidationError is the validation
// error returned by CreateShippingInstructionSummaryResponse.Validate if the
// designated constraints aren't met.
type CreateShippingInstructionSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShippingInstructionSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShippingInstructionSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShippingInstructionSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShippingInstructionSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShippingInstructionSummaryResponseValidationError) ErrorName() string {
	return "CreateShippingInstructionSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShippingInstructionSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShippingInstructionSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShippingInstructionSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShippingInstructionSummaryResponseValidationError{}

// Validate checks the field values on ShippingInstructionSummary with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShippingInstructionSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShippingInstructionSummary with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShippingInstructionSummaryMultiError, or nil if none found.
func (m *ShippingInstructionSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ShippingInstructionSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShippingInstructionSummaryD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShippingInstructionSummaryValidationError{
					field:  "ShippingInstructionSummaryD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShippingInstructionSummaryValidationError{
					field:  "ShippingInstructionSummaryD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingInstructionSummaryD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShippingInstructionSummaryValidationError{
				field:  "ShippingInstructionSummaryD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShippingInstructionSummaryT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShippingInstructionSummaryValidationError{
					field:  "ShippingInstructionSummaryT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShippingInstructionSummaryValidationError{
					field:  "ShippingInstructionSummaryT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingInstructionSummaryT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShippingInstructionSummaryValidationError{
				field:  "ShippingInstructionSummaryT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShippingInstructionSummaryValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShippingInstructionSummaryValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShippingInstructionSummaryValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShippingInstructionSummaryValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShippingInstructionSummaryValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShippingInstructionSummaryValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShippingInstructionSummaryMultiError(errors)
	}

	return nil
}

// ShippingInstructionSummaryMultiError is an error wrapping multiple
// validation errors returned by ShippingInstructionSummary.ValidateAll() if
// the designated constraints aren't met.
type ShippingInstructionSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShippingInstructionSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShippingInstructionSummaryMultiError) AllErrors() []error { return m }

// ShippingInstructionSummaryValidationError is the validation error returned
// by ShippingInstructionSummary.Validate if the designated constraints aren't met.
type ShippingInstructionSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShippingInstructionSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShippingInstructionSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShippingInstructionSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShippingInstructionSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShippingInstructionSummaryValidationError) ErrorName() string {
	return "ShippingInstructionSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e ShippingInstructionSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShippingInstructionSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShippingInstructionSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShippingInstructionSummaryValidationError{}

// Validate checks the field values on ShippingInstructionSummaryD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShippingInstructionSummaryD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShippingInstructionSummaryD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShippingInstructionSummaryDMultiError, or nil if none found.
func (m *ShippingInstructionSummaryD) ValidateAll() error {
	return m.validate(true)
}

func (m *ShippingInstructionSummaryD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for ShippingInstructionReference

	// no validation rules for DocumentStatus

	// no validation rules for AmendToTransportDocument

	// no validation rules for TransportDocumentTypeCode

	// no validation rules for IsShippedOnboardType

	// no validation rules for NumberOfCopies

	// no validation rules for NumberOfOriginals

	// no validation rules for IsElectronic

	// no validation rules for IsToOrder

	// no validation rules for AreChargesDisplayedOnOriginals

	// no validation rules for AreChargesDisplayedOnCopies

	// no validation rules for DisplayedNameForPlaceOfReceipt

	// no validation rules for DisplayedNameForPortOfLoad

	// no validation rules for DisplayedNameForPortOfDischarge

	// no validation rules for DisplayedNameForPlaceOfDelivery

	if len(errors) > 0 {
		return ShippingInstructionSummaryDMultiError(errors)
	}

	return nil
}

// ShippingInstructionSummaryDMultiError is an error wrapping multiple
// validation errors returned by ShippingInstructionSummaryD.ValidateAll() if
// the designated constraints aren't met.
type ShippingInstructionSummaryDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShippingInstructionSummaryDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShippingInstructionSummaryDMultiError) AllErrors() []error { return m }

// ShippingInstructionSummaryDValidationError is the validation error returned
// by ShippingInstructionSummaryD.Validate if the designated constraints
// aren't met.
type ShippingInstructionSummaryDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShippingInstructionSummaryDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShippingInstructionSummaryDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShippingInstructionSummaryDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShippingInstructionSummaryDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShippingInstructionSummaryDValidationError) ErrorName() string {
	return "ShippingInstructionSummaryDValidationError"
}

// Error satisfies the builtin error interface
func (e ShippingInstructionSummaryDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShippingInstructionSummaryD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShippingInstructionSummaryDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShippingInstructionSummaryDValidationError{}

// Validate checks the field values on ShippingInstructionSummaryT with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShippingInstructionSummaryT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShippingInstructionSummaryT with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShippingInstructionSummaryTMultiError, or nil if none found.
func (m *ShippingInstructionSummaryT) ValidateAll() error {
	return m.validate(true)
}

func (m *ShippingInstructionSummaryT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShippingInstructionCreatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShippingInstructionSummaryTValidationError{
					field:  "ShippingInstructionCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShippingInstructionSummaryTValidationError{
					field:  "ShippingInstructionCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingInstructionCreatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShippingInstructionSummaryTValidationError{
				field:  "ShippingInstructionCreatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShippingInstructionUpdatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShippingInstructionSummaryTValidationError{
					field:  "ShippingInstructionUpdatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShippingInstructionSummaryTValidationError{
					field:  "ShippingInstructionUpdatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingInstructionUpdatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShippingInstructionSummaryTValidationError{
				field:  "ShippingInstructionUpdatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShippingInstructionSummaryTMultiError(errors)
	}

	return nil
}

// ShippingInstructionSummaryTMultiError is an error wrapping multiple
// validation errors returned by ShippingInstructionSummaryT.ValidateAll() if
// the designated constraints aren't met.
type ShippingInstructionSummaryTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShippingInstructionSummaryTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShippingInstructionSummaryTMultiError) AllErrors() []error { return m }

// ShippingInstructionSummaryTValidationError is the validation error returned
// by ShippingInstructionSummaryT.Validate if the designated constraints
// aren't met.
type ShippingInstructionSummaryTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShippingInstructionSummaryTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShippingInstructionSummaryTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShippingInstructionSummaryTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShippingInstructionSummaryTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShippingInstructionSummaryTValidationError) ErrorName() string {
	return "ShippingInstructionSummaryTValidationError"
}

// Error satisfies the builtin error interface
func (e ShippingInstructionSummaryTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShippingInstructionSummaryT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShippingInstructionSummaryTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShippingInstructionSummaryTValidationError{}

// Validate checks the field values on CreateShippingInstructionSummaryRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateShippingInstructionSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateShippingInstructionSummaryRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateShippingInstructionSummaryRequestMultiError, or nil if none found.
func (m *CreateShippingInstructionSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShippingInstructionSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShippingInstructionReference

	// no validation rules for DocumentStatus

	// no validation rules for ShippingInstructionCreatedDateTime

	// no validation rules for ShippingInstructionUpdatedDateTime

	// no validation rules for AmendToTransportDocument

	// no validation rules for TransportDocumentTypeCode

	// no validation rules for IsShippedOnboardType

	// no validation rules for NumberOfCopies

	// no validation rules for NumberOfOriginals

	// no validation rules for IsElectronic

	// no validation rules for IsToOrder

	// no validation rules for AreChargesDisplayedOnOriginals

	// no validation rules for AreChargesDisplayedOnCopies

	// no validation rules for DisplayedNameForPlaceOfReceipt

	// no validation rules for DisplayedNameForPortOfLoad

	// no validation rules for DisplayedNameForPortOfDischarge

	// no validation rules for DisplayedNameForPlaceOfDelivery

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateShippingInstructionSummaryRequestMultiError(errors)
	}

	return nil
}

// CreateShippingInstructionSummaryRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateShippingInstructionSummaryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateShippingInstructionSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShippingInstructionSummaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShippingInstructionSummaryRequestMultiError) AllErrors() []error { return m }

// CreateShippingInstructionSummaryRequestValidationError is the validation
// error returned by CreateShippingInstructionSummaryRequest.Validate if the
// designated constraints aren't met.
type CreateShippingInstructionSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShippingInstructionSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShippingInstructionSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShippingInstructionSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShippingInstructionSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShippingInstructionSummaryRequestValidationError) ErrorName() string {
	return "CreateShippingInstructionSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShippingInstructionSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShippingInstructionSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShippingInstructionSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShippingInstructionSummaryRequestValidationError{}

// Validate checks the field values on GetShippingInstructionSummariesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetShippingInstructionSummariesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetShippingInstructionSummariesResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetShippingInstructionSummariesResponseMultiError, or nil if none found.
func (m *GetShippingInstructionSummariesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShippingInstructionSummariesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetShippingInstructionSummaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetShippingInstructionSummariesResponseValidationError{
						field:  fmt.Sprintf("ShippingInstructionSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetShippingInstructionSummariesResponseValidationError{
						field:  fmt.Sprintf("ShippingInstructionSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetShippingInstructionSummariesResponseValidationError{
					field:  fmt.Sprintf("ShippingInstructionSummaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetShippingInstructionSummariesResponseMultiError(errors)
	}

	return nil
}

// GetShippingInstructionSummariesResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetShippingInstructionSummariesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetShippingInstructionSummariesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShippingInstructionSummariesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShippingInstructionSummariesResponseMultiError) AllErrors() []error { return m }

// GetShippingInstructionSummariesResponseValidationError is the validation
// error returned by GetShippingInstructionSummariesResponse.Validate if the
// designated constraints aren't met.
type GetShippingInstructionSummariesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShippingInstructionSummariesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShippingInstructionSummariesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShippingInstructionSummariesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShippingInstructionSummariesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShippingInstructionSummariesResponseValidationError) ErrorName() string {
	return "GetShippingInstructionSummariesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShippingInstructionSummariesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShippingInstructionSummariesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShippingInstructionSummariesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShippingInstructionSummariesResponseValidationError{}

// Validate checks the field values on GetShippingInstructionSummariesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetShippingInstructionSummariesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetShippingInstructionSummariesRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetShippingInstructionSummariesRequestMultiError, or nil if none found.
func (m *GetShippingInstructionSummariesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShippingInstructionSummariesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetShippingInstructionSummariesRequestMultiError(errors)
	}

	return nil
}

// GetShippingInstructionSummariesRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetShippingInstructionSummariesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetShippingInstructionSummariesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShippingInstructionSummariesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShippingInstructionSummariesRequestMultiError) AllErrors() []error { return m }

// GetShippingInstructionSummariesRequestValidationError is the validation
// error returned by GetShippingInstructionSummariesRequest.Validate if the
// designated constraints aren't met.
type GetShippingInstructionSummariesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShippingInstructionSummariesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShippingInstructionSummariesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShippingInstructionSummariesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShippingInstructionSummariesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShippingInstructionSummariesRequestValidationError) ErrorName() string {
	return "GetShippingInstructionSummariesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShippingInstructionSummariesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShippingInstructionSummariesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShippingInstructionSummariesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShippingInstructionSummariesRequestValidationError{}
