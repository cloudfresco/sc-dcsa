// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ebl/v1/consignmentitem.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateConsignmentItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConsignmentItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConsignmentItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConsignmentItemRequestMultiError, or nil if none found.
func (m *CreateConsignmentItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConsignmentItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DescriptionOfGoods

	// no validation rules for HsCode

	// no validation rules for ShippingInstructionId

	// no validation rules for Weight

	// no validation rules for Volume

	// no validation rules for WeightUnit

	// no validation rules for VolumeUnit

	// no validation rules for ShipmentId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	for idx, item := range m.GetCargoItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateConsignmentItemRequestValidationError{
						field:  fmt.Sprintf("CargoItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateConsignmentItemRequestValidationError{
						field:  fmt.Sprintf("CargoItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateConsignmentItemRequestValidationError{
					field:  fmt.Sprintf("CargoItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateConsignmentItemRequestMultiError(errors)
	}

	return nil
}

// CreateConsignmentItemRequestMultiError is an error wrapping multiple
// validation errors returned by CreateConsignmentItemRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateConsignmentItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConsignmentItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConsignmentItemRequestMultiError) AllErrors() []error { return m }

// CreateConsignmentItemRequestValidationError is the validation error returned
// by CreateConsignmentItemRequest.Validate if the designated constraints
// aren't met.
type CreateConsignmentItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConsignmentItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConsignmentItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConsignmentItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConsignmentItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConsignmentItemRequestValidationError) ErrorName() string {
	return "CreateConsignmentItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConsignmentItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConsignmentItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConsignmentItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConsignmentItemRequestValidationError{}

// Validate checks the field values on
// CreateConsignmentItemsByShippingInstructionIdAndTOsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConsignmentItemsByShippingInstructionIdAndTOsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateConsignmentItemsByShippingInstructionIdAndTOsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConsignmentItemsByShippingInstructionIdAndTOsRequestMultiError, or
// nil if none found.
func (m *CreateConsignmentItemsByShippingInstructionIdAndTOsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConsignmentItemsByShippingInstructionIdAndTOsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreateConsignmentItemRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateConsignmentItemsByShippingInstructionIdAndTOsRequestValidationError{
					field:  "CreateConsignmentItemRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateConsignmentItemsByShippingInstructionIdAndTOsRequestValidationError{
					field:  "CreateConsignmentItemRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateConsignmentItemRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateConsignmentItemsByShippingInstructionIdAndTOsRequestValidationError{
				field:  "CreateConsignmentItemRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateConsignmentItemsByShippingInstructionIdAndTOsRequestMultiError(errors)
	}

	return nil
}

// CreateConsignmentItemsByShippingInstructionIdAndTOsRequestMultiError is an
// error wrapping multiple validation errors returned by
// CreateConsignmentItemsByShippingInstructionIdAndTOsRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateConsignmentItemsByShippingInstructionIdAndTOsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConsignmentItemsByShippingInstructionIdAndTOsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConsignmentItemsByShippingInstructionIdAndTOsRequestMultiError) AllErrors() []error {
	return m
}

// CreateConsignmentItemsByShippingInstructionIdAndTOsRequestValidationError is
// the validation error returned by
// CreateConsignmentItemsByShippingInstructionIdAndTOsRequest.Validate if the
// designated constraints aren't met.
type CreateConsignmentItemsByShippingInstructionIdAndTOsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConsignmentItemsByShippingInstructionIdAndTOsRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateConsignmentItemsByShippingInstructionIdAndTOsRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateConsignmentItemsByShippingInstructionIdAndTOsRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateConsignmentItemsByShippingInstructionIdAndTOsRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e CreateConsignmentItemsByShippingInstructionIdAndTOsRequestValidationError) ErrorName() string {
	return "CreateConsignmentItemsByShippingInstructionIdAndTOsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConsignmentItemsByShippingInstructionIdAndTOsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConsignmentItemsByShippingInstructionIdAndTOsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConsignmentItemsByShippingInstructionIdAndTOsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConsignmentItemsByShippingInstructionIdAndTOsRequestValidationError{}

// Validate checks the field values on CreateConsignmentItemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConsignmentItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConsignmentItemResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateConsignmentItemResponseMultiError, or nil if none found.
func (m *CreateConsignmentItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConsignmentItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConsignmentItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateConsignmentItemResponseValidationError{
					field:  "ConsignmentItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateConsignmentItemResponseValidationError{
					field:  "ConsignmentItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsignmentItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateConsignmentItemResponseValidationError{
				field:  "ConsignmentItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateConsignmentItemResponseMultiError(errors)
	}

	return nil
}

// CreateConsignmentItemResponseMultiError is an error wrapping multiple
// validation errors returned by CreateConsignmentItemResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateConsignmentItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConsignmentItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConsignmentItemResponseMultiError) AllErrors() []error { return m }

// CreateConsignmentItemResponseValidationError is the validation error
// returned by CreateConsignmentItemResponse.Validate if the designated
// constraints aren't met.
type CreateConsignmentItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConsignmentItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConsignmentItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConsignmentItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConsignmentItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConsignmentItemResponseValidationError) ErrorName() string {
	return "CreateConsignmentItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConsignmentItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConsignmentItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConsignmentItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConsignmentItemResponseValidationError{}

// Validate checks the field values on
// CreateConsignmentItemsByShippingInstructionIdAndTOsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConsignmentItemsByShippingInstructionIdAndTOsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateConsignmentItemsByShippingInstructionIdAndTOsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConsignmentItemsByShippingInstructionIdAndTOsResponseMultiError, or
// nil if none found.
func (m *CreateConsignmentItemsByShippingInstructionIdAndTOsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConsignmentItemsByShippingInstructionIdAndTOsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConsignmentItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateConsignmentItemsByShippingInstructionIdAndTOsResponseValidationError{
					field:  "ConsignmentItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateConsignmentItemsByShippingInstructionIdAndTOsResponseValidationError{
					field:  "ConsignmentItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsignmentItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateConsignmentItemsByShippingInstructionIdAndTOsResponseValidationError{
				field:  "ConsignmentItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateConsignmentItemsByShippingInstructionIdAndTOsResponseMultiError(errors)
	}

	return nil
}

// CreateConsignmentItemsByShippingInstructionIdAndTOsResponseMultiError is an
// error wrapping multiple validation errors returned by
// CreateConsignmentItemsByShippingInstructionIdAndTOsResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateConsignmentItemsByShippingInstructionIdAndTOsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConsignmentItemsByShippingInstructionIdAndTOsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConsignmentItemsByShippingInstructionIdAndTOsResponseMultiError) AllErrors() []error {
	return m
}

// CreateConsignmentItemsByShippingInstructionIdAndTOsResponseValidationError
// is the validation error returned by
// CreateConsignmentItemsByShippingInstructionIdAndTOsResponse.Validate if the
// designated constraints aren't met.
type CreateConsignmentItemsByShippingInstructionIdAndTOsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConsignmentItemsByShippingInstructionIdAndTOsResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateConsignmentItemsByShippingInstructionIdAndTOsResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateConsignmentItemsByShippingInstructionIdAndTOsResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateConsignmentItemsByShippingInstructionIdAndTOsResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e CreateConsignmentItemsByShippingInstructionIdAndTOsResponseValidationError) ErrorName() string {
	return "CreateConsignmentItemsByShippingInstructionIdAndTOsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConsignmentItemsByShippingInstructionIdAndTOsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConsignmentItemsByShippingInstructionIdAndTOsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConsignmentItemsByShippingInstructionIdAndTOsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConsignmentItemsByShippingInstructionIdAndTOsResponseValidationError{}

// Validate checks the field values on
// FetchConsignmentItemsTOByShippingInstructionIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchConsignmentItemsTOByShippingInstructionIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FetchConsignmentItemsTOByShippingInstructionIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchConsignmentItemsTOByShippingInstructionIdRequestMultiError, or nil if
// none found.
func (m *FetchConsignmentItemsTOByShippingInstructionIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchConsignmentItemsTOByShippingInstructionIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShippingInstructionId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FetchConsignmentItemsTOByShippingInstructionIdRequestMultiError(errors)
	}

	return nil
}

// FetchConsignmentItemsTOByShippingInstructionIdRequestMultiError is an error
// wrapping multiple validation errors returned by
// FetchConsignmentItemsTOByShippingInstructionIdRequest.ValidateAll() if the
// designated constraints aren't met.
type FetchConsignmentItemsTOByShippingInstructionIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchConsignmentItemsTOByShippingInstructionIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchConsignmentItemsTOByShippingInstructionIdRequestMultiError) AllErrors() []error {
	return m
}

// FetchConsignmentItemsTOByShippingInstructionIdRequestValidationError is the
// validation error returned by
// FetchConsignmentItemsTOByShippingInstructionIdRequest.Validate if the
// designated constraints aren't met.
type FetchConsignmentItemsTOByShippingInstructionIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchConsignmentItemsTOByShippingInstructionIdRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FetchConsignmentItemsTOByShippingInstructionIdRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FetchConsignmentItemsTOByShippingInstructionIdRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FetchConsignmentItemsTOByShippingInstructionIdRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e FetchConsignmentItemsTOByShippingInstructionIdRequestValidationError) ErrorName() string {
	return "FetchConsignmentItemsTOByShippingInstructionIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchConsignmentItemsTOByShippingInstructionIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchConsignmentItemsTOByShippingInstructionIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchConsignmentItemsTOByShippingInstructionIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchConsignmentItemsTOByShippingInstructionIdRequestValidationError{}

// Validate checks the field values on
// FetchConsignmentItemsTOByShippingInstructionIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchConsignmentItemsTOByShippingInstructionIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FetchConsignmentItemsTOByShippingInstructionIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchConsignmentItemsTOByShippingInstructionIdResponseMultiError, or nil if
// none found.
func (m *FetchConsignmentItemsTOByShippingInstructionIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchConsignmentItemsTOByShippingInstructionIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConsignmentItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FetchConsignmentItemsTOByShippingInstructionIdResponseValidationError{
					field:  "ConsignmentItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FetchConsignmentItemsTOByShippingInstructionIdResponseValidationError{
					field:  "ConsignmentItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsignmentItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FetchConsignmentItemsTOByShippingInstructionIdResponseValidationError{
				field:  "ConsignmentItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FetchConsignmentItemsTOByShippingInstructionIdResponseMultiError(errors)
	}

	return nil
}

// FetchConsignmentItemsTOByShippingInstructionIdResponseMultiError is an error
// wrapping multiple validation errors returned by
// FetchConsignmentItemsTOByShippingInstructionIdResponse.ValidateAll() if the
// designated constraints aren't met.
type FetchConsignmentItemsTOByShippingInstructionIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchConsignmentItemsTOByShippingInstructionIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchConsignmentItemsTOByShippingInstructionIdResponseMultiError) AllErrors() []error {
	return m
}

// FetchConsignmentItemsTOByShippingInstructionIdResponseValidationError is the
// validation error returned by
// FetchConsignmentItemsTOByShippingInstructionIdResponse.Validate if the
// designated constraints aren't met.
type FetchConsignmentItemsTOByShippingInstructionIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchConsignmentItemsTOByShippingInstructionIdResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FetchConsignmentItemsTOByShippingInstructionIdResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FetchConsignmentItemsTOByShippingInstructionIdResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FetchConsignmentItemsTOByShippingInstructionIdResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e FetchConsignmentItemsTOByShippingInstructionIdResponseValidationError) ErrorName() string {
	return "FetchConsignmentItemsTOByShippingInstructionIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchConsignmentItemsTOByShippingInstructionIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchConsignmentItemsTOByShippingInstructionIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchConsignmentItemsTOByShippingInstructionIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchConsignmentItemsTOByShippingInstructionIdResponseValidationError{}

// Validate checks the field values on
// RemoveConsignmentItemsByShippingInstructionIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveConsignmentItemsByShippingInstructionIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RemoveConsignmentItemsByShippingInstructionIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RemoveConsignmentItemsByShippingInstructionIdRequestMultiError, or nil if
// none found.
func (m *RemoveConsignmentItemsByShippingInstructionIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveConsignmentItemsByShippingInstructionIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShippingInstructionId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return RemoveConsignmentItemsByShippingInstructionIdRequestMultiError(errors)
	}

	return nil
}

// RemoveConsignmentItemsByShippingInstructionIdRequestMultiError is an error
// wrapping multiple validation errors returned by
// RemoveConsignmentItemsByShippingInstructionIdRequest.ValidateAll() if the
// designated constraints aren't met.
type RemoveConsignmentItemsByShippingInstructionIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveConsignmentItemsByShippingInstructionIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveConsignmentItemsByShippingInstructionIdRequestMultiError) AllErrors() []error { return m }

// RemoveConsignmentItemsByShippingInstructionIdRequestValidationError is the
// validation error returned by
// RemoveConsignmentItemsByShippingInstructionIdRequest.Validate if the
// designated constraints aren't met.
type RemoveConsignmentItemsByShippingInstructionIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveConsignmentItemsByShippingInstructionIdRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RemoveConsignmentItemsByShippingInstructionIdRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RemoveConsignmentItemsByShippingInstructionIdRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RemoveConsignmentItemsByShippingInstructionIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveConsignmentItemsByShippingInstructionIdRequestValidationError) ErrorName() string {
	return "RemoveConsignmentItemsByShippingInstructionIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveConsignmentItemsByShippingInstructionIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveConsignmentItemsByShippingInstructionIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveConsignmentItemsByShippingInstructionIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveConsignmentItemsByShippingInstructionIdRequestValidationError{}

// Validate checks the field values on
// RemoveConsignmentItemsByShippingInstructionIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveConsignmentItemsByShippingInstructionIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RemoveConsignmentItemsByShippingInstructionIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveConsignmentItemsByShippingInstructionIdResponseMultiError, or nil if
// none found.
func (m *RemoveConsignmentItemsByShippingInstructionIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveConsignmentItemsByShippingInstructionIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveConsignmentItemsByShippingInstructionIdResponseMultiError(errors)
	}

	return nil
}

// RemoveConsignmentItemsByShippingInstructionIdResponseMultiError is an error
// wrapping multiple validation errors returned by
// RemoveConsignmentItemsByShippingInstructionIdResponse.ValidateAll() if the
// designated constraints aren't met.
type RemoveConsignmentItemsByShippingInstructionIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveConsignmentItemsByShippingInstructionIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveConsignmentItemsByShippingInstructionIdResponseMultiError) AllErrors() []error {
	return m
}

// RemoveConsignmentItemsByShippingInstructionIdResponseValidationError is the
// validation error returned by
// RemoveConsignmentItemsByShippingInstructionIdResponse.Validate if the
// designated constraints aren't met.
type RemoveConsignmentItemsByShippingInstructionIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveConsignmentItemsByShippingInstructionIdResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RemoveConsignmentItemsByShippingInstructionIdResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RemoveConsignmentItemsByShippingInstructionIdResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RemoveConsignmentItemsByShippingInstructionIdResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RemoveConsignmentItemsByShippingInstructionIdResponseValidationError) ErrorName() string {
	return "RemoveConsignmentItemsByShippingInstructionIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveConsignmentItemsByShippingInstructionIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveConsignmentItemsByShippingInstructionIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveConsignmentItemsByShippingInstructionIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveConsignmentItemsByShippingInstructionIdResponseValidationError{}

// Validate checks the field values on CargoItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CargoItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CargoItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CargoItemMultiError, or nil
// if none found.
func (m *CargoItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CargoItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCargoItemD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CargoItemValidationError{
					field:  "CargoItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CargoItemValidationError{
					field:  "CargoItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCargoItemD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CargoItemValidationError{
				field:  "CargoItemD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CargoItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CargoItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CargoItemValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CargoItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CargoItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CargoItemValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCargoLineItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CargoItemValidationError{
						field:  fmt.Sprintf("CargoLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CargoItemValidationError{
						field:  fmt.Sprintf("CargoLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CargoItemValidationError{
					field:  fmt.Sprintf("CargoLineItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CargoItemMultiError(errors)
	}

	return nil
}

// CargoItemMultiError is an error wrapping multiple validation errors returned
// by CargoItem.ValidateAll() if the designated constraints aren't met.
type CargoItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CargoItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CargoItemMultiError) AllErrors() []error { return m }

// CargoItemValidationError is the validation error returned by
// CargoItem.Validate if the designated constraints aren't met.
type CargoItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CargoItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CargoItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CargoItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CargoItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CargoItemValidationError) ErrorName() string { return "CargoItemValidationError" }

// Error satisfies the builtin error interface
func (e CargoItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCargoItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CargoItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CargoItemValidationError{}

// Validate checks the field values on CargoItemD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CargoItemD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CargoItemD with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CargoItemDMultiError, or
// nil if none found.
func (m *CargoItemD) ValidateAll() error {
	return m.validate(true)
}

func (m *CargoItemD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for ConsignmentItemId

	// no validation rules for Weight

	// no validation rules for Volume

	// no validation rules for WeightUnit

	// no validation rules for VolumeUnit

	// no validation rules for NumberOfPackages

	// no validation rules for PackageCode

	// no validation rules for UtilizedTransportEquipmentId

	// no validation rules for PackageNameOnBl

	if len(errors) > 0 {
		return CargoItemDMultiError(errors)
	}

	return nil
}

// CargoItemDMultiError is an error wrapping multiple validation errors
// returned by CargoItemD.ValidateAll() if the designated constraints aren't met.
type CargoItemDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CargoItemDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CargoItemDMultiError) AllErrors() []error { return m }

// CargoItemDValidationError is the validation error returned by
// CargoItemD.Validate if the designated constraints aren't met.
type CargoItemDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CargoItemDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CargoItemDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CargoItemDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CargoItemDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CargoItemDValidationError) ErrorName() string { return "CargoItemDValidationError" }

// Error satisfies the builtin error interface
func (e CargoItemDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCargoItemD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CargoItemDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CargoItemDValidationError{}

// Validate checks the field values on CreateCargoItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCargoItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCargoItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCargoItemRequestMultiError, or nil if none found.
func (m *CreateCargoItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCargoItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConsignmentItemId

	// no validation rules for Weight

	// no validation rules for Volume

	// no validation rules for WeightUnit

	// no validation rules for VolumeUnit

	// no validation rules for NumberOfPackages

	// no validation rules for PackageCode

	// no validation rules for UtilizedTransportEquipmentId

	// no validation rules for PackageNameOnBl

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	for idx, item := range m.GetCargoLineItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCargoItemRequestValidationError{
						field:  fmt.Sprintf("CargoLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCargoItemRequestValidationError{
						field:  fmt.Sprintf("CargoLineItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCargoItemRequestValidationError{
					field:  fmt.Sprintf("CargoLineItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCargoItemRequestMultiError(errors)
	}

	return nil
}

// CreateCargoItemRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCargoItemRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCargoItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCargoItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCargoItemRequestMultiError) AllErrors() []error { return m }

// CreateCargoItemRequestValidationError is the validation error returned by
// CreateCargoItemRequest.Validate if the designated constraints aren't met.
type CreateCargoItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCargoItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCargoItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCargoItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCargoItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCargoItemRequestValidationError) ErrorName() string {
	return "CreateCargoItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCargoItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCargoItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCargoItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCargoItemRequestValidationError{}

// Validate checks the field values on CargoLineItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CargoLineItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CargoLineItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CargoLineItemMultiError, or
// nil if none found.
func (m *CargoLineItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CargoLineItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCargoLineItemD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CargoLineItemValidationError{
					field:  "CargoLineItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CargoLineItemValidationError{
					field:  "CargoLineItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCargoLineItemD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CargoLineItemValidationError{
				field:  "CargoLineItemD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CargoLineItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CargoLineItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CargoLineItemValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CargoLineItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CargoLineItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CargoLineItemValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CargoLineItemMultiError(errors)
	}

	return nil
}

// CargoLineItemMultiError is an error wrapping multiple validation errors
// returned by CargoLineItem.ValidateAll() if the designated constraints
// aren't met.
type CargoLineItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CargoLineItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CargoLineItemMultiError) AllErrors() []error { return m }

// CargoLineItemValidationError is the validation error returned by
// CargoLineItem.Validate if the designated constraints aren't met.
type CargoLineItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CargoLineItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CargoLineItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CargoLineItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CargoLineItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CargoLineItemValidationError) ErrorName() string { return "CargoLineItemValidationError" }

// Error satisfies the builtin error interface
func (e CargoLineItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCargoLineItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CargoLineItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CargoLineItemValidationError{}

// Validate checks the field values on CargoLineItemD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CargoLineItemD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CargoLineItemD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CargoLineItemDMultiError,
// or nil if none found.
func (m *CargoLineItemD) ValidateAll() error {
	return m.validate(true)
}

func (m *CargoLineItemD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for CargoItemId

	// no validation rules for ShippingMarks

	if len(errors) > 0 {
		return CargoLineItemDMultiError(errors)
	}

	return nil
}

// CargoLineItemDMultiError is an error wrapping multiple validation errors
// returned by CargoLineItemD.ValidateAll() if the designated constraints
// aren't met.
type CargoLineItemDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CargoLineItemDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CargoLineItemDMultiError) AllErrors() []error { return m }

// CargoLineItemDValidationError is the validation error returned by
// CargoLineItemD.Validate if the designated constraints aren't met.
type CargoLineItemDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CargoLineItemDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CargoLineItemDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CargoLineItemDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CargoLineItemDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CargoLineItemDValidationError) ErrorName() string { return "CargoLineItemDValidationError" }

// Error satisfies the builtin error interface
func (e CargoLineItemDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCargoLineItemD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CargoLineItemDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CargoLineItemDValidationError{}

// Validate checks the field values on CreateCargoLineItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCargoLineItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCargoLineItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCargoLineItemRequestMultiError, or nil if none found.
func (m *CreateCargoLineItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCargoLineItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CargoItemId

	// no validation rules for ShippingMarks

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateCargoLineItemRequestMultiError(errors)
	}

	return nil
}

// CreateCargoLineItemRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCargoLineItemRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateCargoLineItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCargoLineItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCargoLineItemRequestMultiError) AllErrors() []error { return m }

// CreateCargoLineItemRequestValidationError is the validation error returned
// by CreateCargoLineItemRequest.Validate if the designated constraints aren't met.
type CreateCargoLineItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCargoLineItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCargoLineItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCargoLineItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCargoLineItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCargoLineItemRequestValidationError) ErrorName() string {
	return "CreateCargoLineItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCargoLineItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCargoLineItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCargoLineItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCargoLineItemRequestValidationError{}

// Validate checks the field values on ConsignmentItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConsignmentItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsignmentItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsignmentItemMultiError, or nil if none found.
func (m *ConsignmentItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsignmentItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConsignmentItemD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsignmentItemValidationError{
					field:  "ConsignmentItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsignmentItemValidationError{
					field:  "ConsignmentItemD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsignmentItemD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsignmentItemValidationError{
				field:  "ConsignmentItemD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsignmentItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsignmentItemValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsignmentItemValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsignmentItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsignmentItemValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsignmentItemValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCargoItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConsignmentItemValidationError{
						field:  fmt.Sprintf("CargoItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConsignmentItemValidationError{
						field:  fmt.Sprintf("CargoItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConsignmentItemValidationError{
					field:  fmt.Sprintf("CargoItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConsignmentItemMultiError(errors)
	}

	return nil
}

// ConsignmentItemMultiError is an error wrapping multiple validation errors
// returned by ConsignmentItem.ValidateAll() if the designated constraints
// aren't met.
type ConsignmentItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsignmentItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsignmentItemMultiError) AllErrors() []error { return m }

// ConsignmentItemValidationError is the validation error returned by
// ConsignmentItem.Validate if the designated constraints aren't met.
type ConsignmentItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsignmentItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsignmentItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsignmentItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsignmentItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsignmentItemValidationError) ErrorName() string { return "ConsignmentItemValidationError" }

// Error satisfies the builtin error interface
func (e ConsignmentItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsignmentItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsignmentItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsignmentItemValidationError{}

// Validate checks the field values on ConsignmentItemD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConsignmentItemD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsignmentItemD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsignmentItemDMultiError, or nil if none found.
func (m *ConsignmentItemD) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsignmentItemD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for DescriptionOfGoods

	// no validation rules for HsCode

	// no validation rules for ShippingInstructionId

	// no validation rules for Weight

	// no validation rules for Volume

	// no validation rules for WeightUnit

	// no validation rules for VolumeUnit

	// no validation rules for ShipmentId

	if len(errors) > 0 {
		return ConsignmentItemDMultiError(errors)
	}

	return nil
}

// ConsignmentItemDMultiError is an error wrapping multiple validation errors
// returned by ConsignmentItemD.ValidateAll() if the designated constraints
// aren't met.
type ConsignmentItemDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsignmentItemDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsignmentItemDMultiError) AllErrors() []error { return m }

// ConsignmentItemDValidationError is the validation error returned by
// ConsignmentItemD.Validate if the designated constraints aren't met.
type ConsignmentItemDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsignmentItemDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsignmentItemDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsignmentItemDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsignmentItemDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsignmentItemDValidationError) ErrorName() string { return "ConsignmentItemDValidationError" }

// Error satisfies the builtin error interface
func (e ConsignmentItemDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsignmentItemD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsignmentItemDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsignmentItemDValidationError{}
