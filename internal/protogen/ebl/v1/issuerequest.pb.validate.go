// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ebl/v1/issuerequest.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateIssuePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIssuePartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIssuePartyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIssuePartyRequestMultiError, or nil if none found.
func (m *CreateIssuePartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIssuePartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EblPlatformIdentifier

	// no validation rules for LegalName

	// no validation rules for RegistrationNumber

	// no validation rules for LocationOfRegistration

	// no validation rules for TaxReference

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateIssuePartyRequestMultiError(errors)
	}

	return nil
}

// CreateIssuePartyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateIssuePartyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateIssuePartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIssuePartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIssuePartyRequestMultiError) AllErrors() []error { return m }

// CreateIssuePartyRequestValidationError is the validation error returned by
// CreateIssuePartyRequest.Validate if the designated constraints aren't met.
type CreateIssuePartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIssuePartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIssuePartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIssuePartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIssuePartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIssuePartyRequestValidationError) ErrorName() string {
	return "CreateIssuePartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIssuePartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIssuePartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIssuePartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIssuePartyRequestValidationError{}

// Validate checks the field values on CreateIssuePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIssuePartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIssuePartyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIssuePartyResponseMultiError, or nil if none found.
func (m *CreateIssuePartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIssuePartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIssueParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateIssuePartyResponseValidationError{
					field:  "IssueParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateIssuePartyResponseValidationError{
					field:  "IssueParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateIssuePartyResponseValidationError{
				field:  "IssueParty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateIssuePartyResponseMultiError(errors)
	}

	return nil
}

// CreateIssuePartyResponseMultiError is an error wrapping multiple validation
// errors returned by CreateIssuePartyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateIssuePartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIssuePartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIssuePartyResponseMultiError) AllErrors() []error { return m }

// CreateIssuePartyResponseValidationError is the validation error returned by
// CreateIssuePartyResponse.Validate if the designated constraints aren't met.
type CreateIssuePartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIssuePartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIssuePartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIssuePartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIssuePartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIssuePartyResponseValidationError) ErrorName() string {
	return "CreateIssuePartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIssuePartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIssuePartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIssuePartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIssuePartyResponseValidationError{}

// Validate checks the field values on UpdateIssuePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateIssuePartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIssuePartyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateIssuePartyRequestMultiError, or nil if none found.
func (m *UpdateIssuePartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIssuePartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EblPlatformIdentifier

	// no validation rules for LegalName

	// no validation rules for RegistrationNumber

	// no validation rules for LocationOfRegistration

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateIssuePartyRequestMultiError(errors)
	}

	return nil
}

// UpdateIssuePartyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateIssuePartyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateIssuePartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIssuePartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIssuePartyRequestMultiError) AllErrors() []error { return m }

// UpdateIssuePartyRequestValidationError is the validation error returned by
// UpdateIssuePartyRequest.Validate if the designated constraints aren't met.
type UpdateIssuePartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIssuePartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIssuePartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIssuePartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIssuePartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIssuePartyRequestValidationError) ErrorName() string {
	return "UpdateIssuePartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIssuePartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIssuePartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIssuePartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIssuePartyRequestValidationError{}

// Validate checks the field values on UpdateIssuePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateIssuePartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIssuePartyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateIssuePartyResponseMultiError, or nil if none found.
func (m *UpdateIssuePartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIssuePartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateIssuePartyResponseMultiError(errors)
	}

	return nil
}

// UpdateIssuePartyResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateIssuePartyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateIssuePartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIssuePartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIssuePartyResponseMultiError) AllErrors() []error { return m }

// UpdateIssuePartyResponseValidationError is the validation error returned by
// UpdateIssuePartyResponse.Validate if the designated constraints aren't met.
type UpdateIssuePartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIssuePartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIssuePartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIssuePartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIssuePartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIssuePartyResponseValidationError) ErrorName() string {
	return "UpdateIssuePartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIssuePartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIssuePartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIssuePartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIssuePartyResponseValidationError{}

// Validate checks the field values on IssueParty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IssueParty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueParty with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IssuePartyMultiError, or
// nil if none found.
func (m *IssueParty) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueParty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIssuePartyD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssuePartyValidationError{
					field:  "IssuePartyD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssuePartyValidationError{
					field:  "IssuePartyD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuePartyD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssuePartyValidationError{
				field:  "IssuePartyD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssuePartyValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssuePartyValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssuePartyValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssuePartyValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssuePartyValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssuePartyValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IssuePartyMultiError(errors)
	}

	return nil
}

// IssuePartyMultiError is an error wrapping multiple validation errors
// returned by IssueParty.ValidateAll() if the designated constraints aren't met.
type IssuePartyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssuePartyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssuePartyMultiError) AllErrors() []error { return m }

// IssuePartyValidationError is the validation error returned by
// IssueParty.Validate if the designated constraints aren't met.
type IssuePartyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssuePartyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssuePartyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssuePartyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssuePartyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssuePartyValidationError) ErrorName() string { return "IssuePartyValidationError" }

// Error satisfies the builtin error interface
func (e IssuePartyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueParty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssuePartyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssuePartyValidationError{}

// Validate checks the field values on IssuePartyD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IssuePartyD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssuePartyD with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IssuePartyDMultiError, or
// nil if none found.
func (m *IssuePartyD) ValidateAll() error {
	return m.validate(true)
}

func (m *IssuePartyD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for EblPlatformIdentifier

	// no validation rules for LegalName

	// no validation rules for RegistrationNumber

	// no validation rules for LocationOfRegistration

	// no validation rules for TaxReference

	if len(errors) > 0 {
		return IssuePartyDMultiError(errors)
	}

	return nil
}

// IssuePartyDMultiError is an error wrapping multiple validation errors
// returned by IssuePartyD.ValidateAll() if the designated constraints aren't met.
type IssuePartyDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssuePartyDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssuePartyDMultiError) AllErrors() []error { return m }

// IssuePartyDValidationError is the validation error returned by
// IssuePartyD.Validate if the designated constraints aren't met.
type IssuePartyDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssuePartyDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssuePartyDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssuePartyDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssuePartyDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssuePartyDValidationError) ErrorName() string { return "IssuePartyDValidationError" }

// Error satisfies the builtin error interface
func (e IssuePartyDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssuePartyD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssuePartyDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssuePartyDValidationError{}

// Validate checks the field values on GetIssuePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIssuePartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIssuePartyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIssuePartyRequestMultiError, or nil if none found.
func (m *GetIssuePartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIssuePartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetIssuePartyRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetIssuePartyRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIssuePartyRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetIssuePartyRequestMultiError(errors)
	}

	return nil
}

// GetIssuePartyRequestMultiError is an error wrapping multiple validation
// errors returned by GetIssuePartyRequest.ValidateAll() if the designated
// constraints aren't met.
type GetIssuePartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIssuePartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIssuePartyRequestMultiError) AllErrors() []error { return m }

// GetIssuePartyRequestValidationError is the validation error returned by
// GetIssuePartyRequest.Validate if the designated constraints aren't met.
type GetIssuePartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIssuePartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIssuePartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIssuePartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIssuePartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIssuePartyRequestValidationError) ErrorName() string {
	return "GetIssuePartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIssuePartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIssuePartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIssuePartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIssuePartyRequestValidationError{}

// Validate checks the field values on GetIssuePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIssuePartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIssuePartyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIssuePartyResponseMultiError, or nil if none found.
func (m *GetIssuePartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIssuePartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIssueParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetIssuePartyResponseValidationError{
					field:  "IssueParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetIssuePartyResponseValidationError{
					field:  "IssueParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIssuePartyResponseValidationError{
				field:  "IssueParty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetIssuePartyResponseMultiError(errors)
	}

	return nil
}

// GetIssuePartyResponseMultiError is an error wrapping multiple validation
// errors returned by GetIssuePartyResponse.ValidateAll() if the designated
// constraints aren't met.
type GetIssuePartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIssuePartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIssuePartyResponseMultiError) AllErrors() []error { return m }

// GetIssuePartyResponseValidationError is the validation error returned by
// GetIssuePartyResponse.Validate if the designated constraints aren't met.
type GetIssuePartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIssuePartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIssuePartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIssuePartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIssuePartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIssuePartyResponseValidationError) ErrorName() string {
	return "GetIssuePartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIssuePartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIssuePartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIssuePartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIssuePartyResponseValidationError{}

// Validate checks the field values on GetIssuePartiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIssuePartiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIssuePartiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIssuePartiesRequestMultiError, or nil if none found.
func (m *GetIssuePartiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIssuePartiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetIssuePartiesRequestMultiError(errors)
	}

	return nil
}

// GetIssuePartiesRequestMultiError is an error wrapping multiple validation
// errors returned by GetIssuePartiesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetIssuePartiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIssuePartiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIssuePartiesRequestMultiError) AllErrors() []error { return m }

// GetIssuePartiesRequestValidationError is the validation error returned by
// GetIssuePartiesRequest.Validate if the designated constraints aren't met.
type GetIssuePartiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIssuePartiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIssuePartiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIssuePartiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIssuePartiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIssuePartiesRequestValidationError) ErrorName() string {
	return "GetIssuePartiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIssuePartiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIssuePartiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIssuePartiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIssuePartiesRequestValidationError{}

// Validate checks the field values on GetIssuePartiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIssuePartiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIssuePartiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIssuePartiesResponseMultiError, or nil if none found.
func (m *GetIssuePartiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIssuePartiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIssueParties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIssuePartiesResponseValidationError{
						field:  fmt.Sprintf("IssueParties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIssuePartiesResponseValidationError{
						field:  fmt.Sprintf("IssueParties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIssuePartiesResponseValidationError{
					field:  fmt.Sprintf("IssueParties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetIssuePartiesResponseMultiError(errors)
	}

	return nil
}

// GetIssuePartiesResponseMultiError is an error wrapping multiple validation
// errors returned by GetIssuePartiesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetIssuePartiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIssuePartiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIssuePartiesResponseMultiError) AllErrors() []error { return m }

// GetIssuePartiesResponseValidationError is the validation error returned by
// GetIssuePartiesResponse.Validate if the designated constraints aren't met.
type GetIssuePartiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIssuePartiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIssuePartiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIssuePartiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIssuePartiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIssuePartiesResponseValidationError) ErrorName() string {
	return "GetIssuePartiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIssuePartiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIssuePartiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIssuePartiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIssuePartiesResponseValidationError{}

// Validate checks the field values on GetIssuePartyByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIssuePartyByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIssuePartyByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIssuePartyByPkRequestMultiError, or nil if none found.
func (m *GetIssuePartyByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIssuePartyByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetIssuePartyByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetIssuePartyByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIssuePartyByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetIssuePartyByPkRequestMultiError(errors)
	}

	return nil
}

// GetIssuePartyByPkRequestMultiError is an error wrapping multiple validation
// errors returned by GetIssuePartyByPkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetIssuePartyByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIssuePartyByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIssuePartyByPkRequestMultiError) AllErrors() []error { return m }

// GetIssuePartyByPkRequestValidationError is the validation error returned by
// GetIssuePartyByPkRequest.Validate if the designated constraints aren't met.
type GetIssuePartyByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIssuePartyByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIssuePartyByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIssuePartyByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIssuePartyByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIssuePartyByPkRequestValidationError) ErrorName() string {
	return "GetIssuePartyByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIssuePartyByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIssuePartyByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIssuePartyByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIssuePartyByPkRequestValidationError{}

// Validate checks the field values on GetIssuePartyByPkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIssuePartyByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIssuePartyByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIssuePartyByPkResponseMultiError, or nil if none found.
func (m *GetIssuePartyByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIssuePartyByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIssueParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetIssuePartyByPkResponseValidationError{
					field:  "IssueParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetIssuePartyByPkResponseValidationError{
					field:  "IssueParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIssuePartyByPkResponseValidationError{
				field:  "IssueParty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetIssuePartyByPkResponseMultiError(errors)
	}

	return nil
}

// GetIssuePartyByPkResponseMultiError is an error wrapping multiple validation
// errors returned by GetIssuePartyByPkResponse.ValidateAll() if the
// designated constraints aren't met.
type GetIssuePartyByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIssuePartyByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIssuePartyByPkResponseMultiError) AllErrors() []error { return m }

// GetIssuePartyByPkResponseValidationError is the validation error returned by
// GetIssuePartyByPkResponse.Validate if the designated constraints aren't met.
type GetIssuePartyByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIssuePartyByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIssuePartyByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIssuePartyByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIssuePartyByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIssuePartyByPkResponseValidationError) ErrorName() string {
	return "GetIssuePartyByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIssuePartyByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIssuePartyByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIssuePartyByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIssuePartyByPkResponseValidationError{}

// Validate checks the field values on CreateIssuePartySupportingCodeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateIssuePartySupportingCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIssuePartySupportingCodeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateIssuePartySupportingCodeRequestMultiError, or nil if none found.
func (m *CreateIssuePartySupportingCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIssuePartySupportingCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IssuePartyId

	// no validation rules for PartyCode

	// no validation rules for PartyCodeListProvider

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateIssuePartySupportingCodeRequestMultiError(errors)
	}

	return nil
}

// CreateIssuePartySupportingCodeRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateIssuePartySupportingCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateIssuePartySupportingCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIssuePartySupportingCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIssuePartySupportingCodeRequestMultiError) AllErrors() []error { return m }

// CreateIssuePartySupportingCodeRequestValidationError is the validation error
// returned by CreateIssuePartySupportingCodeRequest.Validate if the
// designated constraints aren't met.
type CreateIssuePartySupportingCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIssuePartySupportingCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIssuePartySupportingCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIssuePartySupportingCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIssuePartySupportingCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIssuePartySupportingCodeRequestValidationError) ErrorName() string {
	return "CreateIssuePartySupportingCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIssuePartySupportingCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIssuePartySupportingCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIssuePartySupportingCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIssuePartySupportingCodeRequestValidationError{}

// Validate checks the field values on CreateIssuePartySupportingCodeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateIssuePartySupportingCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateIssuePartySupportingCodeResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateIssuePartySupportingCodeResponseMultiError, or nil if none found.
func (m *CreateIssuePartySupportingCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIssuePartySupportingCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIssuePartySupportingCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateIssuePartySupportingCodeResponseValidationError{
					field:  "IssuePartySupportingCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateIssuePartySupportingCodeResponseValidationError{
					field:  "IssuePartySupportingCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuePartySupportingCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateIssuePartySupportingCodeResponseValidationError{
				field:  "IssuePartySupportingCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateIssuePartySupportingCodeResponseMultiError(errors)
	}

	return nil
}

// CreateIssuePartySupportingCodeResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateIssuePartySupportingCodeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateIssuePartySupportingCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIssuePartySupportingCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIssuePartySupportingCodeResponseMultiError) AllErrors() []error { return m }

// CreateIssuePartySupportingCodeResponseValidationError is the validation
// error returned by CreateIssuePartySupportingCodeResponse.Validate if the
// designated constraints aren't met.
type CreateIssuePartySupportingCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIssuePartySupportingCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIssuePartySupportingCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIssuePartySupportingCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIssuePartySupportingCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIssuePartySupportingCodeResponseValidationError) ErrorName() string {
	return "CreateIssuePartySupportingCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIssuePartySupportingCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIssuePartySupportingCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIssuePartySupportingCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIssuePartySupportingCodeResponseValidationError{}

// Validate checks the field values on UpdateIssuePartySupportingCodeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateIssuePartySupportingCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIssuePartySupportingCodeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateIssuePartySupportingCodeRequestMultiError, or nil if none found.
func (m *UpdateIssuePartySupportingCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIssuePartySupportingCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IssuePartyId

	// no validation rules for PartyCode

	// no validation rules for PartyCodeListProvider

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateIssuePartySupportingCodeRequestMultiError(errors)
	}

	return nil
}

// UpdateIssuePartySupportingCodeRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateIssuePartySupportingCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateIssuePartySupportingCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIssuePartySupportingCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIssuePartySupportingCodeRequestMultiError) AllErrors() []error { return m }

// UpdateIssuePartySupportingCodeRequestValidationError is the validation error
// returned by UpdateIssuePartySupportingCodeRequest.Validate if the
// designated constraints aren't met.
type UpdateIssuePartySupportingCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIssuePartySupportingCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIssuePartySupportingCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIssuePartySupportingCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIssuePartySupportingCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIssuePartySupportingCodeRequestValidationError) ErrorName() string {
	return "UpdateIssuePartySupportingCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIssuePartySupportingCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIssuePartySupportingCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIssuePartySupportingCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIssuePartySupportingCodeRequestValidationError{}

// Validate checks the field values on UpdateIssuePartySupportingCodeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateIssuePartySupportingCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateIssuePartySupportingCodeResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateIssuePartySupportingCodeResponseMultiError, or nil if none found.
func (m *UpdateIssuePartySupportingCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIssuePartySupportingCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateIssuePartySupportingCodeResponseMultiError(errors)
	}

	return nil
}

// UpdateIssuePartySupportingCodeResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateIssuePartySupportingCodeResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateIssuePartySupportingCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIssuePartySupportingCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIssuePartySupportingCodeResponseMultiError) AllErrors() []error { return m }

// UpdateIssuePartySupportingCodeResponseValidationError is the validation
// error returned by UpdateIssuePartySupportingCodeResponse.Validate if the
// designated constraints aren't met.
type UpdateIssuePartySupportingCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIssuePartySupportingCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIssuePartySupportingCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIssuePartySupportingCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIssuePartySupportingCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIssuePartySupportingCodeResponseValidationError) ErrorName() string {
	return "UpdateIssuePartySupportingCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIssuePartySupportingCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIssuePartySupportingCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIssuePartySupportingCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIssuePartySupportingCodeResponseValidationError{}

// Validate checks the field values on IssuePartySupportingCode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssuePartySupportingCode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssuePartySupportingCode with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssuePartySupportingCodeMultiError, or nil if none found.
func (m *IssuePartySupportingCode) ValidateAll() error {
	return m.validate(true)
}

func (m *IssuePartySupportingCode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIssuePartySupportingCodeD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssuePartySupportingCodeValidationError{
					field:  "IssuePartySupportingCodeD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssuePartySupportingCodeValidationError{
					field:  "IssuePartySupportingCodeD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuePartySupportingCodeD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssuePartySupportingCodeValidationError{
				field:  "IssuePartySupportingCodeD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssuePartySupportingCodeValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssuePartySupportingCodeValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssuePartySupportingCodeValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssuePartySupportingCodeValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssuePartySupportingCodeValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssuePartySupportingCodeValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IssuePartySupportingCodeMultiError(errors)
	}

	return nil
}

// IssuePartySupportingCodeMultiError is an error wrapping multiple validation
// errors returned by IssuePartySupportingCode.ValidateAll() if the designated
// constraints aren't met.
type IssuePartySupportingCodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssuePartySupportingCodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssuePartySupportingCodeMultiError) AllErrors() []error { return m }

// IssuePartySupportingCodeValidationError is the validation error returned by
// IssuePartySupportingCode.Validate if the designated constraints aren't met.
type IssuePartySupportingCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssuePartySupportingCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssuePartySupportingCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssuePartySupportingCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssuePartySupportingCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssuePartySupportingCodeValidationError) ErrorName() string {
	return "IssuePartySupportingCodeValidationError"
}

// Error satisfies the builtin error interface
func (e IssuePartySupportingCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssuePartySupportingCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssuePartySupportingCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssuePartySupportingCodeValidationError{}

// Validate checks the field values on IssuePartySupportingCodeD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssuePartySupportingCodeD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssuePartySupportingCodeD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssuePartySupportingCodeDMultiError, or nil if none found.
func (m *IssuePartySupportingCodeD) ValidateAll() error {
	return m.validate(true)
}

func (m *IssuePartySupportingCodeD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for IssuePartyId

	// no validation rules for PartyCode

	// no validation rules for PartyCodeListProvider

	if len(errors) > 0 {
		return IssuePartySupportingCodeDMultiError(errors)
	}

	return nil
}

// IssuePartySupportingCodeDMultiError is an error wrapping multiple validation
// errors returned by IssuePartySupportingCodeD.ValidateAll() if the
// designated constraints aren't met.
type IssuePartySupportingCodeDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssuePartySupportingCodeDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssuePartySupportingCodeDMultiError) AllErrors() []error { return m }

// IssuePartySupportingCodeDValidationError is the validation error returned by
// IssuePartySupportingCodeD.Validate if the designated constraints aren't met.
type IssuePartySupportingCodeDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssuePartySupportingCodeDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssuePartySupportingCodeDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssuePartySupportingCodeDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssuePartySupportingCodeDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssuePartySupportingCodeDValidationError) ErrorName() string {
	return "IssuePartySupportingCodeDValidationError"
}

// Error satisfies the builtin error interface
func (e IssuePartySupportingCodeDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssuePartySupportingCodeD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssuePartySupportingCodeDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssuePartySupportingCodeDValidationError{}

// Validate checks the field values on CreateEblVisualizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEblVisualizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEblVisualizationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateEblVisualizationRequestMultiError, or nil if none found.
func (m *CreateEblVisualizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEblVisualizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Content

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateEblVisualizationRequestMultiError(errors)
	}

	return nil
}

// CreateEblVisualizationRequestMultiError is an error wrapping multiple
// validation errors returned by CreateEblVisualizationRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateEblVisualizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEblVisualizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEblVisualizationRequestMultiError) AllErrors() []error { return m }

// CreateEblVisualizationRequestValidationError is the validation error
// returned by CreateEblVisualizationRequest.Validate if the designated
// constraints aren't met.
type CreateEblVisualizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEblVisualizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEblVisualizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEblVisualizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEblVisualizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEblVisualizationRequestValidationError) ErrorName() string {
	return "CreateEblVisualizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEblVisualizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEblVisualizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEblVisualizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEblVisualizationRequestValidationError{}

// Validate checks the field values on CreateEblVisualizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEblVisualizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEblVisualizationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateEblVisualizationResponseMultiError, or nil if none found.
func (m *CreateEblVisualizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEblVisualizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEblVisualization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEblVisualizationResponseValidationError{
					field:  "EblVisualization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEblVisualizationResponseValidationError{
					field:  "EblVisualization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEblVisualization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEblVisualizationResponseValidationError{
				field:  "EblVisualization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEblVisualizationResponseMultiError(errors)
	}

	return nil
}

// CreateEblVisualizationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateEblVisualizationResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateEblVisualizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEblVisualizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEblVisualizationResponseMultiError) AllErrors() []error { return m }

// CreateEblVisualizationResponseValidationError is the validation error
// returned by CreateEblVisualizationResponse.Validate if the designated
// constraints aren't met.
type CreateEblVisualizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEblVisualizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEblVisualizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEblVisualizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEblVisualizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEblVisualizationResponseValidationError) ErrorName() string {
	return "CreateEblVisualizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEblVisualizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEblVisualizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEblVisualizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEblVisualizationResponseValidationError{}

// Validate checks the field values on UpdateEblVisualizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEblVisualizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEblVisualizationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateEblVisualizationRequestMultiError, or nil if none found.
func (m *UpdateEblVisualizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEblVisualizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Content

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateEblVisualizationRequestMultiError(errors)
	}

	return nil
}

// UpdateEblVisualizationRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateEblVisualizationRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateEblVisualizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEblVisualizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEblVisualizationRequestMultiError) AllErrors() []error { return m }

// UpdateEblVisualizationRequestValidationError is the validation error
// returned by UpdateEblVisualizationRequest.Validate if the designated
// constraints aren't met.
type UpdateEblVisualizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEblVisualizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEblVisualizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEblVisualizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEblVisualizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEblVisualizationRequestValidationError) ErrorName() string {
	return "UpdateEblVisualizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEblVisualizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEblVisualizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEblVisualizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEblVisualizationRequestValidationError{}

// Validate checks the field values on UpdateEblVisualizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEblVisualizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEblVisualizationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateEblVisualizationResponseMultiError, or nil if none found.
func (m *UpdateEblVisualizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEblVisualizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateEblVisualizationResponseMultiError(errors)
	}

	return nil
}

// UpdateEblVisualizationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateEblVisualizationResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateEblVisualizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEblVisualizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEblVisualizationResponseMultiError) AllErrors() []error { return m }

// UpdateEblVisualizationResponseValidationError is the validation error
// returned by UpdateEblVisualizationResponse.Validate if the designated
// constraints aren't met.
type UpdateEblVisualizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEblVisualizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEblVisualizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEblVisualizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEblVisualizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEblVisualizationResponseValidationError) ErrorName() string {
	return "UpdateEblVisualizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEblVisualizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEblVisualizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEblVisualizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEblVisualizationResponseValidationError{}

// Validate checks the field values on EblVisualization with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EblVisualization) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EblVisualization with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EblVisualizationMultiError, or nil if none found.
func (m *EblVisualization) ValidateAll() error {
	return m.validate(true)
}

func (m *EblVisualization) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEblVisualizationD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EblVisualizationValidationError{
					field:  "EblVisualizationD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EblVisualizationValidationError{
					field:  "EblVisualizationD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEblVisualizationD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EblVisualizationValidationError{
				field:  "EblVisualizationD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EblVisualizationValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EblVisualizationValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EblVisualizationValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EblVisualizationValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EblVisualizationValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EblVisualizationValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EblVisualizationMultiError(errors)
	}

	return nil
}

// EblVisualizationMultiError is an error wrapping multiple validation errors
// returned by EblVisualization.ValidateAll() if the designated constraints
// aren't met.
type EblVisualizationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EblVisualizationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EblVisualizationMultiError) AllErrors() []error { return m }

// EblVisualizationValidationError is the validation error returned by
// EblVisualization.Validate if the designated constraints aren't met.
type EblVisualizationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EblVisualizationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EblVisualizationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EblVisualizationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EblVisualizationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EblVisualizationValidationError) ErrorName() string { return "EblVisualizationValidationError" }

// Error satisfies the builtin error interface
func (e EblVisualizationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEblVisualization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EblVisualizationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EblVisualizationValidationError{}

// Validate checks the field values on EblVisualizationD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EblVisualizationD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EblVisualizationD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EblVisualizationDMultiError, or nil if none found.
func (m *EblVisualizationD) ValidateAll() error {
	return m.validate(true)
}

func (m *EblVisualizationD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for Name

	// no validation rules for Content

	if len(errors) > 0 {
		return EblVisualizationDMultiError(errors)
	}

	return nil
}

// EblVisualizationDMultiError is an error wrapping multiple validation errors
// returned by EblVisualizationD.ValidateAll() if the designated constraints
// aren't met.
type EblVisualizationDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EblVisualizationDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EblVisualizationDMultiError) AllErrors() []error { return m }

// EblVisualizationDValidationError is the validation error returned by
// EblVisualizationD.Validate if the designated constraints aren't met.
type EblVisualizationDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EblVisualizationDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EblVisualizationDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EblVisualizationDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EblVisualizationDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EblVisualizationDValidationError) ErrorName() string {
	return "EblVisualizationDValidationError"
}

// Error satisfies the builtin error interface
func (e EblVisualizationDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEblVisualizationD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EblVisualizationDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EblVisualizationDValidationError{}

// Validate checks the field values on CreateIssuanceRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIssuanceRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIssuanceRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIssuanceRequestRequestMultiError, or nil if none found.
func (m *CreateIssuanceRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIssuanceRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransportDocumentReference

	// no validation rules for IssuanceRequestState

	// no validation rules for IssueTo

	// no validation rules for EblVisualizationId

	// no validation rules for TransportDocumentJson

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateIssuanceRequestRequestMultiError(errors)
	}

	return nil
}

// CreateIssuanceRequestRequestMultiError is an error wrapping multiple
// validation errors returned by CreateIssuanceRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateIssuanceRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIssuanceRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIssuanceRequestRequestMultiError) AllErrors() []error { return m }

// CreateIssuanceRequestRequestValidationError is the validation error returned
// by CreateIssuanceRequestRequest.Validate if the designated constraints
// aren't met.
type CreateIssuanceRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIssuanceRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIssuanceRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIssuanceRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIssuanceRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIssuanceRequestRequestValidationError) ErrorName() string {
	return "CreateIssuanceRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIssuanceRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIssuanceRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIssuanceRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIssuanceRequestRequestValidationError{}

// Validate checks the field values on CreateIssuanceRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIssuanceRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIssuanceRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateIssuanceRequestResponseMultiError, or nil if none found.
func (m *CreateIssuanceRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIssuanceRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIssuanceRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateIssuanceRequestResponseValidationError{
					field:  "IssuanceRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateIssuanceRequestResponseValidationError{
					field:  "IssuanceRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuanceRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateIssuanceRequestResponseValidationError{
				field:  "IssuanceRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateIssuanceRequestResponseMultiError(errors)
	}

	return nil
}

// CreateIssuanceRequestResponseMultiError is an error wrapping multiple
// validation errors returned by CreateIssuanceRequestResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateIssuanceRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIssuanceRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIssuanceRequestResponseMultiError) AllErrors() []error { return m }

// CreateIssuanceRequestResponseValidationError is the validation error
// returned by CreateIssuanceRequestResponse.Validate if the designated
// constraints aren't met.
type CreateIssuanceRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIssuanceRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIssuanceRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIssuanceRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIssuanceRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIssuanceRequestResponseValidationError) ErrorName() string {
	return "CreateIssuanceRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIssuanceRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIssuanceRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIssuanceRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIssuanceRequestResponseValidationError{}

// Validate checks the field values on UpdateIssuanceRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateIssuanceRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIssuanceRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateIssuanceRequestRequestMultiError, or nil if none found.
func (m *UpdateIssuanceRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIssuanceRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransportDocumentReference

	// no validation rules for IssuanceRequestState

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateIssuanceRequestRequestMultiError(errors)
	}

	return nil
}

// UpdateIssuanceRequestRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateIssuanceRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateIssuanceRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIssuanceRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIssuanceRequestRequestMultiError) AllErrors() []error { return m }

// UpdateIssuanceRequestRequestValidationError is the validation error returned
// by UpdateIssuanceRequestRequest.Validate if the designated constraints
// aren't met.
type UpdateIssuanceRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIssuanceRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIssuanceRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIssuanceRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIssuanceRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIssuanceRequestRequestValidationError) ErrorName() string {
	return "UpdateIssuanceRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIssuanceRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIssuanceRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIssuanceRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIssuanceRequestRequestValidationError{}

// Validate checks the field values on UpdateIssuanceRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateIssuanceRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIssuanceRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateIssuanceRequestResponseMultiError, or nil if none found.
func (m *UpdateIssuanceRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIssuanceRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateIssuanceRequestResponseMultiError(errors)
	}

	return nil
}

// UpdateIssuanceRequestResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateIssuanceRequestResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateIssuanceRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIssuanceRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIssuanceRequestResponseMultiError) AllErrors() []error { return m }

// UpdateIssuanceRequestResponseValidationError is the validation error
// returned by UpdateIssuanceRequestResponse.Validate if the designated
// constraints aren't met.
type UpdateIssuanceRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIssuanceRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIssuanceRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIssuanceRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIssuanceRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIssuanceRequestResponseValidationError) ErrorName() string {
	return "UpdateIssuanceRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIssuanceRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIssuanceRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIssuanceRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIssuanceRequestResponseValidationError{}

// Validate checks the field values on IssuanceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IssuanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssuanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssuanceRequestMultiError, or nil if none found.
func (m *IssuanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IssuanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIssuanceRequestD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssuanceRequestValidationError{
					field:  "IssuanceRequestD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssuanceRequestValidationError{
					field:  "IssuanceRequestD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuanceRequestD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssuanceRequestValidationError{
				field:  "IssuanceRequestD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssuanceRequestValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssuanceRequestValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssuanceRequestValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssuanceRequestValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssuanceRequestValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssuanceRequestValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IssuanceRequestMultiError(errors)
	}

	return nil
}

// IssuanceRequestMultiError is an error wrapping multiple validation errors
// returned by IssuanceRequest.ValidateAll() if the designated constraints
// aren't met.
type IssuanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssuanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssuanceRequestMultiError) AllErrors() []error { return m }

// IssuanceRequestValidationError is the validation error returned by
// IssuanceRequest.Validate if the designated constraints aren't met.
type IssuanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssuanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssuanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssuanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssuanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssuanceRequestValidationError) ErrorName() string { return "IssuanceRequestValidationError" }

// Error satisfies the builtin error interface
func (e IssuanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssuanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssuanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssuanceRequestValidationError{}

// Validate checks the field values on IssuanceRequestD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IssuanceRequestD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssuanceRequestD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssuanceRequestDMultiError, or nil if none found.
func (m *IssuanceRequestD) ValidateAll() error {
	return m.validate(true)
}

func (m *IssuanceRequestD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for TransportDocumentReference

	// no validation rules for IssuanceRequestState

	// no validation rules for IssueTo

	// no validation rules for EblVisualizationId

	// no validation rules for TransportDocumentJson

	if len(errors) > 0 {
		return IssuanceRequestDMultiError(errors)
	}

	return nil
}

// IssuanceRequestDMultiError is an error wrapping multiple validation errors
// returned by IssuanceRequestD.ValidateAll() if the designated constraints
// aren't met.
type IssuanceRequestDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssuanceRequestDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssuanceRequestDMultiError) AllErrors() []error { return m }

// IssuanceRequestDValidationError is the validation error returned by
// IssuanceRequestD.Validate if the designated constraints aren't met.
type IssuanceRequestDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssuanceRequestDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssuanceRequestDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssuanceRequestDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssuanceRequestDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssuanceRequestDValidationError) ErrorName() string { return "IssuanceRequestDValidationError" }

// Error satisfies the builtin error interface
func (e IssuanceRequestDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssuanceRequestD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssuanceRequestDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssuanceRequestDValidationError{}
