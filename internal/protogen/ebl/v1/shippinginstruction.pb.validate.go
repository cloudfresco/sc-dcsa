// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ebl/v1/shippinginstruction.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateShippingInstructionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateShippingInstructionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShippingInstructionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateShippingInstructionRequestMultiError, or nil if none found.
func (m *CreateShippingInstructionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShippingInstructionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShippingInstructionReference

	// no validation rules for DocumentStatus

	// no validation rules for IsShippedOnboardType

	// no validation rules for NumberOfCopies

	// no validation rules for NumberOfOriginals

	// no validation rules for IsElectronic

	// no validation rules for IsToOrder

	// no validation rules for AreChargesDisplayedOnOriginals

	// no validation rules for AreChargesDisplayedOnCopies

	// no validation rules for LocationId

	// no validation rules for TransportDocumentTypeCode

	// no validation rules for DisplayedNameForPlaceOfReceipt

	// no validation rules for DisplayedNameForPortOfLoad

	// no validation rules for DisplayedNameForPortOfDischarge

	// no validation rules for DisplayedNameForPlaceOfDelivery

	// no validation rules for AmendToTransportDocument

	// no validation rules for CreatedDateTime

	// no validation rules for UpdatedDateTime

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	for idx, item := range m.GetReferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateShippingInstructionRequestValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateShippingInstructionRequestValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateShippingInstructionRequestValidationError{
					field:  fmt.Sprintf("References[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUtilizedTransportEquipments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateShippingInstructionRequestValidationError{
						field:  fmt.Sprintf("UtilizedTransportEquipments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateShippingInstructionRequestValidationError{
						field:  fmt.Sprintf("UtilizedTransportEquipments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateShippingInstructionRequestValidationError{
					field:  fmt.Sprintf("UtilizedTransportEquipments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetConsignmentItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateShippingInstructionRequestValidationError{
						field:  fmt.Sprintf("ConsignmentItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateShippingInstructionRequestValidationError{
						field:  fmt.Sprintf("ConsignmentItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateShippingInstructionRequestValidationError{
					field:  fmt.Sprintf("ConsignmentItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateShippingInstructionRequestMultiError(errors)
	}

	return nil
}

// CreateShippingInstructionRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateShippingInstructionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateShippingInstructionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShippingInstructionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShippingInstructionRequestMultiError) AllErrors() []error { return m }

// CreateShippingInstructionRequestValidationError is the validation error
// returned by CreateShippingInstructionRequest.Validate if the designated
// constraints aren't met.
type CreateShippingInstructionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShippingInstructionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShippingInstructionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShippingInstructionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShippingInstructionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShippingInstructionRequestValidationError) ErrorName() string {
	return "CreateShippingInstructionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShippingInstructionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShippingInstructionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShippingInstructionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShippingInstructionRequestValidationError{}

// Validate checks the field values on CreateShippingInstructionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateShippingInstructionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShippingInstructionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateShippingInstructionResponseMultiError, or nil if none found.
func (m *CreateShippingInstructionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShippingInstructionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShippingInstruction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShippingInstructionResponseValidationError{
					field:  "ShippingInstruction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShippingInstructionResponseValidationError{
					field:  "ShippingInstruction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingInstruction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShippingInstructionResponseValidationError{
				field:  "ShippingInstruction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShippingInstructionResponseMultiError(errors)
	}

	return nil
}

// CreateShippingInstructionResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateShippingInstructionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateShippingInstructionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShippingInstructionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShippingInstructionResponseMultiError) AllErrors() []error { return m }

// CreateShippingInstructionResponseValidationError is the validation error
// returned by CreateShippingInstructionResponse.Validate if the designated
// constraints aren't met.
type CreateShippingInstructionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShippingInstructionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShippingInstructionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShippingInstructionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShippingInstructionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShippingInstructionResponseValidationError) ErrorName() string {
	return "CreateShippingInstructionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShippingInstructionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShippingInstructionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShippingInstructionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShippingInstructionResponseValidationError{}

// Validate checks the field values on GetShippingInstructionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShippingInstructionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShippingInstructionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetShippingInstructionsResponseMultiError, or nil if none found.
func (m *GetShippingInstructionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShippingInstructionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetShippingInstructions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetShippingInstructionsResponseValidationError{
						field:  fmt.Sprintf("ShippingInstructions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetShippingInstructionsResponseValidationError{
						field:  fmt.Sprintf("ShippingInstructions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetShippingInstructionsResponseValidationError{
					field:  fmt.Sprintf("ShippingInstructions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetShippingInstructionsResponseMultiError(errors)
	}

	return nil
}

// GetShippingInstructionsResponseMultiError is an error wrapping multiple
// validation errors returned by GetShippingInstructionsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetShippingInstructionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShippingInstructionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShippingInstructionsResponseMultiError) AllErrors() []error { return m }

// GetShippingInstructionsResponseValidationError is the validation error
// returned by GetShippingInstructionsResponse.Validate if the designated
// constraints aren't met.
type GetShippingInstructionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShippingInstructionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShippingInstructionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShippingInstructionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShippingInstructionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShippingInstructionsResponseValidationError) ErrorName() string {
	return "GetShippingInstructionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShippingInstructionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShippingInstructionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShippingInstructionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShippingInstructionsResponseValidationError{}

// Validate checks the field values on GetShippingInstructionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShippingInstructionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShippingInstructionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetShippingInstructionsRequestMultiError, or nil if none found.
func (m *GetShippingInstructionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShippingInstructionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetShippingInstructionsRequestMultiError(errors)
	}

	return nil
}

// GetShippingInstructionsRequestMultiError is an error wrapping multiple
// validation errors returned by GetShippingInstructionsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetShippingInstructionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShippingInstructionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShippingInstructionsRequestMultiError) AllErrors() []error { return m }

// GetShippingInstructionsRequestValidationError is the validation error
// returned by GetShippingInstructionsRequest.Validate if the designated
// constraints aren't met.
type GetShippingInstructionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShippingInstructionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShippingInstructionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShippingInstructionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShippingInstructionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShippingInstructionsRequestValidationError) ErrorName() string {
	return "GetShippingInstructionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShippingInstructionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShippingInstructionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShippingInstructionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShippingInstructionsRequestValidationError{}

// Validate checks the field values on FindByIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByIdRequestMultiError, or nil if none found.
func (m *FindByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindByIdRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindByIdRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindByIdRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindByIdRequestMultiError(errors)
	}

	return nil
}

// FindByIdRequestMultiError is an error wrapping multiple validation errors
// returned by FindByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type FindByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByIdRequestMultiError) AllErrors() []error { return m }

// FindByIdRequestValidationError is the validation error returned by
// FindByIdRequest.Validate if the designated constraints aren't met.
type FindByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByIdRequestValidationError) ErrorName() string { return "FindByIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e FindByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByIdRequestValidationError{}

// Validate checks the field values on FindByIdResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByIdResponseMultiError, or nil if none found.
func (m *FindByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShippingInstruction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindByIdResponseValidationError{
					field:  "ShippingInstruction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindByIdResponseValidationError{
					field:  "ShippingInstruction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingInstruction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindByIdResponseValidationError{
				field:  "ShippingInstruction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindByIdResponseMultiError(errors)
	}

	return nil
}

// FindByIdResponseMultiError is an error wrapping multiple validation errors
// returned by FindByIdResponse.ValidateAll() if the designated constraints
// aren't met.
type FindByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByIdResponseMultiError) AllErrors() []error { return m }

// FindByIdResponseValidationError is the validation error returned by
// FindByIdResponse.Validate if the designated constraints aren't met.
type FindByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByIdResponseValidationError) ErrorName() string { return "FindByIdResponseValidationError" }

// Error satisfies the builtin error interface
func (e FindByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByIdResponseValidationError{}

// Validate checks the field values on GetShippingInstructionByPkRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetShippingInstructionByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShippingInstructionByPkRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetShippingInstructionByPkRequestMultiError, or nil if none found.
func (m *GetShippingInstructionByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShippingInstructionByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShippingInstructionByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShippingInstructionByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShippingInstructionByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShippingInstructionByPkRequestMultiError(errors)
	}

	return nil
}

// GetShippingInstructionByPkRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetShippingInstructionByPkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetShippingInstructionByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShippingInstructionByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShippingInstructionByPkRequestMultiError) AllErrors() []error { return m }

// GetShippingInstructionByPkRequestValidationError is the validation error
// returned by GetShippingInstructionByPkRequest.Validate if the designated
// constraints aren't met.
type GetShippingInstructionByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShippingInstructionByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShippingInstructionByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShippingInstructionByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShippingInstructionByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShippingInstructionByPkRequestValidationError) ErrorName() string {
	return "GetShippingInstructionByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShippingInstructionByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShippingInstructionByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShippingInstructionByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShippingInstructionByPkRequestValidationError{}

// Validate checks the field values on GetShippingInstructionByPkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetShippingInstructionByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShippingInstructionByPkResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetShippingInstructionByPkResponseMultiError, or nil if none found.
func (m *GetShippingInstructionByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShippingInstructionByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShippingInstruction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShippingInstructionByPkResponseValidationError{
					field:  "ShippingInstruction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShippingInstructionByPkResponseValidationError{
					field:  "ShippingInstruction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingInstruction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShippingInstructionByPkResponseValidationError{
				field:  "ShippingInstruction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShippingInstructionByPkResponseMultiError(errors)
	}

	return nil
}

// GetShippingInstructionByPkResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetShippingInstructionByPkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetShippingInstructionByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShippingInstructionByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShippingInstructionByPkResponseMultiError) AllErrors() []error { return m }

// GetShippingInstructionByPkResponseValidationError is the validation error
// returned by GetShippingInstructionByPkResponse.Validate if the designated
// constraints aren't met.
type GetShippingInstructionByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShippingInstructionByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShippingInstructionByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShippingInstructionByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShippingInstructionByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShippingInstructionByPkResponseValidationError) ErrorName() string {
	return "GetShippingInstructionByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShippingInstructionByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShippingInstructionByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShippingInstructionByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShippingInstructionByPkResponseValidationError{}

// Validate checks the field values on FindByReferenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindByReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByReferenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByReferenceRequestMultiError, or nil if none found.
func (m *FindByReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShippingInstructionReference

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FindByReferenceRequestMultiError(errors)
	}

	return nil
}

// FindByReferenceRequestMultiError is an error wrapping multiple validation
// errors returned by FindByReferenceRequest.ValidateAll() if the designated
// constraints aren't met.
type FindByReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByReferenceRequestMultiError) AllErrors() []error { return m }

// FindByReferenceRequestValidationError is the validation error returned by
// FindByReferenceRequest.Validate if the designated constraints aren't met.
type FindByReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByReferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByReferenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByReferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByReferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByReferenceRequestValidationError) ErrorName() string {
	return "FindByReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindByReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByReferenceRequestValidationError{}

// Validate checks the field values on FindByReferenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindByReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindByReferenceResponseMultiError, or nil if none found.
func (m *FindByReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShippingInstruction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindByReferenceResponseValidationError{
					field:  "ShippingInstruction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindByReferenceResponseValidationError{
					field:  "ShippingInstruction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingInstruction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindByReferenceResponseValidationError{
				field:  "ShippingInstruction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindByReferenceResponseMultiError(errors)
	}

	return nil
}

// FindByReferenceResponseMultiError is an error wrapping multiple validation
// errors returned by FindByReferenceResponse.ValidateAll() if the designated
// constraints aren't met.
type FindByReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByReferenceResponseMultiError) AllErrors() []error { return m }

// FindByReferenceResponseValidationError is the validation error returned by
// FindByReferenceResponse.Validate if the designated constraints aren't met.
type FindByReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByReferenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByReferenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByReferenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByReferenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByReferenceResponseValidationError) ErrorName() string {
	return "FindByReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindByReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByReferenceResponseValidationError{}

// Validate checks the field values on
// UpdateShippingInstructionByShippingInstructionReferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShippingInstructionByShippingInstructionReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateShippingInstructionByShippingInstructionReferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShippingInstructionByShippingInstructionReferenceRequestMultiError,
// or nil if none found.
func (m *UpdateShippingInstructionByShippingInstructionReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShippingInstructionByShippingInstructionReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShippingInstructionReference

	// no validation rules for DocumentStatus

	// no validation rules for TransportDocumentTypeCode

	// no validation rules for DisplayedNameForPlaceOfReceipt

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateShippingInstructionByShippingInstructionReferenceRequestMultiError(errors)
	}

	return nil
}

// UpdateShippingInstructionByShippingInstructionReferenceRequestMultiError is
// an error wrapping multiple validation errors returned by
// UpdateShippingInstructionByShippingInstructionReferenceRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateShippingInstructionByShippingInstructionReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShippingInstructionByShippingInstructionReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShippingInstructionByShippingInstructionReferenceRequestMultiError) AllErrors() []error {
	return m
}

// UpdateShippingInstructionByShippingInstructionReferenceRequestValidationError
// is the validation error returned by
// UpdateShippingInstructionByShippingInstructionReferenceRequest.Validate if
// the designated constraints aren't met.
type UpdateShippingInstructionByShippingInstructionReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShippingInstructionByShippingInstructionReferenceRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateShippingInstructionByShippingInstructionReferenceRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateShippingInstructionByShippingInstructionReferenceRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateShippingInstructionByShippingInstructionReferenceRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e UpdateShippingInstructionByShippingInstructionReferenceRequestValidationError) ErrorName() string {
	return "UpdateShippingInstructionByShippingInstructionReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShippingInstructionByShippingInstructionReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShippingInstructionByShippingInstructionReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShippingInstructionByShippingInstructionReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShippingInstructionByShippingInstructionReferenceRequestValidationError{}

// Validate checks the field values on
// UpdateShippingInstructionByShippingInstructionReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShippingInstructionByShippingInstructionReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateShippingInstructionByShippingInstructionReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShippingInstructionByShippingInstructionReferenceResponseMultiError,
// or nil if none found.
func (m *UpdateShippingInstructionByShippingInstructionReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShippingInstructionByShippingInstructionReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateShippingInstructionByShippingInstructionReferenceResponseMultiError(errors)
	}

	return nil
}

// UpdateShippingInstructionByShippingInstructionReferenceResponseMultiError is
// an error wrapping multiple validation errors returned by
// UpdateShippingInstructionByShippingInstructionReferenceResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateShippingInstructionByShippingInstructionReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShippingInstructionByShippingInstructionReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShippingInstructionByShippingInstructionReferenceResponseMultiError) AllErrors() []error {
	return m
}

// UpdateShippingInstructionByShippingInstructionReferenceResponseValidationError
// is the validation error returned by
// UpdateShippingInstructionByShippingInstructionReferenceResponse.Validate if
// the designated constraints aren't met.
type UpdateShippingInstructionByShippingInstructionReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShippingInstructionByShippingInstructionReferenceResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateShippingInstructionByShippingInstructionReferenceResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateShippingInstructionByShippingInstructionReferenceResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateShippingInstructionByShippingInstructionReferenceResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e UpdateShippingInstructionByShippingInstructionReferenceResponseValidationError) ErrorName() string {
	return "UpdateShippingInstructionByShippingInstructionReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShippingInstructionByShippingInstructionReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShippingInstructionByShippingInstructionReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShippingInstructionByShippingInstructionReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShippingInstructionByShippingInstructionReferenceResponseValidationError{}

// Validate checks the field values on ShippingInstruction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShippingInstruction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShippingInstruction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShippingInstructionMultiError, or nil if none found.
func (m *ShippingInstruction) ValidateAll() error {
	return m.validate(true)
}

func (m *ShippingInstruction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShippingInstructionD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShippingInstructionValidationError{
					field:  "ShippingInstructionD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShippingInstructionValidationError{
					field:  "ShippingInstructionD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingInstructionD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShippingInstructionValidationError{
				field:  "ShippingInstructionD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShippingInstructionT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShippingInstructionValidationError{
					field:  "ShippingInstructionT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShippingInstructionValidationError{
					field:  "ShippingInstructionT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippingInstructionT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShippingInstructionValidationError{
				field:  "ShippingInstructionT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShippingInstructionMultiError(errors)
	}

	return nil
}

// ShippingInstructionMultiError is an error wrapping multiple validation
// errors returned by ShippingInstruction.ValidateAll() if the designated
// constraints aren't met.
type ShippingInstructionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShippingInstructionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShippingInstructionMultiError) AllErrors() []error { return m }

// ShippingInstructionValidationError is the validation error returned by
// ShippingInstruction.Validate if the designated constraints aren't met.
type ShippingInstructionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShippingInstructionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShippingInstructionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShippingInstructionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShippingInstructionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShippingInstructionValidationError) ErrorName() string {
	return "ShippingInstructionValidationError"
}

// Error satisfies the builtin error interface
func (e ShippingInstructionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShippingInstruction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShippingInstructionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShippingInstructionValidationError{}

// Validate checks the field values on ShippingInstructionD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShippingInstructionD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShippingInstructionD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShippingInstructionDMultiError, or nil if none found.
func (m *ShippingInstructionD) ValidateAll() error {
	return m.validate(true)
}

func (m *ShippingInstructionD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for ShippingInstructionReference

	// no validation rules for DocumentStatus

	// no validation rules for IsShippedOnboardType

	// no validation rules for NumberOfCopies

	// no validation rules for NumberOfOriginals

	// no validation rules for IsElectronic

	// no validation rules for IsToOrder

	// no validation rules for AreChargesDisplayedOnOriginals

	// no validation rules for AreChargesDisplayedOnCopies

	// no validation rules for LocationId

	// no validation rules for TransportDocumentTypeCode

	// no validation rules for DisplayedNameForPlaceOfReceipt

	// no validation rules for DisplayedNameForPortOfLoad

	// no validation rules for DisplayedNameForPortOfDischarge

	// no validation rules for DisplayedNameForPlaceOfDelivery

	// no validation rules for AmendToTransportDocument

	if len(errors) > 0 {
		return ShippingInstructionDMultiError(errors)
	}

	return nil
}

// ShippingInstructionDMultiError is an error wrapping multiple validation
// errors returned by ShippingInstructionD.ValidateAll() if the designated
// constraints aren't met.
type ShippingInstructionDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShippingInstructionDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShippingInstructionDMultiError) AllErrors() []error { return m }

// ShippingInstructionDValidationError is the validation error returned by
// ShippingInstructionD.Validate if the designated constraints aren't met.
type ShippingInstructionDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShippingInstructionDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShippingInstructionDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShippingInstructionDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShippingInstructionDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShippingInstructionDValidationError) ErrorName() string {
	return "ShippingInstructionDValidationError"
}

// Error satisfies the builtin error interface
func (e ShippingInstructionDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShippingInstructionD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShippingInstructionDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShippingInstructionDValidationError{}

// Validate checks the field values on ShippingInstructionT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShippingInstructionT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShippingInstructionT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShippingInstructionTMultiError, or nil if none found.
func (m *ShippingInstructionT) ValidateAll() error {
	return m.validate(true)
}

func (m *ShippingInstructionT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShippingInstructionTValidationError{
					field:  "CreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShippingInstructionTValidationError{
					field:  "CreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShippingInstructionTValidationError{
				field:  "CreatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShippingInstructionTValidationError{
					field:  "UpdatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShippingInstructionTValidationError{
					field:  "UpdatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShippingInstructionTValidationError{
				field:  "UpdatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShippingInstructionTMultiError(errors)
	}

	return nil
}

// ShippingInstructionTMultiError is an error wrapping multiple validation
// errors returned by ShippingInstructionT.ValidateAll() if the designated
// constraints aren't met.
type ShippingInstructionTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShippingInstructionTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShippingInstructionTMultiError) AllErrors() []error { return m }

// ShippingInstructionTValidationError is the validation error returned by
// ShippingInstructionT.Validate if the designated constraints aren't met.
type ShippingInstructionTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShippingInstructionTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShippingInstructionTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShippingInstructionTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShippingInstructionTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShippingInstructionTValidationError) ErrorName() string {
	return "ShippingInstructionTValidationError"
}

// Error satisfies the builtin error interface
func (e ShippingInstructionTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShippingInstructionT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShippingInstructionTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShippingInstructionTValidationError{}
