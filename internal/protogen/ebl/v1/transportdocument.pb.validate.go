// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ebl/v1/transportdocument.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTransportDocumentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransportDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransportDocumentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateTransportDocumentRequestMultiError, or nil if none found.
func (m *CreateTransportDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransportDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransportDocumentReference

	// no validation rules for LocationId

	// no validation rules for IssueDate

	// no validation rules for ShippedOnboardDate

	// no validation rules for ReceivedForShipmentDate

	// no validation rules for NumberOfOriginals

	// no validation rules for CarrierId

	// no validation rules for ShippingInstructionId

	// no validation rules for DeclaredValueCurrency

	// no validation rules for DeclaredValue

	// no validation rules for NumberOfRiderPages

	// no validation rules for IssuingParty

	// no validation rules for CreatedDateTime

	// no validation rules for UpdatedDateTime

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateTransportDocumentRequestMultiError(errors)
	}

	return nil
}

// CreateTransportDocumentRequestMultiError is an error wrapping multiple
// validation errors returned by CreateTransportDocumentRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateTransportDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransportDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransportDocumentRequestMultiError) AllErrors() []error { return m }

// CreateTransportDocumentRequestValidationError is the validation error
// returned by CreateTransportDocumentRequest.Validate if the designated
// constraints aren't met.
type CreateTransportDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransportDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransportDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransportDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransportDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransportDocumentRequestValidationError) ErrorName() string {
	return "CreateTransportDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransportDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransportDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransportDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransportDocumentRequestValidationError{}

// Validate checks the field values on CreateTransportDocumentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransportDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransportDocumentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateTransportDocumentResponseMultiError, or nil if none found.
func (m *CreateTransportDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransportDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransportDocumentResponseValidationError{
					field:  "TransportDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransportDocumentResponseValidationError{
					field:  "TransportDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransportDocumentResponseValidationError{
				field:  "TransportDocument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTransportDocumentResponseMultiError(errors)
	}

	return nil
}

// CreateTransportDocumentResponseMultiError is an error wrapping multiple
// validation errors returned by CreateTransportDocumentResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateTransportDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransportDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransportDocumentResponseMultiError) AllErrors() []error { return m }

// CreateTransportDocumentResponseValidationError is the validation error
// returned by CreateTransportDocumentResponse.Validate if the designated
// constraints aren't met.
type CreateTransportDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransportDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransportDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransportDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransportDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransportDocumentResponseValidationError) ErrorName() string {
	return "CreateTransportDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransportDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransportDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransportDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransportDocumentResponseValidationError{}

// Validate checks the field values on FindTransportDocumentByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindTransportDocumentByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindTransportDocumentByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FindTransportDocumentByIdRequestMultiError, or nil if none found.
func (m *FindTransportDocumentByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindTransportDocumentByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindTransportDocumentByIdRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindTransportDocumentByIdRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindTransportDocumentByIdRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindTransportDocumentByIdRequestMultiError(errors)
	}

	return nil
}

// FindTransportDocumentByIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// FindTransportDocumentByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type FindTransportDocumentByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindTransportDocumentByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindTransportDocumentByIdRequestMultiError) AllErrors() []error { return m }

// FindTransportDocumentByIdRequestValidationError is the validation error
// returned by FindTransportDocumentByIdRequest.Validate if the designated
// constraints aren't met.
type FindTransportDocumentByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindTransportDocumentByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindTransportDocumentByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindTransportDocumentByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindTransportDocumentByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindTransportDocumentByIdRequestValidationError) ErrorName() string {
	return "FindTransportDocumentByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindTransportDocumentByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindTransportDocumentByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindTransportDocumentByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindTransportDocumentByIdRequestValidationError{}

// Validate checks the field values on FindTransportDocumentByIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindTransportDocumentByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindTransportDocumentByIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindTransportDocumentByIdResponseMultiError, or nil if none found.
func (m *FindTransportDocumentByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindTransportDocumentByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindTransportDocumentByIdResponseValidationError{
					field:  "TransportDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindTransportDocumentByIdResponseValidationError{
					field:  "TransportDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindTransportDocumentByIdResponseValidationError{
				field:  "TransportDocument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindTransportDocumentByIdResponseMultiError(errors)
	}

	return nil
}

// FindTransportDocumentByIdResponseMultiError is an error wrapping multiple
// validation errors returned by
// FindTransportDocumentByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type FindTransportDocumentByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindTransportDocumentByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindTransportDocumentByIdResponseMultiError) AllErrors() []error { return m }

// FindTransportDocumentByIdResponseValidationError is the validation error
// returned by FindTransportDocumentByIdResponse.Validate if the designated
// constraints aren't met.
type FindTransportDocumentByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindTransportDocumentByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindTransportDocumentByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindTransportDocumentByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindTransportDocumentByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindTransportDocumentByIdResponseValidationError) ErrorName() string {
	return "FindTransportDocumentByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindTransportDocumentByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindTransportDocumentByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindTransportDocumentByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindTransportDocumentByIdResponseValidationError{}

// Validate checks the field values on GetTransportDocumentByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransportDocumentByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportDocumentByPkRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTransportDocumentByPkRequestMultiError, or nil if none found.
func (m *GetTransportDocumentByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportDocumentByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransportDocumentByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransportDocumentByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransportDocumentByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransportDocumentByPkRequestMultiError(errors)
	}

	return nil
}

// GetTransportDocumentByPkRequestMultiError is an error wrapping multiple
// validation errors returned by GetTransportDocumentByPkRequest.ValidateAll()
// if the designated constraints aren't met.
type GetTransportDocumentByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportDocumentByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportDocumentByPkRequestMultiError) AllErrors() []error { return m }

// GetTransportDocumentByPkRequestValidationError is the validation error
// returned by GetTransportDocumentByPkRequest.Validate if the designated
// constraints aren't met.
type GetTransportDocumentByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportDocumentByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportDocumentByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportDocumentByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportDocumentByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportDocumentByPkRequestValidationError) ErrorName() string {
	return "GetTransportDocumentByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportDocumentByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportDocumentByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportDocumentByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportDocumentByPkRequestValidationError{}

// Validate checks the field values on GetTransportDocumentByPkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTransportDocumentByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportDocumentByPkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTransportDocumentByPkResponseMultiError, or nil if none found.
func (m *GetTransportDocumentByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportDocumentByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransportDocumentByPkResponseValidationError{
					field:  "TransportDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransportDocumentByPkResponseValidationError{
					field:  "TransportDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransportDocumentByPkResponseValidationError{
				field:  "TransportDocument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransportDocumentByPkResponseMultiError(errors)
	}

	return nil
}

// GetTransportDocumentByPkResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetTransportDocumentByPkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTransportDocumentByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportDocumentByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportDocumentByPkResponseMultiError) AllErrors() []error { return m }

// GetTransportDocumentByPkResponseValidationError is the validation error
// returned by GetTransportDocumentByPkResponse.Validate if the designated
// constraints aren't met.
type GetTransportDocumentByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportDocumentByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportDocumentByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportDocumentByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportDocumentByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportDocumentByPkResponseValidationError) ErrorName() string {
	return "GetTransportDocumentByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportDocumentByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportDocumentByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportDocumentByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportDocumentByPkResponseValidationError{}

// Validate checks the field values on FindByTransportDocumentReferenceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FindByTransportDocumentReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindByTransportDocumentReferenceResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// FindByTransportDocumentReferenceResponseMultiError, or nil if none found.
func (m *FindByTransportDocumentReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByTransportDocumentReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindByTransportDocumentReferenceResponseValidationError{
					field:  "TransportDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindByTransportDocumentReferenceResponseValidationError{
					field:  "TransportDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindByTransportDocumentReferenceResponseValidationError{
				field:  "TransportDocument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindByTransportDocumentReferenceResponseMultiError(errors)
	}

	return nil
}

// FindByTransportDocumentReferenceResponseMultiError is an error wrapping
// multiple validation errors returned by
// FindByTransportDocumentReferenceResponse.ValidateAll() if the designated
// constraints aren't met.
type FindByTransportDocumentReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByTransportDocumentReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByTransportDocumentReferenceResponseMultiError) AllErrors() []error { return m }

// FindByTransportDocumentReferenceResponseValidationError is the validation
// error returned by FindByTransportDocumentReferenceResponse.Validate if the
// designated constraints aren't met.
type FindByTransportDocumentReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByTransportDocumentReferenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByTransportDocumentReferenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByTransportDocumentReferenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByTransportDocumentReferenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByTransportDocumentReferenceResponseValidationError) ErrorName() string {
	return "FindByTransportDocumentReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindByTransportDocumentReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByTransportDocumentReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByTransportDocumentReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByTransportDocumentReferenceResponseValidationError{}

// Validate checks the field values on FindByTransportDocumentReferenceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FindByTransportDocumentReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindByTransportDocumentReferenceRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// FindByTransportDocumentReferenceRequestMultiError, or nil if none found.
func (m *FindByTransportDocumentReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByTransportDocumentReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransportDocumentReference

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FindByTransportDocumentReferenceRequestMultiError(errors)
	}

	return nil
}

// FindByTransportDocumentReferenceRequestMultiError is an error wrapping
// multiple validation errors returned by
// FindByTransportDocumentReferenceRequest.ValidateAll() if the designated
// constraints aren't met.
type FindByTransportDocumentReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByTransportDocumentReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByTransportDocumentReferenceRequestMultiError) AllErrors() []error { return m }

// FindByTransportDocumentReferenceRequestValidationError is the validation
// error returned by FindByTransportDocumentReferenceRequest.Validate if the
// designated constraints aren't met.
type FindByTransportDocumentReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByTransportDocumentReferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByTransportDocumentReferenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByTransportDocumentReferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByTransportDocumentReferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByTransportDocumentReferenceRequestValidationError) ErrorName() string {
	return "FindByTransportDocumentReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindByTransportDocumentReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByTransportDocumentReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByTransportDocumentReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByTransportDocumentReferenceRequestValidationError{}

// Validate checks the field values on
// CreateTransportDocumentFromShippingInstructionTORequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransportDocumentFromShippingInstructionTORequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateTransportDocumentFromShippingInstructionTORequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransportDocumentFromShippingInstructionTORequestMultiError, or nil
// if none found.
func (m *CreateTransportDocumentFromShippingInstructionTORequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransportDocumentFromShippingInstructionTORequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreateTransportDocumentRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransportDocumentFromShippingInstructionTORequestValidationError{
					field:  "CreateTransportDocumentRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransportDocumentFromShippingInstructionTORequestValidationError{
					field:  "CreateTransportDocumentRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTransportDocumentRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransportDocumentFromShippingInstructionTORequestValidationError{
				field:  "CreateTransportDocumentRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTransportDocumentFromShippingInstructionTORequestMultiError(errors)
	}

	return nil
}

// CreateTransportDocumentFromShippingInstructionTORequestMultiError is an
// error wrapping multiple validation errors returned by
// CreateTransportDocumentFromShippingInstructionTORequest.ValidateAll() if
// the designated constraints aren't met.
type CreateTransportDocumentFromShippingInstructionTORequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransportDocumentFromShippingInstructionTORequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransportDocumentFromShippingInstructionTORequestMultiError) AllErrors() []error {
	return m
}

// CreateTransportDocumentFromShippingInstructionTORequestValidationError is
// the validation error returned by
// CreateTransportDocumentFromShippingInstructionTORequest.Validate if the
// designated constraints aren't met.
type CreateTransportDocumentFromShippingInstructionTORequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransportDocumentFromShippingInstructionTORequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateTransportDocumentFromShippingInstructionTORequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateTransportDocumentFromShippingInstructionTORequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateTransportDocumentFromShippingInstructionTORequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e CreateTransportDocumentFromShippingInstructionTORequestValidationError) ErrorName() string {
	return "CreateTransportDocumentFromShippingInstructionTORequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransportDocumentFromShippingInstructionTORequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransportDocumentFromShippingInstructionTORequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransportDocumentFromShippingInstructionTORequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransportDocumentFromShippingInstructionTORequestValidationError{}

// Validate checks the field values on
// CreateTransportDocumentFromShippingInstructionTOResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransportDocumentFromShippingInstructionTOResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateTransportDocumentFromShippingInstructionTOResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransportDocumentFromShippingInstructionTOResponseMultiError, or nil
// if none found.
func (m *CreateTransportDocumentFromShippingInstructionTOResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransportDocumentFromShippingInstructionTOResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransportDocumentFromShippingInstructionTOResponseValidationError{
					field:  "TransportDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransportDocumentFromShippingInstructionTOResponseValidationError{
					field:  "TransportDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransportDocumentFromShippingInstructionTOResponseValidationError{
				field:  "TransportDocument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTransportDocumentFromShippingInstructionTOResponseMultiError(errors)
	}

	return nil
}

// CreateTransportDocumentFromShippingInstructionTOResponseMultiError is an
// error wrapping multiple validation errors returned by
// CreateTransportDocumentFromShippingInstructionTOResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateTransportDocumentFromShippingInstructionTOResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransportDocumentFromShippingInstructionTOResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransportDocumentFromShippingInstructionTOResponseMultiError) AllErrors() []error {
	return m
}

// CreateTransportDocumentFromShippingInstructionTOResponseValidationError is
// the validation error returned by
// CreateTransportDocumentFromShippingInstructionTOResponse.Validate if the
// designated constraints aren't met.
type CreateTransportDocumentFromShippingInstructionTOResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransportDocumentFromShippingInstructionTOResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateTransportDocumentFromShippingInstructionTOResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateTransportDocumentFromShippingInstructionTOResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateTransportDocumentFromShippingInstructionTOResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e CreateTransportDocumentFromShippingInstructionTOResponseValidationError) ErrorName() string {
	return "CreateTransportDocumentFromShippingInstructionTOResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransportDocumentFromShippingInstructionTOResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransportDocumentFromShippingInstructionTOResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransportDocumentFromShippingInstructionTOResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransportDocumentFromShippingInstructionTOResponseValidationError{}

// Validate checks the field values on GetTransportDocumentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransportDocumentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportDocumentsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTransportDocumentsResponseMultiError, or nil if none found.
func (m *GetTransportDocumentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportDocumentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransportDocuments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTransportDocumentsResponseValidationError{
						field:  fmt.Sprintf("TransportDocuments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTransportDocumentsResponseValidationError{
						field:  fmt.Sprintf("TransportDocuments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTransportDocumentsResponseValidationError{
					field:  fmt.Sprintf("TransportDocuments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetTransportDocumentsResponseMultiError(errors)
	}

	return nil
}

// GetTransportDocumentsResponseMultiError is an error wrapping multiple
// validation errors returned by GetTransportDocumentsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetTransportDocumentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportDocumentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportDocumentsResponseMultiError) AllErrors() []error { return m }

// GetTransportDocumentsResponseValidationError is the validation error
// returned by GetTransportDocumentsResponse.Validate if the designated
// constraints aren't met.
type GetTransportDocumentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportDocumentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportDocumentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportDocumentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportDocumentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportDocumentsResponseValidationError) ErrorName() string {
	return "GetTransportDocumentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportDocumentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportDocumentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportDocumentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportDocumentsResponseValidationError{}

// Validate checks the field values on GetTransportDocumentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransportDocumentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportDocumentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransportDocumentsRequestMultiError, or nil if none found.
func (m *GetTransportDocumentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportDocumentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetTransportDocumentsRequestMultiError(errors)
	}

	return nil
}

// GetTransportDocumentsRequestMultiError is an error wrapping multiple
// validation errors returned by GetTransportDocumentsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTransportDocumentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportDocumentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportDocumentsRequestMultiError) AllErrors() []error { return m }

// GetTransportDocumentsRequestValidationError is the validation error returned
// by GetTransportDocumentsRequest.Validate if the designated constraints
// aren't met.
type GetTransportDocumentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportDocumentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportDocumentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportDocumentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportDocumentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportDocumentsRequestValidationError) ErrorName() string {
	return "GetTransportDocumentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportDocumentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportDocumentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportDocumentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportDocumentsRequestValidationError{}

// Validate checks the field values on ApproveTransportDocumentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveTransportDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveTransportDocumentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ApproveTransportDocumentRequestMultiError, or nil if none found.
func (m *ApproveTransportDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveTransportDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransportDocumentReference

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return ApproveTransportDocumentRequestMultiError(errors)
	}

	return nil
}

// ApproveTransportDocumentRequestMultiError is an error wrapping multiple
// validation errors returned by ApproveTransportDocumentRequest.ValidateAll()
// if the designated constraints aren't met.
type ApproveTransportDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveTransportDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveTransportDocumentRequestMultiError) AllErrors() []error { return m }

// ApproveTransportDocumentRequestValidationError is the validation error
// returned by ApproveTransportDocumentRequest.Validate if the designated
// constraints aren't met.
type ApproveTransportDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveTransportDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveTransportDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveTransportDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveTransportDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveTransportDocumentRequestValidationError) ErrorName() string {
	return "ApproveTransportDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveTransportDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveTransportDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveTransportDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveTransportDocumentRequestValidationError{}

// Validate checks the field values on ApproveTransportDocumentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ApproveTransportDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveTransportDocumentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ApproveTransportDocumentResponseMultiError, or nil if none found.
func (m *ApproveTransportDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveTransportDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApproveTransportDocumentResponseMultiError(errors)
	}

	return nil
}

// ApproveTransportDocumentResponseMultiError is an error wrapping multiple
// validation errors returned by
// ApproveTransportDocumentResponse.ValidateAll() if the designated
// constraints aren't met.
type ApproveTransportDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveTransportDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveTransportDocumentResponseMultiError) AllErrors() []error { return m }

// ApproveTransportDocumentResponseValidationError is the validation error
// returned by ApproveTransportDocumentResponse.Validate if the designated
// constraints aren't met.
type ApproveTransportDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveTransportDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveTransportDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveTransportDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveTransportDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveTransportDocumentResponseValidationError) ErrorName() string {
	return "ApproveTransportDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveTransportDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveTransportDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveTransportDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveTransportDocumentResponseValidationError{}

// Validate checks the field values on TransportDocument with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransportDocument) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransportDocument with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransportDocumentMultiError, or nil if none found.
func (m *TransportDocument) ValidateAll() error {
	return m.validate(true)
}

func (m *TransportDocument) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportDocumentD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentValidationError{
					field:  "TransportDocumentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentValidationError{
					field:  "TransportDocumentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportDocumentD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentValidationError{
				field:  "TransportDocumentD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTransportDocumentT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentValidationError{
					field:  "TransportDocumentT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentValidationError{
					field:  "TransportDocumentT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportDocumentT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentValidationError{
				field:  "TransportDocumentT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransportDocumentMultiError(errors)
	}

	return nil
}

// TransportDocumentMultiError is an error wrapping multiple validation errors
// returned by TransportDocument.ValidateAll() if the designated constraints
// aren't met.
type TransportDocumentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportDocumentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportDocumentMultiError) AllErrors() []error { return m }

// TransportDocumentValidationError is the validation error returned by
// TransportDocument.Validate if the designated constraints aren't met.
type TransportDocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportDocumentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportDocumentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportDocumentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportDocumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportDocumentValidationError) ErrorName() string {
	return "TransportDocumentValidationError"
}

// Error satisfies the builtin error interface
func (e TransportDocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransportDocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportDocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportDocumentValidationError{}

// Validate checks the field values on TransportDocumentD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransportDocumentD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransportDocumentD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransportDocumentDMultiError, or nil if none found.
func (m *TransportDocumentD) ValidateAll() error {
	return m.validate(true)
}

func (m *TransportDocumentD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for TransportDocumentReference

	// no validation rules for LocationId

	// no validation rules for NumberOfOriginals

	// no validation rules for CarrierId

	// no validation rules for ShippingInstructionId

	// no validation rules for DeclaredValueCurrency

	// no validation rules for DeclaredValue

	// no validation rules for DeclaredValueString

	// no validation rules for NumberOfRiderPages

	// no validation rules for IssuingParty

	if len(errors) > 0 {
		return TransportDocumentDMultiError(errors)
	}

	return nil
}

// TransportDocumentDMultiError is an error wrapping multiple validation errors
// returned by TransportDocumentD.ValidateAll() if the designated constraints
// aren't met.
type TransportDocumentDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportDocumentDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportDocumentDMultiError) AllErrors() []error { return m }

// TransportDocumentDValidationError is the validation error returned by
// TransportDocumentD.Validate if the designated constraints aren't met.
type TransportDocumentDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportDocumentDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportDocumentDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportDocumentDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportDocumentDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportDocumentDValidationError) ErrorName() string {
	return "TransportDocumentDValidationError"
}

// Error satisfies the builtin error interface
func (e TransportDocumentDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransportDocumentD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportDocumentDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportDocumentDValidationError{}

// Validate checks the field values on TransportDocumentT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransportDocumentT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransportDocumentT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransportDocumentTMultiError, or nil if none found.
func (m *TransportDocumentT) ValidateAll() error {
	return m.validate(true)
}

func (m *TransportDocumentT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIssueDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentTValidationError{
					field:  "IssueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentTValidationError{
					field:  "IssueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentTValidationError{
				field:  "IssueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShippedOnboardDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentTValidationError{
					field:  "ShippedOnboardDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentTValidationError{
					field:  "ShippedOnboardDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippedOnboardDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentTValidationError{
				field:  "ShippedOnboardDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReceivedForShipmentDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentTValidationError{
					field:  "ReceivedForShipmentDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentTValidationError{
					field:  "ReceivedForShipmentDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivedForShipmentDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentTValidationError{
				field:  "ReceivedForShipmentDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentTValidationError{
					field:  "CreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentTValidationError{
					field:  "CreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentTValidationError{
				field:  "CreatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentTValidationError{
					field:  "UpdatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentTValidationError{
					field:  "UpdatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentTValidationError{
				field:  "UpdatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransportDocumentTMultiError(errors)
	}

	return nil
}

// TransportDocumentTMultiError is an error wrapping multiple validation errors
// returned by TransportDocumentT.ValidateAll() if the designated constraints
// aren't met.
type TransportDocumentTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportDocumentTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportDocumentTMultiError) AllErrors() []error { return m }

// TransportDocumentTValidationError is the validation error returned by
// TransportDocumentT.Validate if the designated constraints aren't met.
type TransportDocumentTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportDocumentTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportDocumentTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportDocumentTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportDocumentTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportDocumentTValidationError) ErrorName() string {
	return "TransportDocumentTValidationError"
}

// Error satisfies the builtin error interface
func (e TransportDocumentTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransportDocumentT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportDocumentTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportDocumentTValidationError{}

// Validate checks the field values on CreateTransportDocumentSummaryRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateTransportDocumentSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransportDocumentSummaryRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateTransportDocumentSummaryRequestMultiError, or nil if none found.
func (m *CreateTransportDocumentSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransportDocumentSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransportDocumentReference

	// no validation rules for TransportDocumentCreatedDateTime

	// no validation rules for TransportDocumentUpdatedDateTime

	// no validation rules for IssueDate

	// no validation rules for ShippedOnboardDate

	// no validation rules for ReceivedForShipmentDate

	// no validation rules for NumberOfOriginals

	// no validation rules for CarrierCode

	// no validation rules for CarrierCodeListProvider

	// no validation rules for NumberOfRiderPages

	// no validation rules for ShippingInstructionReference

	// no validation rules for DocumentStatus

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateTransportDocumentSummaryRequestMultiError(errors)
	}

	return nil
}

// CreateTransportDocumentSummaryRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateTransportDocumentSummaryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTransportDocumentSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransportDocumentSummaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransportDocumentSummaryRequestMultiError) AllErrors() []error { return m }

// CreateTransportDocumentSummaryRequestValidationError is the validation error
// returned by CreateTransportDocumentSummaryRequest.Validate if the
// designated constraints aren't met.
type CreateTransportDocumentSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransportDocumentSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransportDocumentSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransportDocumentSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransportDocumentSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransportDocumentSummaryRequestValidationError) ErrorName() string {
	return "CreateTransportDocumentSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransportDocumentSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransportDocumentSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransportDocumentSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransportDocumentSummaryRequestValidationError{}

// Validate checks the field values on CreateTransportDocumentSummaryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateTransportDocumentSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateTransportDocumentSummaryResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateTransportDocumentSummaryResponseMultiError, or nil if none found.
func (m *CreateTransportDocumentSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransportDocumentSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportDocumentSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransportDocumentSummaryResponseValidationError{
					field:  "TransportDocumentSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransportDocumentSummaryResponseValidationError{
					field:  "TransportDocumentSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportDocumentSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransportDocumentSummaryResponseValidationError{
				field:  "TransportDocumentSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTransportDocumentSummaryResponseMultiError(errors)
	}

	return nil
}

// CreateTransportDocumentSummaryResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateTransportDocumentSummaryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTransportDocumentSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransportDocumentSummaryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransportDocumentSummaryResponseMultiError) AllErrors() []error { return m }

// CreateTransportDocumentSummaryResponseValidationError is the validation
// error returned by CreateTransportDocumentSummaryResponse.Validate if the
// designated constraints aren't met.
type CreateTransportDocumentSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransportDocumentSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransportDocumentSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransportDocumentSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransportDocumentSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransportDocumentSummaryResponseValidationError) ErrorName() string {
	return "CreateTransportDocumentSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransportDocumentSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransportDocumentSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransportDocumentSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransportDocumentSummaryResponseValidationError{}

// Validate checks the field values on GetTransportDocumentSummariesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetTransportDocumentSummariesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportDocumentSummariesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetTransportDocumentSummariesResponseMultiError, or nil if none found.
func (m *GetTransportDocumentSummariesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportDocumentSummariesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransportDocumentSummaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTransportDocumentSummariesResponseValidationError{
						field:  fmt.Sprintf("TransportDocumentSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTransportDocumentSummariesResponseValidationError{
						field:  fmt.Sprintf("TransportDocumentSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTransportDocumentSummariesResponseValidationError{
					field:  fmt.Sprintf("TransportDocumentSummaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetTransportDocumentSummariesResponseMultiError(errors)
	}

	return nil
}

// GetTransportDocumentSummariesResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetTransportDocumentSummariesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTransportDocumentSummariesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportDocumentSummariesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportDocumentSummariesResponseMultiError) AllErrors() []error { return m }

// GetTransportDocumentSummariesResponseValidationError is the validation error
// returned by GetTransportDocumentSummariesResponse.Validate if the
// designated constraints aren't met.
type GetTransportDocumentSummariesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportDocumentSummariesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportDocumentSummariesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportDocumentSummariesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportDocumentSummariesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportDocumentSummariesResponseValidationError) ErrorName() string {
	return "GetTransportDocumentSummariesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportDocumentSummariesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportDocumentSummariesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportDocumentSummariesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportDocumentSummariesResponseValidationError{}

// Validate checks the field values on GetTransportDocumentSummariesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetTransportDocumentSummariesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportDocumentSummariesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetTransportDocumentSummariesRequestMultiError, or nil if none found.
func (m *GetTransportDocumentSummariesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportDocumentSummariesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetTransportDocumentSummariesRequestMultiError(errors)
	}

	return nil
}

// GetTransportDocumentSummariesRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetTransportDocumentSummariesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTransportDocumentSummariesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportDocumentSummariesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportDocumentSummariesRequestMultiError) AllErrors() []error { return m }

// GetTransportDocumentSummariesRequestValidationError is the validation error
// returned by GetTransportDocumentSummariesRequest.Validate if the designated
// constraints aren't met.
type GetTransportDocumentSummariesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportDocumentSummariesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportDocumentSummariesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportDocumentSummariesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportDocumentSummariesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportDocumentSummariesRequestValidationError) ErrorName() string {
	return "GetTransportDocumentSummariesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportDocumentSummariesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportDocumentSummariesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportDocumentSummariesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportDocumentSummariesRequestValidationError{}

// Validate checks the field values on GetTransportDocumentSummaryByPkRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetTransportDocumentSummaryByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetTransportDocumentSummaryByPkRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetTransportDocumentSummaryByPkRequestMultiError, or nil if none found.
func (m *GetTransportDocumentSummaryByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportDocumentSummaryByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransportDocumentSummaryByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransportDocumentSummaryByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransportDocumentSummaryByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransportDocumentSummaryByPkRequestMultiError(errors)
	}

	return nil
}

// GetTransportDocumentSummaryByPkRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetTransportDocumentSummaryByPkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTransportDocumentSummaryByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportDocumentSummaryByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportDocumentSummaryByPkRequestMultiError) AllErrors() []error { return m }

// GetTransportDocumentSummaryByPkRequestValidationError is the validation
// error returned by GetTransportDocumentSummaryByPkRequest.Validate if the
// designated constraints aren't met.
type GetTransportDocumentSummaryByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportDocumentSummaryByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportDocumentSummaryByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportDocumentSummaryByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportDocumentSummaryByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportDocumentSummaryByPkRequestValidationError) ErrorName() string {
	return "GetTransportDocumentSummaryByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportDocumentSummaryByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportDocumentSummaryByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportDocumentSummaryByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportDocumentSummaryByPkRequestValidationError{}

// Validate checks the field values on GetTransportDocumentSummaryByPkResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetTransportDocumentSummaryByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetTransportDocumentSummaryByPkResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetTransportDocumentSummaryByPkResponseMultiError, or nil if none found.
func (m *GetTransportDocumentSummaryByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportDocumentSummaryByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportDocumentSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransportDocumentSummaryByPkResponseValidationError{
					field:  "TransportDocumentSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransportDocumentSummaryByPkResponseValidationError{
					field:  "TransportDocumentSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportDocumentSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransportDocumentSummaryByPkResponseValidationError{
				field:  "TransportDocumentSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransportDocumentSummaryByPkResponseMultiError(errors)
	}

	return nil
}

// GetTransportDocumentSummaryByPkResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetTransportDocumentSummaryByPkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTransportDocumentSummaryByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportDocumentSummaryByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportDocumentSummaryByPkResponseMultiError) AllErrors() []error { return m }

// GetTransportDocumentSummaryByPkResponseValidationError is the validation
// error returned by GetTransportDocumentSummaryByPkResponse.Validate if the
// designated constraints aren't met.
type GetTransportDocumentSummaryByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportDocumentSummaryByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportDocumentSummaryByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportDocumentSummaryByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportDocumentSummaryByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportDocumentSummaryByPkResponseValidationError) ErrorName() string {
	return "GetTransportDocumentSummaryByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportDocumentSummaryByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportDocumentSummaryByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportDocumentSummaryByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportDocumentSummaryByPkResponseValidationError{}

// Validate checks the field values on TransportDocumentSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransportDocumentSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransportDocumentSummary with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransportDocumentSummaryMultiError, or nil if none found.
func (m *TransportDocumentSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *TransportDocumentSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportDocumentSummaryD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentSummaryValidationError{
					field:  "TransportDocumentSummaryD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentSummaryValidationError{
					field:  "TransportDocumentSummaryD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportDocumentSummaryD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentSummaryValidationError{
				field:  "TransportDocumentSummaryD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTransportDocumentSummaryT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentSummaryValidationError{
					field:  "TransportDocumentSummaryT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentSummaryValidationError{
					field:  "TransportDocumentSummaryT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportDocumentSummaryT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentSummaryValidationError{
				field:  "TransportDocumentSummaryT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentSummaryValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentSummaryValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentSummaryValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentSummaryValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentSummaryValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentSummaryValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransportDocumentSummaryMultiError(errors)
	}

	return nil
}

// TransportDocumentSummaryMultiError is an error wrapping multiple validation
// errors returned by TransportDocumentSummary.ValidateAll() if the designated
// constraints aren't met.
type TransportDocumentSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportDocumentSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportDocumentSummaryMultiError) AllErrors() []error { return m }

// TransportDocumentSummaryValidationError is the validation error returned by
// TransportDocumentSummary.Validate if the designated constraints aren't met.
type TransportDocumentSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportDocumentSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportDocumentSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportDocumentSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportDocumentSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportDocumentSummaryValidationError) ErrorName() string {
	return "TransportDocumentSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e TransportDocumentSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransportDocumentSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportDocumentSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportDocumentSummaryValidationError{}

// Validate checks the field values on TransportDocumentSummaryD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransportDocumentSummaryD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransportDocumentSummaryD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransportDocumentSummaryDMultiError, or nil if none found.
func (m *TransportDocumentSummaryD) ValidateAll() error {
	return m.validate(true)
}

func (m *TransportDocumentSummaryD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for TransportDocumentReference

	// no validation rules for NumberOfOriginals

	// no validation rules for CarrierCode

	// no validation rules for CarrierCodeListProvider

	// no validation rules for NumberOfRiderPages

	// no validation rules for ShippingInstructionReference

	// no validation rules for DocumentStatus

	if len(errors) > 0 {
		return TransportDocumentSummaryDMultiError(errors)
	}

	return nil
}

// TransportDocumentSummaryDMultiError is an error wrapping multiple validation
// errors returned by TransportDocumentSummaryD.ValidateAll() if the
// designated constraints aren't met.
type TransportDocumentSummaryDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportDocumentSummaryDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportDocumentSummaryDMultiError) AllErrors() []error { return m }

// TransportDocumentSummaryDValidationError is the validation error returned by
// TransportDocumentSummaryD.Validate if the designated constraints aren't met.
type TransportDocumentSummaryDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportDocumentSummaryDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportDocumentSummaryDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportDocumentSummaryDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportDocumentSummaryDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportDocumentSummaryDValidationError) ErrorName() string {
	return "TransportDocumentSummaryDValidationError"
}

// Error satisfies the builtin error interface
func (e TransportDocumentSummaryDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransportDocumentSummaryD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportDocumentSummaryDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportDocumentSummaryDValidationError{}

// Validate checks the field values on TransportDocumentSummaryT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransportDocumentSummaryT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransportDocumentSummaryT with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransportDocumentSummaryTMultiError, or nil if none found.
func (m *TransportDocumentSummaryT) ValidateAll() error {
	return m.validate(true)
}

func (m *TransportDocumentSummaryT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportDocumentCreatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentSummaryTValidationError{
					field:  "TransportDocumentCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentSummaryTValidationError{
					field:  "TransportDocumentCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportDocumentCreatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentSummaryTValidationError{
				field:  "TransportDocumentCreatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTransportDocumentUpdatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentSummaryTValidationError{
					field:  "TransportDocumentUpdatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentSummaryTValidationError{
					field:  "TransportDocumentUpdatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportDocumentUpdatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentSummaryTValidationError{
				field:  "TransportDocumentUpdatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIssueDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentSummaryTValidationError{
					field:  "IssueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentSummaryTValidationError{
					field:  "IssueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentSummaryTValidationError{
				field:  "IssueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShippedOnboardDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentSummaryTValidationError{
					field:  "ShippedOnboardDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentSummaryTValidationError{
					field:  "ShippedOnboardDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShippedOnboardDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentSummaryTValidationError{
				field:  "ShippedOnboardDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReceivedForShipmentDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportDocumentSummaryTValidationError{
					field:  "ReceivedForShipmentDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportDocumentSummaryTValidationError{
					field:  "ReceivedForShipmentDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivedForShipmentDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportDocumentSummaryTValidationError{
				field:  "ReceivedForShipmentDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransportDocumentSummaryTMultiError(errors)
	}

	return nil
}

// TransportDocumentSummaryTMultiError is an error wrapping multiple validation
// errors returned by TransportDocumentSummaryT.ValidateAll() if the
// designated constraints aren't met.
type TransportDocumentSummaryTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportDocumentSummaryTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportDocumentSummaryTMultiError) AllErrors() []error { return m }

// TransportDocumentSummaryTValidationError is the validation error returned by
// TransportDocumentSummaryT.Validate if the designated constraints aren't met.
type TransportDocumentSummaryTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportDocumentSummaryTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportDocumentSummaryTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportDocumentSummaryTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportDocumentSummaryTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportDocumentSummaryTValidationError) ErrorName() string {
	return "TransportDocumentSummaryTValidationError"
}

// Error satisfies the builtin error interface
func (e TransportDocumentSummaryTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransportDocumentSummaryT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportDocumentSummaryTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportDocumentSummaryTValidationError{}
