// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: ebl/v1/issuerequestresponse.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateIssuanceRequestResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentReference string `protobuf:"bytes,1,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	IssuanceResponseCode       string `protobuf:"bytes,2,opt,name=issuance_response_code,json=issuanceResponseCode,proto3" json:"issuance_response_code,omitempty"`
	Reason                     string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	CreatedDateTime            string `protobuf:"bytes,4,opt,name=created_date_time,json=createdDateTime,proto3" json:"created_date_time,omitempty"`
	IssuanceRequestId          uint32 `protobuf:"varint,5,opt,name=issuance_request_id,json=issuanceRequestId,proto3" json:"issuance_request_id,omitempty"`
	UserId                     string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                  string `protobuf:"bytes,7,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                  string `protobuf:"bytes,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateIssuanceRequestResponseRequest) Reset() {
	*x = CreateIssuanceRequestResponseRequest{}
	mi := &file_ebl_v1_issuerequestresponse_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIssuanceRequestResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssuanceRequestResponseRequest) ProtoMessage() {}

func (x *CreateIssuanceRequestResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequestresponse_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssuanceRequestResponseRequest.ProtoReflect.Descriptor instead.
func (*CreateIssuanceRequestResponseRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequestresponse_proto_rawDescGZIP(), []int{0}
}

func (x *CreateIssuanceRequestResponseRequest) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *CreateIssuanceRequestResponseRequest) GetIssuanceResponseCode() string {
	if x != nil {
		return x.IssuanceResponseCode
	}
	return ""
}

func (x *CreateIssuanceRequestResponseRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CreateIssuanceRequestResponseRequest) GetCreatedDateTime() string {
	if x != nil {
		return x.CreatedDateTime
	}
	return ""
}

func (x *CreateIssuanceRequestResponseRequest) GetIssuanceRequestId() uint32 {
	if x != nil {
		return x.IssuanceRequestId
	}
	return 0
}

func (x *CreateIssuanceRequestResponseRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateIssuanceRequestResponseRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateIssuanceRequestResponseRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateIssuanceRequestResponseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuanceRequestResponse *IssuanceRequestResponse `protobuf:"bytes,1,opt,name=issuance_request_response,json=issuanceRequestResponse,proto3" json:"issuance_request_response,omitempty"`
}

func (x *CreateIssuanceRequestResponseResponse) Reset() {
	*x = CreateIssuanceRequestResponseResponse{}
	mi := &file_ebl_v1_issuerequestresponse_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIssuanceRequestResponseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssuanceRequestResponseResponse) ProtoMessage() {}

func (x *CreateIssuanceRequestResponseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequestresponse_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssuanceRequestResponseResponse.ProtoReflect.Descriptor instead.
func (*CreateIssuanceRequestResponseResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequestresponse_proto_rawDescGZIP(), []int{1}
}

func (x *CreateIssuanceRequestResponseResponse) GetIssuanceRequestResponse() *IssuanceRequestResponse {
	if x != nil {
		return x.IssuanceRequestResponse
	}
	return nil
}

type UpdateIssuanceRequestResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentReference string `protobuf:"bytes,1,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	IssuanceResponseCode       string `protobuf:"bytes,2,opt,name=issuance_response_code,json=issuanceResponseCode,proto3" json:"issuance_response_code,omitempty"`
	Reason                     string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Id                         string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	UserId                     string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                  string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                  string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateIssuanceRequestResponseRequest) Reset() {
	*x = UpdateIssuanceRequestResponseRequest{}
	mi := &file_ebl_v1_issuerequestresponse_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateIssuanceRequestResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssuanceRequestResponseRequest) ProtoMessage() {}

func (x *UpdateIssuanceRequestResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequestresponse_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssuanceRequestResponseRequest.ProtoReflect.Descriptor instead.
func (*UpdateIssuanceRequestResponseRequest) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequestresponse_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateIssuanceRequestResponseRequest) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *UpdateIssuanceRequestResponseRequest) GetIssuanceResponseCode() string {
	if x != nil {
		return x.IssuanceResponseCode
	}
	return ""
}

func (x *UpdateIssuanceRequestResponseRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UpdateIssuanceRequestResponseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateIssuanceRequestResponseRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateIssuanceRequestResponseRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateIssuanceRequestResponseRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateIssuanceRequestResponseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateIssuanceRequestResponseResponse) Reset() {
	*x = UpdateIssuanceRequestResponseResponse{}
	mi := &file_ebl_v1_issuerequestresponse_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateIssuanceRequestResponseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssuanceRequestResponseResponse) ProtoMessage() {}

func (x *UpdateIssuanceRequestResponseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequestresponse_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssuanceRequestResponseResponse.ProtoReflect.Descriptor instead.
func (*UpdateIssuanceRequestResponseResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequestresponse_proto_rawDescGZIP(), []int{3}
}

type IssuanceRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuanceRequestResponseD *IssuanceRequestResponseD `protobuf:"bytes,1,opt,name=issuance_request_response_d,json=issuanceRequestResponseD,proto3" json:"issuance_request_response_d,omitempty"`
	IssuanceRequestResponseT *IssuanceRequestResponseT `protobuf:"bytes,2,opt,name=issuance_request_response_t,json=issuanceRequestResponseT,proto3" json:"issuance_request_response_t,omitempty"`
	CrUpdUser                *v1.CrUpdUser             `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                *v1.CrUpdTime             `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *IssuanceRequestResponse) Reset() {
	*x = IssuanceRequestResponse{}
	mi := &file_ebl_v1_issuerequestresponse_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssuanceRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuanceRequestResponse) ProtoMessage() {}

func (x *IssuanceRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequestresponse_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuanceRequestResponse.ProtoReflect.Descriptor instead.
func (*IssuanceRequestResponse) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequestresponse_proto_rawDescGZIP(), []int{4}
}

func (x *IssuanceRequestResponse) GetIssuanceRequestResponseD() *IssuanceRequestResponseD {
	if x != nil {
		return x.IssuanceRequestResponseD
	}
	return nil
}

func (x *IssuanceRequestResponse) GetIssuanceRequestResponseT() *IssuanceRequestResponseT {
	if x != nil {
		return x.IssuanceRequestResponseT
	}
	return nil
}

func (x *IssuanceRequestResponse) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *IssuanceRequestResponse) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type IssuanceRequestResponseD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                      []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                        string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	TransportDocumentReference string `protobuf:"bytes,4,opt,name=transport_document_reference,json=transportDocumentReference,proto3" json:"transport_document_reference,omitempty"`
	IssuanceResponseCode       string `protobuf:"bytes,5,opt,name=issuance_response_code,json=issuanceResponseCode,proto3" json:"issuance_response_code,omitempty"`
	Reason                     string `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	IssuanceRequestId          uint32 `protobuf:"varint,7,opt,name=issuance_request_id,json=issuanceRequestId,proto3" json:"issuance_request_id,omitempty"`
}

func (x *IssuanceRequestResponseD) Reset() {
	*x = IssuanceRequestResponseD{}
	mi := &file_ebl_v1_issuerequestresponse_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssuanceRequestResponseD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuanceRequestResponseD) ProtoMessage() {}

func (x *IssuanceRequestResponseD) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequestresponse_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuanceRequestResponseD.ProtoReflect.Descriptor instead.
func (*IssuanceRequestResponseD) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequestresponse_proto_rawDescGZIP(), []int{5}
}

func (x *IssuanceRequestResponseD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IssuanceRequestResponseD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *IssuanceRequestResponseD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *IssuanceRequestResponseD) GetTransportDocumentReference() string {
	if x != nil {
		return x.TransportDocumentReference
	}
	return ""
}

func (x *IssuanceRequestResponseD) GetIssuanceResponseCode() string {
	if x != nil {
		return x.IssuanceResponseCode
	}
	return ""
}

func (x *IssuanceRequestResponseD) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *IssuanceRequestResponseD) GetIssuanceRequestId() uint32 {
	if x != nil {
		return x.IssuanceRequestId
	}
	return 0
}

type IssuanceRequestResponseT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_date_time,json=createdDateTime,proto3" json:"created_date_time,omitempty"`
}

func (x *IssuanceRequestResponseT) Reset() {
	*x = IssuanceRequestResponseT{}
	mi := &file_ebl_v1_issuerequestresponse_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssuanceRequestResponseT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuanceRequestResponseT) ProtoMessage() {}

func (x *IssuanceRequestResponseT) ProtoReflect() protoreflect.Message {
	mi := &file_ebl_v1_issuerequestresponse_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuanceRequestResponseT.ProtoReflect.Descriptor instead.
func (*IssuanceRequestResponseT) Descriptor() ([]byte, []int) {
	return file_ebl_v1_issuerequestresponse_proto_rawDescGZIP(), []int{6}
}

func (x *IssuanceRequestResponseT) GetCreatedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDateTime
	}
	return nil
}

var File_ebl_v1_issuerequestresponse_proto protoreflect.FileDescriptor

var file_ebl_v1_issuerequestresponse_proto_rawDesc = []byte{
	0x0a, 0x21, 0x65, 0x62, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa5, 0x03, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x1c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0xba, 0x48, 0x14, 0x72, 0x12, 0x18, 0x14, 0x32, 0x0e, 0x5e, 0x5c, 0x53, 0x2b, 0x28,
	0x5c, 0x73, 0x2b, 0x5c, 0x53, 0x2b, 0x29, 0x2a, 0x24, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x16, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x14,
	0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x48, 0x15, 0x72, 0x13, 0x18, 0xff, 0x01, 0x32, 0x0e,
	0x5e, 0x5c, 0x53, 0x2b, 0x28, 0x5c, 0x73, 0x2b, 0x5c, 0x53, 0x2b, 0x29, 0x2a, 0x24, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x25, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x19, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x17, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9d, 0x02, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69,
	0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x73, 0x73,
	0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x27, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x17, 0x49, 0x73,
	0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x1b, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x62, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x52, 0x18, 0x69, 0x73,
	0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x12, 0x5f, 0x0a, 0x1b, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x62,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x52, 0x18, 0x69,
	0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x18, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69,
	0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x73, 0x73,
	0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x73,
	0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x18, 0x49, 0x73, 0x73,
	0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x99, 0x02,
	0x0a, 0x1b, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a,
	0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x2e, 0x65, 0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73,
	0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65,
	0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x2e, 0x65,
	0x62, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x62, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x64, 0x63, 0x73, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x65, 0x62,
	0x6c, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ebl_v1_issuerequestresponse_proto_rawDescOnce sync.Once
	file_ebl_v1_issuerequestresponse_proto_rawDescData = file_ebl_v1_issuerequestresponse_proto_rawDesc
)

func file_ebl_v1_issuerequestresponse_proto_rawDescGZIP() []byte {
	file_ebl_v1_issuerequestresponse_proto_rawDescOnce.Do(func() {
		file_ebl_v1_issuerequestresponse_proto_rawDescData = protoimpl.X.CompressGZIP(file_ebl_v1_issuerequestresponse_proto_rawDescData)
	})
	return file_ebl_v1_issuerequestresponse_proto_rawDescData
}

var file_ebl_v1_issuerequestresponse_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ebl_v1_issuerequestresponse_proto_goTypes = []any{
	(*CreateIssuanceRequestResponseRequest)(nil),  // 0: ebl.v1.CreateIssuanceRequestResponseRequest
	(*CreateIssuanceRequestResponseResponse)(nil), // 1: ebl.v1.CreateIssuanceRequestResponseResponse
	(*UpdateIssuanceRequestResponseRequest)(nil),  // 2: ebl.v1.UpdateIssuanceRequestResponseRequest
	(*UpdateIssuanceRequestResponseResponse)(nil), // 3: ebl.v1.UpdateIssuanceRequestResponseResponse
	(*IssuanceRequestResponse)(nil),               // 4: ebl.v1.IssuanceRequestResponse
	(*IssuanceRequestResponseD)(nil),              // 5: ebl.v1.IssuanceRequestResponseD
	(*IssuanceRequestResponseT)(nil),              // 6: ebl.v1.IssuanceRequestResponseT
	(*v1.CrUpdUser)(nil),                          // 7: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                          // 8: common.v1.CrUpdTime
	(*timestamppb.Timestamp)(nil),                 // 9: google.protobuf.Timestamp
}
var file_ebl_v1_issuerequestresponse_proto_depIdxs = []int32{
	4, // 0: ebl.v1.CreateIssuanceRequestResponseResponse.issuance_request_response:type_name -> ebl.v1.IssuanceRequestResponse
	5, // 1: ebl.v1.IssuanceRequestResponse.issuance_request_response_d:type_name -> ebl.v1.IssuanceRequestResponseD
	6, // 2: ebl.v1.IssuanceRequestResponse.issuance_request_response_t:type_name -> ebl.v1.IssuanceRequestResponseT
	7, // 3: ebl.v1.IssuanceRequestResponse.cr_upd_user:type_name -> common.v1.CrUpdUser
	8, // 4: ebl.v1.IssuanceRequestResponse.cr_upd_time:type_name -> common.v1.CrUpdTime
	9, // 5: ebl.v1.IssuanceRequestResponseT.created_date_time:type_name -> google.protobuf.Timestamp
	0, // 6: ebl.v1.IssueRequestResponseService.CreateIssuanceRequestResponse:input_type -> ebl.v1.CreateIssuanceRequestResponseRequest
	2, // 7: ebl.v1.IssueRequestResponseService.UpdateIssuanceRequestResponse:input_type -> ebl.v1.UpdateIssuanceRequestResponseRequest
	1, // 8: ebl.v1.IssueRequestResponseService.CreateIssuanceRequestResponse:output_type -> ebl.v1.CreateIssuanceRequestResponseResponse
	3, // 9: ebl.v1.IssueRequestResponseService.UpdateIssuanceRequestResponse:output_type -> ebl.v1.UpdateIssuanceRequestResponseResponse
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_ebl_v1_issuerequestresponse_proto_init() }
func file_ebl_v1_issuerequestresponse_proto_init() {
	if File_ebl_v1_issuerequestresponse_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ebl_v1_issuerequestresponse_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ebl_v1_issuerequestresponse_proto_goTypes,
		DependencyIndexes: file_ebl_v1_issuerequestresponse_proto_depIdxs,
		MessageInfos:      file_ebl_v1_issuerequestresponse_proto_msgTypes,
	}.Build()
	File_ebl_v1_issuerequestresponse_proto = out.File
	file_ebl_v1_issuerequestresponse_proto_rawDesc = nil
	file_ebl_v1_issuerequestresponse_proto_goTypes = nil
	file_ebl_v1_issuerequestresponse_proto_depIdxs = nil
}
