// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: ovs/v3/vesselschedule.proto

package v3

import (
	v1 "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateVesselScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VesselId  uint32 `protobuf:"varint,1,opt,name=vessel_id,json=vesselId,proto3" json:"vessel_id,omitempty"`
	ServiceId uint32 `protobuf:"varint,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	UserId    string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateVesselScheduleRequest) Reset() {
	*x = CreateVesselScheduleRequest{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVesselScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVesselScheduleRequest) ProtoMessage() {}

func (x *CreateVesselScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVesselScheduleRequest.ProtoReflect.Descriptor instead.
func (*CreateVesselScheduleRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVesselScheduleRequest) GetVesselId() uint32 {
	if x != nil {
		return x.VesselId
	}
	return 0
}

func (x *CreateVesselScheduleRequest) GetServiceId() uint32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *CreateVesselScheduleRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateVesselScheduleRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateVesselScheduleRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateVesselScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VesselSchedule *VesselSchedule `protobuf:"bytes,1,opt,name=vessel_schedule,json=vesselSchedule,proto3" json:"vessel_schedule,omitempty"`
}

func (x *CreateVesselScheduleResponse) Reset() {
	*x = CreateVesselScheduleResponse{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVesselScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVesselScheduleResponse) ProtoMessage() {}

func (x *CreateVesselScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVesselScheduleResponse.ProtoReflect.Descriptor instead.
func (*CreateVesselScheduleResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVesselScheduleResponse) GetVesselSchedule() *VesselSchedule {
	if x != nil {
		return x.VesselSchedule
	}
	return nil
}

type GetVesselSchedulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VesselSchedules []*VesselSchedule `protobuf:"bytes,1,rep,name=vessel_schedules,json=vesselSchedules,proto3" json:"vessel_schedules,omitempty"`
	NextCursor      string            `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetVesselSchedulesResponse) Reset() {
	*x = GetVesselSchedulesResponse{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVesselSchedulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVesselSchedulesResponse) ProtoMessage() {}

func (x *GetVesselSchedulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVesselSchedulesResponse.ProtoReflect.Descriptor instead.
func (*GetVesselSchedulesResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{2}
}

func (x *GetVesselSchedulesResponse) GetVesselSchedules() []*VesselSchedule {
	if x != nil {
		return x.VesselSchedules
	}
	return nil
}

func (x *GetVesselSchedulesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetVesselSchedulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetVesselSchedulesRequest) Reset() {
	*x = GetVesselSchedulesRequest{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVesselSchedulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVesselSchedulesRequest) ProtoMessage() {}

func (x *GetVesselSchedulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVesselSchedulesRequest.ProtoReflect.Descriptor instead.
func (*GetVesselSchedulesRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{3}
}

func (x *GetVesselSchedulesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetVesselSchedulesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetVesselSchedulesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetVesselSchedulesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetVesselScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetVesselScheduleRequest) Reset() {
	*x = GetVesselScheduleRequest{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVesselScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVesselScheduleRequest) ProtoMessage() {}

func (x *GetVesselScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVesselScheduleRequest.ProtoReflect.Descriptor instead.
func (*GetVesselScheduleRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{4}
}

func (x *GetVesselScheduleRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetVesselScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VesselSchedule *VesselSchedule `protobuf:"bytes,1,opt,name=vessel_schedule,json=vesselSchedule,proto3" json:"vessel_schedule,omitempty"`
}

func (x *GetVesselScheduleResponse) Reset() {
	*x = GetVesselScheduleResponse{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVesselScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVesselScheduleResponse) ProtoMessage() {}

func (x *GetVesselScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVesselScheduleResponse.ProtoReflect.Descriptor instead.
func (*GetVesselScheduleResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{5}
}

func (x *GetVesselScheduleResponse) GetVesselSchedule() *VesselSchedule {
	if x != nil {
		return x.VesselSchedule
	}
	return nil
}

type GetVesselScheduleByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetVesselScheduleByPkRequest) Reset() {
	*x = GetVesselScheduleByPkRequest{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVesselScheduleByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVesselScheduleByPkRequest) ProtoMessage() {}

func (x *GetVesselScheduleByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVesselScheduleByPkRequest.ProtoReflect.Descriptor instead.
func (*GetVesselScheduleByPkRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{6}
}

func (x *GetVesselScheduleByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetVesselScheduleByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VesselSchedule *VesselSchedule `protobuf:"bytes,1,opt,name=vessel_schedule,json=vesselSchedule,proto3" json:"vessel_schedule,omitempty"`
}

func (x *GetVesselScheduleByPkResponse) Reset() {
	*x = GetVesselScheduleByPkResponse{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVesselScheduleByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVesselScheduleByPkResponse) ProtoMessage() {}

func (x *GetVesselScheduleByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVesselScheduleByPkResponse.ProtoReflect.Descriptor instead.
func (*GetVesselScheduleByPkResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{7}
}

func (x *GetVesselScheduleByPkResponse) GetVesselSchedule() *VesselSchedule {
	if x != nil {
		return x.VesselSchedule
	}
	return nil
}

type VesselSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VesselScheduleD *VesselScheduleD `protobuf:"bytes,1,opt,name=vessel_schedule_d,json=vesselScheduleD,proto3" json:"vessel_schedule_d,omitempty"`
	CrUpdUser       *v1.CrUpdUser    `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime       *v1.CrUpdTime    `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *VesselSchedule) Reset() {
	*x = VesselSchedule{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VesselSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VesselSchedule) ProtoMessage() {}

func (x *VesselSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VesselSchedule.ProtoReflect.Descriptor instead.
func (*VesselSchedule) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{8}
}

func (x *VesselSchedule) GetVesselScheduleD() *VesselScheduleD {
	if x != nil {
		return x.VesselScheduleD
	}
	return nil
}

func (x *VesselSchedule) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *VesselSchedule) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type VesselScheduleD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4     []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS       string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	VesselId  uint32 `protobuf:"varint,4,opt,name=vessel_id,json=vesselId,proto3" json:"vessel_id,omitempty"`
	ServiceId uint32 `protobuf:"varint,5,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *VesselScheduleD) Reset() {
	*x = VesselScheduleD{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VesselScheduleD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VesselScheduleD) ProtoMessage() {}

func (x *VesselScheduleD) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VesselScheduleD.ProtoReflect.Descriptor instead.
func (*VesselScheduleD) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{9}
}

func (x *VesselScheduleD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VesselScheduleD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *VesselScheduleD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *VesselScheduleD) GetVesselId() uint32 {
	if x != nil {
		return x.VesselId
	}
	return 0
}

func (x *VesselScheduleD) GetServiceId() uint32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

type CreateVesselRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VesselImoNumber                       string  `protobuf:"bytes,1,opt,name=vessel_imo_number,json=vesselImoNumber,proto3" json:"vessel_imo_number,omitempty"`
	VesselName                            string  `protobuf:"bytes,2,opt,name=vessel_name,json=vesselName,proto3" json:"vessel_name,omitempty"`
	VesselFlag                            string  `protobuf:"bytes,3,opt,name=vessel_flag,json=vesselFlag,proto3" json:"vessel_flag,omitempty"`
	VesselCallSign                        string  `protobuf:"bytes,4,opt,name=vessel_call_sign,json=vesselCallSign,proto3" json:"vessel_call_sign,omitempty"`
	IsDummyVessel                         bool    `protobuf:"varint,5,opt,name=is_dummy_vessel,json=isDummyVessel,proto3" json:"is_dummy_vessel,omitempty"`
	VesselOperatorCarrierCode             string  `protobuf:"bytes,6,opt,name=vessel_operator_carrier_code,json=vesselOperatorCarrierCode,proto3" json:"vessel_operator_carrier_code,omitempty"`
	VesselOperatorCarrierCodeListProvider string  `protobuf:"bytes,7,opt,name=vessel_operator_carrier_code_list_provider,json=vesselOperatorCarrierCodeListProvider,proto3" json:"vessel_operator_carrier_code_list_provider,omitempty"`
	VesselLength                          float64 `protobuf:"fixed64,8,opt,name=vessel_length,json=vesselLength,proto3" json:"vessel_length,omitempty"`
	VesselWidth                           float64 `protobuf:"fixed64,9,opt,name=vessel_width,json=vesselWidth,proto3" json:"vessel_width,omitempty"`
	DimensionUnit                         string  `protobuf:"bytes,10,opt,name=dimension_unit,json=dimensionUnit,proto3" json:"dimension_unit,omitempty"`
	UserId                                string  `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                             string  `protobuf:"bytes,12,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                             string  `protobuf:"bytes,13,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateVesselRequest) Reset() {
	*x = CreateVesselRequest{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVesselRequest) ProtoMessage() {}

func (x *CreateVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVesselRequest.ProtoReflect.Descriptor instead.
func (*CreateVesselRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{10}
}

func (x *CreateVesselRequest) GetVesselImoNumber() string {
	if x != nil {
		return x.VesselImoNumber
	}
	return ""
}

func (x *CreateVesselRequest) GetVesselName() string {
	if x != nil {
		return x.VesselName
	}
	return ""
}

func (x *CreateVesselRequest) GetVesselFlag() string {
	if x != nil {
		return x.VesselFlag
	}
	return ""
}

func (x *CreateVesselRequest) GetVesselCallSign() string {
	if x != nil {
		return x.VesselCallSign
	}
	return ""
}

func (x *CreateVesselRequest) GetIsDummyVessel() bool {
	if x != nil {
		return x.IsDummyVessel
	}
	return false
}

func (x *CreateVesselRequest) GetVesselOperatorCarrierCode() string {
	if x != nil {
		return x.VesselOperatorCarrierCode
	}
	return ""
}

func (x *CreateVesselRequest) GetVesselOperatorCarrierCodeListProvider() string {
	if x != nil {
		return x.VesselOperatorCarrierCodeListProvider
	}
	return ""
}

func (x *CreateVesselRequest) GetVesselLength() float64 {
	if x != nil {
		return x.VesselLength
	}
	return 0
}

func (x *CreateVesselRequest) GetVesselWidth() float64 {
	if x != nil {
		return x.VesselWidth
	}
	return 0
}

func (x *CreateVesselRequest) GetDimensionUnit() string {
	if x != nil {
		return x.DimensionUnit
	}
	return ""
}

func (x *CreateVesselRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateVesselRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateVesselRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateVesselResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vessel *Vessel `protobuf:"bytes,1,opt,name=vessel,proto3" json:"vessel,omitempty"`
}

func (x *CreateVesselResponse) Reset() {
	*x = CreateVesselResponse{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVesselResponse) ProtoMessage() {}

func (x *CreateVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVesselResponse.ProtoReflect.Descriptor instead.
func (*CreateVesselResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{11}
}

func (x *CreateVesselResponse) GetVessel() *Vessel {
	if x != nil {
		return x.Vessel
	}
	return nil
}

type GetVesselsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vessels    []*Vessel `protobuf:"bytes,1,rep,name=vessels,proto3" json:"vessels,omitempty"`
	NextCursor string    `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetVesselsResponse) Reset() {
	*x = GetVesselsResponse{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVesselsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVesselsResponse) ProtoMessage() {}

func (x *GetVesselsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVesselsResponse.ProtoReflect.Descriptor instead.
func (*GetVesselsResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{12}
}

func (x *GetVesselsResponse) GetVessels() []*Vessel {
	if x != nil {
		return x.Vessels
	}
	return nil
}

func (x *GetVesselsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetVesselsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetVesselsRequest) Reset() {
	*x = GetVesselsRequest{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVesselsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVesselsRequest) ProtoMessage() {}

func (x *GetVesselsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVesselsRequest.ProtoReflect.Descriptor instead.
func (*GetVesselsRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{13}
}

func (x *GetVesselsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetVesselsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetVesselsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetVesselsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetVesselRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetVesselRequest) Reset() {
	*x = GetVesselRequest{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVesselRequest) ProtoMessage() {}

func (x *GetVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVesselRequest.ProtoReflect.Descriptor instead.
func (*GetVesselRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{14}
}

func (x *GetVesselRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetVesselResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vessel *Vessel `protobuf:"bytes,1,opt,name=vessel,proto3" json:"vessel,omitempty"`
}

func (x *GetVesselResponse) Reset() {
	*x = GetVesselResponse{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVesselResponse) ProtoMessage() {}

func (x *GetVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVesselResponse.ProtoReflect.Descriptor instead.
func (*GetVesselResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{15}
}

func (x *GetVesselResponse) GetVessel() *Vessel {
	if x != nil {
		return x.Vessel
	}
	return nil
}

type GetVesselByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetVesselByPkRequest) Reset() {
	*x = GetVesselByPkRequest{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVesselByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVesselByPkRequest) ProtoMessage() {}

func (x *GetVesselByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVesselByPkRequest.ProtoReflect.Descriptor instead.
func (*GetVesselByPkRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{16}
}

func (x *GetVesselByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetVesselByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vessel *Vessel `protobuf:"bytes,1,opt,name=vessel,proto3" json:"vessel,omitempty"`
}

func (x *GetVesselByPkResponse) Reset() {
	*x = GetVesselByPkResponse{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVesselByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVesselByPkResponse) ProtoMessage() {}

func (x *GetVesselByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVesselByPkResponse.ProtoReflect.Descriptor instead.
func (*GetVesselByPkResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{17}
}

func (x *GetVesselByPkResponse) GetVessel() *Vessel {
	if x != nil {
		return x.Vessel
	}
	return nil
}

type Vessel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VesselD   *VesselD      `protobuf:"bytes,1,opt,name=vessel_d,json=vesselD,proto3" json:"vessel_d,omitempty"`
	CrUpdUser *v1.CrUpdUser `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime *v1.CrUpdTime `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *Vessel) Reset() {
	*x = Vessel{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vessel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vessel) ProtoMessage() {}

func (x *Vessel) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vessel.ProtoReflect.Descriptor instead.
func (*Vessel) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{18}
}

func (x *Vessel) GetVesselD() *VesselD {
	if x != nil {
		return x.VesselD
	}
	return nil
}

func (x *Vessel) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Vessel) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type VesselD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                    uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                                 []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                                   string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	VesselImoNumber                       string  `protobuf:"bytes,4,opt,name=vessel_imo_number,json=vesselImoNumber,proto3" json:"vessel_imo_number,omitempty"`
	VesselName                            string  `protobuf:"bytes,5,opt,name=vessel_name,json=vesselName,proto3" json:"vessel_name,omitempty"`
	VesselFlag                            string  `protobuf:"bytes,6,opt,name=vessel_flag,json=vesselFlag,proto3" json:"vessel_flag,omitempty"`
	VesselCallSign                        string  `protobuf:"bytes,7,opt,name=vessel_call_sign,json=vesselCallSign,proto3" json:"vessel_call_sign,omitempty"`
	IsDummyVessel                         bool    `protobuf:"varint,8,opt,name=is_dummy_vessel,json=isDummyVessel,proto3" json:"is_dummy_vessel,omitempty"`
	VesselOperatorCarrierCode             string  `protobuf:"bytes,9,opt,name=vessel_operator_carrier_code,json=vesselOperatorCarrierCode,proto3" json:"vessel_operator_carrier_code,omitempty"`
	VesselOperatorCarrierCodeListProvider string  `protobuf:"bytes,10,opt,name=vessel_operator_carrier_code_list_provider,json=vesselOperatorCarrierCodeListProvider,proto3" json:"vessel_operator_carrier_code_list_provider,omitempty"`
	VesselLength                          float64 `protobuf:"fixed64,11,opt,name=vessel_length,json=vesselLength,proto3" json:"vessel_length,omitempty"`
	VesselWidth                           float64 `protobuf:"fixed64,12,opt,name=vessel_width,json=vesselWidth,proto3" json:"vessel_width,omitempty"`
	DimensionUnit                         string  `protobuf:"bytes,13,opt,name=dimension_unit,json=dimensionUnit,proto3" json:"dimension_unit,omitempty"`
}

func (x *VesselD) Reset() {
	*x = VesselD{}
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VesselD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VesselD) ProtoMessage() {}

func (x *VesselD) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_vesselschedule_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VesselD.ProtoReflect.Descriptor instead.
func (*VesselD) Descriptor() ([]byte, []int) {
	return file_ovs_v3_vesselschedule_proto_rawDescGZIP(), []int{19}
}

func (x *VesselD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VesselD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *VesselD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *VesselD) GetVesselImoNumber() string {
	if x != nil {
		return x.VesselImoNumber
	}
	return ""
}

func (x *VesselD) GetVesselName() string {
	if x != nil {
		return x.VesselName
	}
	return ""
}

func (x *VesselD) GetVesselFlag() string {
	if x != nil {
		return x.VesselFlag
	}
	return ""
}

func (x *VesselD) GetVesselCallSign() string {
	if x != nil {
		return x.VesselCallSign
	}
	return ""
}

func (x *VesselD) GetIsDummyVessel() bool {
	if x != nil {
		return x.IsDummyVessel
	}
	return false
}

func (x *VesselD) GetVesselOperatorCarrierCode() string {
	if x != nil {
		return x.VesselOperatorCarrierCode
	}
	return ""
}

func (x *VesselD) GetVesselOperatorCarrierCodeListProvider() string {
	if x != nil {
		return x.VesselOperatorCarrierCodeListProvider
	}
	return ""
}

func (x *VesselD) GetVesselLength() float64 {
	if x != nil {
		return x.VesselLength
	}
	return 0
}

func (x *VesselD) GetVesselWidth() float64 {
	if x != nil {
		return x.VesselWidth
	}
	return 0
}

func (x *VesselD) GetDimensionUnit() string {
	if x != nil {
		return x.DimensionUnit
	}
	return ""
}

var File_ovs_v3_vesselschedule_proto protoreflect.FileDescriptor

var file_ovs_v3_vesselschedule_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6f, 0x76, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6f,
	0x76, 0x73, 0x2e, 0x76, 0x33, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x01,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x5f, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x76, 0x73, 0x2e,
	0x76, 0x33, 0x2e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x0e, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x10, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x76, 0x73,
	0x2e, 0x76, 0x33, 0x2e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x76, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x76, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x64, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79,
	0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74,
	0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x60, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x76, 0x73, 0x2e,
	0x76, 0x33, 0x2e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x0e, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x52, 0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f,
	0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12,
	0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xb7,
	0x04, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x5f, 0x69, 0x6d, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6d, 0x6f, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x76, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x75, 0x6d, 0x6d, 0x79,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x76, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x2a, 0x76, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x76, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x76, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x52, 0x06, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x22, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x07, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52,
	0x07, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x3b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x06, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x22, 0x5c, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f,
	0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x52, 0x06, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x22, 0xa0, 0x01, 0x0a,
	0x06, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x08, 0x76, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x76, 0x73, 0x2e,
	0x76, 0x33, 0x2e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x44, 0x52, 0x07, 0x76, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09,
	0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f,
	0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x8d, 0x04, 0x0a, 0x07, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64,
	0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x53, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x69,
	0x6d, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6d, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x73, 0x5f, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x76, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x2a, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x76, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x32,
	0xb7, 0x05, 0x0a, 0x15, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x23, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x21, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x20,
	0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x12, 0x24, 0x2e, 0x6f,
	0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x50,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x12, 0x1b, 0x2e, 0x6f, 0x76, 0x73, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x73, 0x12, 0x19, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x12, 0x18, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x42, 0x79, 0x50, 0x6b, 0x12, 0x1c, 0x2e, 0x6f,
	0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x42,
	0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x76, 0x73,
	0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x42, 0x79, 0x50,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x64, 0x63, 0x73, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x76,
	0x73, 0x2f, 0x76, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ovs_v3_vesselschedule_proto_rawDescOnce sync.Once
	file_ovs_v3_vesselschedule_proto_rawDescData = file_ovs_v3_vesselschedule_proto_rawDesc
)

func file_ovs_v3_vesselschedule_proto_rawDescGZIP() []byte {
	file_ovs_v3_vesselschedule_proto_rawDescOnce.Do(func() {
		file_ovs_v3_vesselschedule_proto_rawDescData = protoimpl.X.CompressGZIP(file_ovs_v3_vesselschedule_proto_rawDescData)
	})
	return file_ovs_v3_vesselschedule_proto_rawDescData
}

var file_ovs_v3_vesselschedule_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_ovs_v3_vesselschedule_proto_goTypes = []any{
	(*CreateVesselScheduleRequest)(nil),   // 0: ovs.v3.CreateVesselScheduleRequest
	(*CreateVesselScheduleResponse)(nil),  // 1: ovs.v3.CreateVesselScheduleResponse
	(*GetVesselSchedulesResponse)(nil),    // 2: ovs.v3.GetVesselSchedulesResponse
	(*GetVesselSchedulesRequest)(nil),     // 3: ovs.v3.GetVesselSchedulesRequest
	(*GetVesselScheduleRequest)(nil),      // 4: ovs.v3.GetVesselScheduleRequest
	(*GetVesselScheduleResponse)(nil),     // 5: ovs.v3.GetVesselScheduleResponse
	(*GetVesselScheduleByPkRequest)(nil),  // 6: ovs.v3.GetVesselScheduleByPkRequest
	(*GetVesselScheduleByPkResponse)(nil), // 7: ovs.v3.GetVesselScheduleByPkResponse
	(*VesselSchedule)(nil),                // 8: ovs.v3.VesselSchedule
	(*VesselScheduleD)(nil),               // 9: ovs.v3.VesselScheduleD
	(*CreateVesselRequest)(nil),           // 10: ovs.v3.CreateVesselRequest
	(*CreateVesselResponse)(nil),          // 11: ovs.v3.CreateVesselResponse
	(*GetVesselsResponse)(nil),            // 12: ovs.v3.GetVesselsResponse
	(*GetVesselsRequest)(nil),             // 13: ovs.v3.GetVesselsRequest
	(*GetVesselRequest)(nil),              // 14: ovs.v3.GetVesselRequest
	(*GetVesselResponse)(nil),             // 15: ovs.v3.GetVesselResponse
	(*GetVesselByPkRequest)(nil),          // 16: ovs.v3.GetVesselByPkRequest
	(*GetVesselByPkResponse)(nil),         // 17: ovs.v3.GetVesselByPkResponse
	(*Vessel)(nil),                        // 18: ovs.v3.Vessel
	(*VesselD)(nil),                       // 19: ovs.v3.VesselD
	(*v1.GetRequest)(nil),                 // 20: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),             // 21: common.v1.GetByIdRequest
	(*v1.CrUpdUser)(nil),                  // 22: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                  // 23: common.v1.CrUpdTime
}
var file_ovs_v3_vesselschedule_proto_depIdxs = []int32{
	8,  // 0: ovs.v3.CreateVesselScheduleResponse.vessel_schedule:type_name -> ovs.v3.VesselSchedule
	8,  // 1: ovs.v3.GetVesselSchedulesResponse.vessel_schedules:type_name -> ovs.v3.VesselSchedule
	20, // 2: ovs.v3.GetVesselScheduleRequest.get_request:type_name -> common.v1.GetRequest
	8,  // 3: ovs.v3.GetVesselScheduleResponse.vessel_schedule:type_name -> ovs.v3.VesselSchedule
	21, // 4: ovs.v3.GetVesselScheduleByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	8,  // 5: ovs.v3.GetVesselScheduleByPkResponse.vessel_schedule:type_name -> ovs.v3.VesselSchedule
	9,  // 6: ovs.v3.VesselSchedule.vessel_schedule_d:type_name -> ovs.v3.VesselScheduleD
	22, // 7: ovs.v3.VesselSchedule.cr_upd_user:type_name -> common.v1.CrUpdUser
	23, // 8: ovs.v3.VesselSchedule.cr_upd_time:type_name -> common.v1.CrUpdTime
	18, // 9: ovs.v3.CreateVesselResponse.vessel:type_name -> ovs.v3.Vessel
	18, // 10: ovs.v3.GetVesselsResponse.vessels:type_name -> ovs.v3.Vessel
	20, // 11: ovs.v3.GetVesselRequest.get_request:type_name -> common.v1.GetRequest
	18, // 12: ovs.v3.GetVesselResponse.vessel:type_name -> ovs.v3.Vessel
	21, // 13: ovs.v3.GetVesselByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	18, // 14: ovs.v3.GetVesselByPkResponse.vessel:type_name -> ovs.v3.Vessel
	19, // 15: ovs.v3.Vessel.vessel_d:type_name -> ovs.v3.VesselD
	22, // 16: ovs.v3.Vessel.cr_upd_user:type_name -> common.v1.CrUpdUser
	23, // 17: ovs.v3.Vessel.cr_upd_time:type_name -> common.v1.CrUpdTime
	0,  // 18: ovs.v3.VesselScheduleService.CreateVesselSchedule:input_type -> ovs.v3.CreateVesselScheduleRequest
	3,  // 19: ovs.v3.VesselScheduleService.GetVesselSchedules:input_type -> ovs.v3.GetVesselSchedulesRequest
	4,  // 20: ovs.v3.VesselScheduleService.GetVesselSchedule:input_type -> ovs.v3.GetVesselScheduleRequest
	6,  // 21: ovs.v3.VesselScheduleService.GetVesselScheduleByPk:input_type -> ovs.v3.GetVesselScheduleByPkRequest
	10, // 22: ovs.v3.VesselScheduleService.CreateVessel:input_type -> ovs.v3.CreateVesselRequest
	13, // 23: ovs.v3.VesselScheduleService.GetVessels:input_type -> ovs.v3.GetVesselsRequest
	14, // 24: ovs.v3.VesselScheduleService.GetVessel:input_type -> ovs.v3.GetVesselRequest
	16, // 25: ovs.v3.VesselScheduleService.GetVesselByPk:input_type -> ovs.v3.GetVesselByPkRequest
	1,  // 26: ovs.v3.VesselScheduleService.CreateVesselSchedule:output_type -> ovs.v3.CreateVesselScheduleResponse
	2,  // 27: ovs.v3.VesselScheduleService.GetVesselSchedules:output_type -> ovs.v3.GetVesselSchedulesResponse
	5,  // 28: ovs.v3.VesselScheduleService.GetVesselSchedule:output_type -> ovs.v3.GetVesselScheduleResponse
	7,  // 29: ovs.v3.VesselScheduleService.GetVesselScheduleByPk:output_type -> ovs.v3.GetVesselScheduleByPkResponse
	11, // 30: ovs.v3.VesselScheduleService.CreateVessel:output_type -> ovs.v3.CreateVesselResponse
	12, // 31: ovs.v3.VesselScheduleService.GetVessels:output_type -> ovs.v3.GetVesselsResponse
	15, // 32: ovs.v3.VesselScheduleService.GetVessel:output_type -> ovs.v3.GetVesselResponse
	17, // 33: ovs.v3.VesselScheduleService.GetVesselByPk:output_type -> ovs.v3.GetVesselByPkResponse
	26, // [26:34] is the sub-list for method output_type
	18, // [18:26] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_ovs_v3_vesselschedule_proto_init() }
func file_ovs_v3_vesselschedule_proto_init() {
	if File_ovs_v3_vesselschedule_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ovs_v3_vesselschedule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ovs_v3_vesselschedule_proto_goTypes,
		DependencyIndexes: file_ovs_v3_vesselschedule_proto_depIdxs,
		MessageInfos:      file_ovs_v3_vesselschedule_proto_msgTypes,
	}.Build()
	File_ovs_v3_vesselschedule_proto = out.File
	file_ovs_v3_vesselschedule_proto_rawDesc = nil
	file_ovs_v3_vesselschedule_proto_goTypes = nil
	file_ovs_v3_vesselschedule_proto_depIdxs = nil
}
