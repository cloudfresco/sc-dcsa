// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ovs/v3/leg.proto

package v3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LegService_CreateLeg_FullMethodName                  = "/ovs.v3.LegService/CreateLeg"
	LegService_GetLegs_FullMethodName                    = "/ovs.v3.LegService/GetLegs"
	LegService_GetLeg_FullMethodName                     = "/ovs.v3.LegService/GetLeg"
	LegService_GetLegByPk_FullMethodName                 = "/ovs.v3.LegService/GetLegByPk"
	LegService_CreatePointToPointRouting_FullMethodName  = "/ovs.v3.LegService/CreatePointToPointRouting"
	LegService_GetPointToPointRoutings_FullMethodName    = "/ovs.v3.LegService/GetPointToPointRoutings"
	LegService_GetPointToPointRouting_FullMethodName     = "/ovs.v3.LegService/GetPointToPointRouting"
	LegService_GetPointToPointRoutingByPk_FullMethodName = "/ovs.v3.LegService/GetPointToPointRoutingByPk"
)

// LegServiceClient is the client API for LegService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The LegService service definition.
type LegServiceClient interface {
	CreateLeg(ctx context.Context, in *CreateLegRequest, opts ...grpc.CallOption) (*CreateLegResponse, error)
	GetLegs(ctx context.Context, in *GetLegsRequest, opts ...grpc.CallOption) (*GetLegsResponse, error)
	GetLeg(ctx context.Context, in *GetLegRequest, opts ...grpc.CallOption) (*GetLegResponse, error)
	GetLegByPk(ctx context.Context, in *GetLegByPkRequest, opts ...grpc.CallOption) (*GetLegByPkResponse, error)
	CreatePointToPointRouting(ctx context.Context, in *CreatePointToPointRoutingRequest, opts ...grpc.CallOption) (*CreatePointToPointRoutingResponse, error)
	GetPointToPointRoutings(ctx context.Context, in *GetPointToPointRoutingsRequest, opts ...grpc.CallOption) (*GetPointToPointRoutingsResponse, error)
	GetPointToPointRouting(ctx context.Context, in *GetPointToPointRoutingRequest, opts ...grpc.CallOption) (*GetPointToPointRoutingResponse, error)
	GetPointToPointRoutingByPk(ctx context.Context, in *GetPointToPointRoutingByPkRequest, opts ...grpc.CallOption) (*GetPointToPointRoutingByPkResponse, error)
}

type legServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLegServiceClient(cc grpc.ClientConnInterface) LegServiceClient {
	return &legServiceClient{cc}
}

func (c *legServiceClient) CreateLeg(ctx context.Context, in *CreateLegRequest, opts ...grpc.CallOption) (*CreateLegResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLegResponse)
	err := c.cc.Invoke(ctx, LegService_CreateLeg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legServiceClient) GetLegs(ctx context.Context, in *GetLegsRequest, opts ...grpc.CallOption) (*GetLegsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLegsResponse)
	err := c.cc.Invoke(ctx, LegService_GetLegs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legServiceClient) GetLeg(ctx context.Context, in *GetLegRequest, opts ...grpc.CallOption) (*GetLegResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLegResponse)
	err := c.cc.Invoke(ctx, LegService_GetLeg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legServiceClient) GetLegByPk(ctx context.Context, in *GetLegByPkRequest, opts ...grpc.CallOption) (*GetLegByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLegByPkResponse)
	err := c.cc.Invoke(ctx, LegService_GetLegByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legServiceClient) CreatePointToPointRouting(ctx context.Context, in *CreatePointToPointRoutingRequest, opts ...grpc.CallOption) (*CreatePointToPointRoutingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePointToPointRoutingResponse)
	err := c.cc.Invoke(ctx, LegService_CreatePointToPointRouting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legServiceClient) GetPointToPointRoutings(ctx context.Context, in *GetPointToPointRoutingsRequest, opts ...grpc.CallOption) (*GetPointToPointRoutingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPointToPointRoutingsResponse)
	err := c.cc.Invoke(ctx, LegService_GetPointToPointRoutings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legServiceClient) GetPointToPointRouting(ctx context.Context, in *GetPointToPointRoutingRequest, opts ...grpc.CallOption) (*GetPointToPointRoutingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPointToPointRoutingResponse)
	err := c.cc.Invoke(ctx, LegService_GetPointToPointRouting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legServiceClient) GetPointToPointRoutingByPk(ctx context.Context, in *GetPointToPointRoutingByPkRequest, opts ...grpc.CallOption) (*GetPointToPointRoutingByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPointToPointRoutingByPkResponse)
	err := c.cc.Invoke(ctx, LegService_GetPointToPointRoutingByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LegServiceServer is the server API for LegService service.
// All implementations must embed UnimplementedLegServiceServer
// for forward compatibility.
//
// The LegService service definition.
type LegServiceServer interface {
	CreateLeg(context.Context, *CreateLegRequest) (*CreateLegResponse, error)
	GetLegs(context.Context, *GetLegsRequest) (*GetLegsResponse, error)
	GetLeg(context.Context, *GetLegRequest) (*GetLegResponse, error)
	GetLegByPk(context.Context, *GetLegByPkRequest) (*GetLegByPkResponse, error)
	CreatePointToPointRouting(context.Context, *CreatePointToPointRoutingRequest) (*CreatePointToPointRoutingResponse, error)
	GetPointToPointRoutings(context.Context, *GetPointToPointRoutingsRequest) (*GetPointToPointRoutingsResponse, error)
	GetPointToPointRouting(context.Context, *GetPointToPointRoutingRequest) (*GetPointToPointRoutingResponse, error)
	GetPointToPointRoutingByPk(context.Context, *GetPointToPointRoutingByPkRequest) (*GetPointToPointRoutingByPkResponse, error)
	mustEmbedUnimplementedLegServiceServer()
}

// UnimplementedLegServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLegServiceServer struct{}

func (UnimplementedLegServiceServer) CreateLeg(context.Context, *CreateLegRequest) (*CreateLegResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLeg not implemented")
}
func (UnimplementedLegServiceServer) GetLegs(context.Context, *GetLegsRequest) (*GetLegsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLegs not implemented")
}
func (UnimplementedLegServiceServer) GetLeg(context.Context, *GetLegRequest) (*GetLegResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeg not implemented")
}
func (UnimplementedLegServiceServer) GetLegByPk(context.Context, *GetLegByPkRequest) (*GetLegByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLegByPk not implemented")
}
func (UnimplementedLegServiceServer) CreatePointToPointRouting(context.Context, *CreatePointToPointRoutingRequest) (*CreatePointToPointRoutingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePointToPointRouting not implemented")
}
func (UnimplementedLegServiceServer) GetPointToPointRoutings(context.Context, *GetPointToPointRoutingsRequest) (*GetPointToPointRoutingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPointToPointRoutings not implemented")
}
func (UnimplementedLegServiceServer) GetPointToPointRouting(context.Context, *GetPointToPointRoutingRequest) (*GetPointToPointRoutingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPointToPointRouting not implemented")
}
func (UnimplementedLegServiceServer) GetPointToPointRoutingByPk(context.Context, *GetPointToPointRoutingByPkRequest) (*GetPointToPointRoutingByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPointToPointRoutingByPk not implemented")
}
func (UnimplementedLegServiceServer) mustEmbedUnimplementedLegServiceServer() {}
func (UnimplementedLegServiceServer) testEmbeddedByValue()                    {}

// UnsafeLegServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LegServiceServer will
// result in compilation errors.
type UnsafeLegServiceServer interface {
	mustEmbedUnimplementedLegServiceServer()
}

func RegisterLegServiceServer(s grpc.ServiceRegistrar, srv LegServiceServer) {
	// If the following call pancis, it indicates UnimplementedLegServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LegService_ServiceDesc, srv)
}

func _LegService_CreateLeg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegServiceServer).CreateLeg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegService_CreateLeg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegServiceServer).CreateLeg(ctx, req.(*CreateLegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegService_GetLegs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLegsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegServiceServer).GetLegs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegService_GetLegs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegServiceServer).GetLegs(ctx, req.(*GetLegsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegService_GetLeg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegServiceServer).GetLeg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegService_GetLeg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegServiceServer).GetLeg(ctx, req.(*GetLegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegService_GetLegByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLegByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegServiceServer).GetLegByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegService_GetLegByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegServiceServer).GetLegByPk(ctx, req.(*GetLegByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegService_CreatePointToPointRouting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePointToPointRoutingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegServiceServer).CreatePointToPointRouting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegService_CreatePointToPointRouting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegServiceServer).CreatePointToPointRouting(ctx, req.(*CreatePointToPointRoutingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegService_GetPointToPointRoutings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointToPointRoutingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegServiceServer).GetPointToPointRoutings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegService_GetPointToPointRoutings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegServiceServer).GetPointToPointRoutings(ctx, req.(*GetPointToPointRoutingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegService_GetPointToPointRouting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointToPointRoutingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegServiceServer).GetPointToPointRouting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegService_GetPointToPointRouting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegServiceServer).GetPointToPointRouting(ctx, req.(*GetPointToPointRoutingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegService_GetPointToPointRoutingByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointToPointRoutingByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegServiceServer).GetPointToPointRoutingByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegService_GetPointToPointRoutingByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegServiceServer).GetPointToPointRoutingByPk(ctx, req.(*GetPointToPointRoutingByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LegService_ServiceDesc is the grpc.ServiceDesc for LegService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LegService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ovs.v3.LegService",
	HandlerType: (*LegServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLeg",
			Handler:    _LegService_CreateLeg_Handler,
		},
		{
			MethodName: "GetLegs",
			Handler:    _LegService_GetLegs_Handler,
		},
		{
			MethodName: "GetLeg",
			Handler:    _LegService_GetLeg_Handler,
		},
		{
			MethodName: "GetLegByPk",
			Handler:    _LegService_GetLegByPk_Handler,
		},
		{
			MethodName: "CreatePointToPointRouting",
			Handler:    _LegService_CreatePointToPointRouting_Handler,
		},
		{
			MethodName: "GetPointToPointRoutings",
			Handler:    _LegService_GetPointToPointRoutings_Handler,
		},
		{
			MethodName: "GetPointToPointRouting",
			Handler:    _LegService_GetPointToPointRouting_Handler,
		},
		{
			MethodName: "GetPointToPointRoutingByPk",
			Handler:    _LegService_GetPointToPointRoutingByPk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ovs/v3/leg.proto",
}
