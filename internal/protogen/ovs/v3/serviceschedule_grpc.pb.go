// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ovs/v3/serviceschedule.proto

package v3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceScheduleService_CreateServiceSchedule_FullMethodName                            = "/ovs.v3.ServiceScheduleService/CreateServiceSchedule"
	ServiceScheduleService_GetServiceSchedules_FullMethodName                              = "/ovs.v3.ServiceScheduleService/GetServiceSchedules"
	ServiceScheduleService_GetServiceSchedule_FullMethodName                               = "/ovs.v3.ServiceScheduleService/GetServiceSchedule"
	ServiceScheduleService_GetServiceScheduleByUniversalServiceReference_FullMethodName    = "/ovs.v3.ServiceScheduleService/GetServiceScheduleByUniversalServiceReference"
	ServiceScheduleService_UpdateServiceScheduleByUniversalServiceReference_FullMethodName = "/ovs.v3.ServiceScheduleService/UpdateServiceScheduleByUniversalServiceReference"
	ServiceScheduleService_GetServiceScheduleByPk_FullMethodName                           = "/ovs.v3.ServiceScheduleService/GetServiceScheduleByPk"
)

// ServiceScheduleServiceClient is the client API for ServiceScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The ServiceScheduleService service definition.
type ServiceScheduleServiceClient interface {
	CreateServiceSchedule(ctx context.Context, in *CreateServiceScheduleRequest, opts ...grpc.CallOption) (*CreateServiceScheduleResponse, error)
	GetServiceSchedules(ctx context.Context, in *GetServiceSchedulesRequest, opts ...grpc.CallOption) (*GetServiceSchedulesResponse, error)
	GetServiceSchedule(ctx context.Context, in *GetServiceScheduleRequest, opts ...grpc.CallOption) (*GetServiceScheduleResponse, error)
	GetServiceScheduleByUniversalServiceReference(ctx context.Context, in *GetServiceScheduleByUniversalServiceReferenceRequest, opts ...grpc.CallOption) (*GetServiceScheduleByUniversalServiceReferenceResponse, error)
	UpdateServiceScheduleByUniversalServiceReference(ctx context.Context, in *UpdateServiceScheduleByUniversalServiceReferenceRequest, opts ...grpc.CallOption) (*UpdateServiceScheduleByUniversalServiceReferenceResponse, error)
	GetServiceScheduleByPk(ctx context.Context, in *GetServiceScheduleByPkRequest, opts ...grpc.CallOption) (*GetServiceScheduleByPkResponse, error)
}

type serviceScheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceScheduleServiceClient(cc grpc.ClientConnInterface) ServiceScheduleServiceClient {
	return &serviceScheduleServiceClient{cc}
}

func (c *serviceScheduleServiceClient) CreateServiceSchedule(ctx context.Context, in *CreateServiceScheduleRequest, opts ...grpc.CallOption) (*CreateServiceScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateServiceScheduleResponse)
	err := c.cc.Invoke(ctx, ServiceScheduleService_CreateServiceSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceScheduleServiceClient) GetServiceSchedules(ctx context.Context, in *GetServiceSchedulesRequest, opts ...grpc.CallOption) (*GetServiceSchedulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceSchedulesResponse)
	err := c.cc.Invoke(ctx, ServiceScheduleService_GetServiceSchedules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceScheduleServiceClient) GetServiceSchedule(ctx context.Context, in *GetServiceScheduleRequest, opts ...grpc.CallOption) (*GetServiceScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceScheduleResponse)
	err := c.cc.Invoke(ctx, ServiceScheduleService_GetServiceSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceScheduleServiceClient) GetServiceScheduleByUniversalServiceReference(ctx context.Context, in *GetServiceScheduleByUniversalServiceReferenceRequest, opts ...grpc.CallOption) (*GetServiceScheduleByUniversalServiceReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceScheduleByUniversalServiceReferenceResponse)
	err := c.cc.Invoke(ctx, ServiceScheduleService_GetServiceScheduleByUniversalServiceReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceScheduleServiceClient) UpdateServiceScheduleByUniversalServiceReference(ctx context.Context, in *UpdateServiceScheduleByUniversalServiceReferenceRequest, opts ...grpc.CallOption) (*UpdateServiceScheduleByUniversalServiceReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateServiceScheduleByUniversalServiceReferenceResponse)
	err := c.cc.Invoke(ctx, ServiceScheduleService_UpdateServiceScheduleByUniversalServiceReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceScheduleServiceClient) GetServiceScheduleByPk(ctx context.Context, in *GetServiceScheduleByPkRequest, opts ...grpc.CallOption) (*GetServiceScheduleByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceScheduleByPkResponse)
	err := c.cc.Invoke(ctx, ServiceScheduleService_GetServiceScheduleByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceScheduleServiceServer is the server API for ServiceScheduleService service.
// All implementations must embed UnimplementedServiceScheduleServiceServer
// for forward compatibility.
//
// The ServiceScheduleService service definition.
type ServiceScheduleServiceServer interface {
	CreateServiceSchedule(context.Context, *CreateServiceScheduleRequest) (*CreateServiceScheduleResponse, error)
	GetServiceSchedules(context.Context, *GetServiceSchedulesRequest) (*GetServiceSchedulesResponse, error)
	GetServiceSchedule(context.Context, *GetServiceScheduleRequest) (*GetServiceScheduleResponse, error)
	GetServiceScheduleByUniversalServiceReference(context.Context, *GetServiceScheduleByUniversalServiceReferenceRequest) (*GetServiceScheduleByUniversalServiceReferenceResponse, error)
	UpdateServiceScheduleByUniversalServiceReference(context.Context, *UpdateServiceScheduleByUniversalServiceReferenceRequest) (*UpdateServiceScheduleByUniversalServiceReferenceResponse, error)
	GetServiceScheduleByPk(context.Context, *GetServiceScheduleByPkRequest) (*GetServiceScheduleByPkResponse, error)
	mustEmbedUnimplementedServiceScheduleServiceServer()
}

// UnimplementedServiceScheduleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceScheduleServiceServer struct{}

func (UnimplementedServiceScheduleServiceServer) CreateServiceSchedule(context.Context, *CreateServiceScheduleRequest) (*CreateServiceScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceSchedule not implemented")
}
func (UnimplementedServiceScheduleServiceServer) GetServiceSchedules(context.Context, *GetServiceSchedulesRequest) (*GetServiceSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceSchedules not implemented")
}
func (UnimplementedServiceScheduleServiceServer) GetServiceSchedule(context.Context, *GetServiceScheduleRequest) (*GetServiceScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceSchedule not implemented")
}
func (UnimplementedServiceScheduleServiceServer) GetServiceScheduleByUniversalServiceReference(context.Context, *GetServiceScheduleByUniversalServiceReferenceRequest) (*GetServiceScheduleByUniversalServiceReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceScheduleByUniversalServiceReference not implemented")
}
func (UnimplementedServiceScheduleServiceServer) UpdateServiceScheduleByUniversalServiceReference(context.Context, *UpdateServiceScheduleByUniversalServiceReferenceRequest) (*UpdateServiceScheduleByUniversalServiceReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceScheduleByUniversalServiceReference not implemented")
}
func (UnimplementedServiceScheduleServiceServer) GetServiceScheduleByPk(context.Context, *GetServiceScheduleByPkRequest) (*GetServiceScheduleByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceScheduleByPk not implemented")
}
func (UnimplementedServiceScheduleServiceServer) mustEmbedUnimplementedServiceScheduleServiceServer() {
}
func (UnimplementedServiceScheduleServiceServer) testEmbeddedByValue() {}

// UnsafeServiceScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceScheduleServiceServer will
// result in compilation errors.
type UnsafeServiceScheduleServiceServer interface {
	mustEmbedUnimplementedServiceScheduleServiceServer()
}

func RegisterServiceScheduleServiceServer(s grpc.ServiceRegistrar, srv ServiceScheduleServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceScheduleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceScheduleService_ServiceDesc, srv)
}

func _ServiceScheduleService_CreateServiceSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceScheduleServiceServer).CreateServiceSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceScheduleService_CreateServiceSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceScheduleServiceServer).CreateServiceSchedule(ctx, req.(*CreateServiceScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceScheduleService_GetServiceSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceScheduleServiceServer).GetServiceSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceScheduleService_GetServiceSchedules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceScheduleServiceServer).GetServiceSchedules(ctx, req.(*GetServiceSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceScheduleService_GetServiceSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceScheduleServiceServer).GetServiceSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceScheduleService_GetServiceSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceScheduleServiceServer).GetServiceSchedule(ctx, req.(*GetServiceScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceScheduleService_GetServiceScheduleByUniversalServiceReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceScheduleByUniversalServiceReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceScheduleServiceServer).GetServiceScheduleByUniversalServiceReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceScheduleService_GetServiceScheduleByUniversalServiceReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceScheduleServiceServer).GetServiceScheduleByUniversalServiceReference(ctx, req.(*GetServiceScheduleByUniversalServiceReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceScheduleService_UpdateServiceScheduleByUniversalServiceReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceScheduleByUniversalServiceReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceScheduleServiceServer).UpdateServiceScheduleByUniversalServiceReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceScheduleService_UpdateServiceScheduleByUniversalServiceReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceScheduleServiceServer).UpdateServiceScheduleByUniversalServiceReference(ctx, req.(*UpdateServiceScheduleByUniversalServiceReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceScheduleService_GetServiceScheduleByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceScheduleByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceScheduleServiceServer).GetServiceScheduleByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceScheduleService_GetServiceScheduleByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceScheduleServiceServer).GetServiceScheduleByPk(ctx, req.(*GetServiceScheduleByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceScheduleService_ServiceDesc is the grpc.ServiceDesc for ServiceScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ovs.v3.ServiceScheduleService",
	HandlerType: (*ServiceScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServiceSchedule",
			Handler:    _ServiceScheduleService_CreateServiceSchedule_Handler,
		},
		{
			MethodName: "GetServiceSchedules",
			Handler:    _ServiceScheduleService_GetServiceSchedules_Handler,
		},
		{
			MethodName: "GetServiceSchedule",
			Handler:    _ServiceScheduleService_GetServiceSchedule_Handler,
		},
		{
			MethodName: "GetServiceScheduleByUniversalServiceReference",
			Handler:    _ServiceScheduleService_GetServiceScheduleByUniversalServiceReference_Handler,
		},
		{
			MethodName: "UpdateServiceScheduleByUniversalServiceReference",
			Handler:    _ServiceScheduleService_UpdateServiceScheduleByUniversalServiceReference_Handler,
		},
		{
			MethodName: "GetServiceScheduleByPk",
			Handler:    _ServiceScheduleService_GetServiceScheduleByPk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ovs/v3/serviceschedule.proto",
}
