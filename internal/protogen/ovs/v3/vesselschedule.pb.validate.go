// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ovs/v3/vesselschedule.proto

package v3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateVesselScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateVesselScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVesselScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVesselScheduleRequestMultiError, or nil if none found.
func (m *CreateVesselScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVesselScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VesselId

	// no validation rules for ServiceId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateVesselScheduleRequestMultiError(errors)
	}

	return nil
}

// CreateVesselScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by CreateVesselScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateVesselScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVesselScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVesselScheduleRequestMultiError) AllErrors() []error { return m }

// CreateVesselScheduleRequestValidationError is the validation error returned
// by CreateVesselScheduleRequest.Validate if the designated constraints
// aren't met.
type CreateVesselScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVesselScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVesselScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVesselScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVesselScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVesselScheduleRequestValidationError) ErrorName() string {
	return "CreateVesselScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVesselScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVesselScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVesselScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVesselScheduleRequestValidationError{}

// Validate checks the field values on CreateVesselScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateVesselScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVesselScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVesselScheduleResponseMultiError, or nil if none found.
func (m *CreateVesselScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVesselScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVesselSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateVesselScheduleResponseValidationError{
					field:  "VesselSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateVesselScheduleResponseValidationError{
					field:  "VesselSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVesselSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVesselScheduleResponseValidationError{
				field:  "VesselSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateVesselScheduleResponseMultiError(errors)
	}

	return nil
}

// CreateVesselScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by CreateVesselScheduleResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateVesselScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVesselScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVesselScheduleResponseMultiError) AllErrors() []error { return m }

// CreateVesselScheduleResponseValidationError is the validation error returned
// by CreateVesselScheduleResponse.Validate if the designated constraints
// aren't met.
type CreateVesselScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVesselScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVesselScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVesselScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVesselScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVesselScheduleResponseValidationError) ErrorName() string {
	return "CreateVesselScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVesselScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVesselScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVesselScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVesselScheduleResponseValidationError{}

// Validate checks the field values on GetVesselSchedulesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVesselSchedulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVesselSchedulesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVesselSchedulesResponseMultiError, or nil if none found.
func (m *GetVesselSchedulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVesselSchedulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVesselSchedules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetVesselSchedulesResponseValidationError{
						field:  fmt.Sprintf("VesselSchedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetVesselSchedulesResponseValidationError{
						field:  fmt.Sprintf("VesselSchedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVesselSchedulesResponseValidationError{
					field:  fmt.Sprintf("VesselSchedules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetVesselSchedulesResponseMultiError(errors)
	}

	return nil
}

// GetVesselSchedulesResponseMultiError is an error wrapping multiple
// validation errors returned by GetVesselSchedulesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetVesselSchedulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVesselSchedulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVesselSchedulesResponseMultiError) AllErrors() []error { return m }

// GetVesselSchedulesResponseValidationError is the validation error returned
// by GetVesselSchedulesResponse.Validate if the designated constraints aren't met.
type GetVesselSchedulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVesselSchedulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVesselSchedulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVesselSchedulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVesselSchedulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVesselSchedulesResponseValidationError) ErrorName() string {
	return "GetVesselSchedulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVesselSchedulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVesselSchedulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVesselSchedulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVesselSchedulesResponseValidationError{}

// Validate checks the field values on GetVesselSchedulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVesselSchedulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVesselSchedulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVesselSchedulesRequestMultiError, or nil if none found.
func (m *GetVesselSchedulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVesselSchedulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetVesselSchedulesRequestMultiError(errors)
	}

	return nil
}

// GetVesselSchedulesRequestMultiError is an error wrapping multiple validation
// errors returned by GetVesselSchedulesRequest.ValidateAll() if the
// designated constraints aren't met.
type GetVesselSchedulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVesselSchedulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVesselSchedulesRequestMultiError) AllErrors() []error { return m }

// GetVesselSchedulesRequestValidationError is the validation error returned by
// GetVesselSchedulesRequest.Validate if the designated constraints aren't met.
type GetVesselSchedulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVesselSchedulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVesselSchedulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVesselSchedulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVesselSchedulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVesselSchedulesRequestValidationError) ErrorName() string {
	return "GetVesselSchedulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVesselSchedulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVesselSchedulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVesselSchedulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVesselSchedulesRequestValidationError{}

// Validate checks the field values on GetVesselScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVesselScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVesselScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVesselScheduleRequestMultiError, or nil if none found.
func (m *GetVesselScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVesselScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVesselScheduleRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVesselScheduleRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVesselScheduleRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVesselScheduleRequestMultiError(errors)
	}

	return nil
}

// GetVesselScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by GetVesselScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type GetVesselScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVesselScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVesselScheduleRequestMultiError) AllErrors() []error { return m }

// GetVesselScheduleRequestValidationError is the validation error returned by
// GetVesselScheduleRequest.Validate if the designated constraints aren't met.
type GetVesselScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVesselScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVesselScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVesselScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVesselScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVesselScheduleRequestValidationError) ErrorName() string {
	return "GetVesselScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVesselScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVesselScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVesselScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVesselScheduleRequestValidationError{}

// Validate checks the field values on GetVesselScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVesselScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVesselScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVesselScheduleResponseMultiError, or nil if none found.
func (m *GetVesselScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVesselScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVesselSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVesselScheduleResponseValidationError{
					field:  "VesselSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVesselScheduleResponseValidationError{
					field:  "VesselSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVesselSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVesselScheduleResponseValidationError{
				field:  "VesselSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVesselScheduleResponseMultiError(errors)
	}

	return nil
}

// GetVesselScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by GetVesselScheduleResponse.ValidateAll() if the
// designated constraints aren't met.
type GetVesselScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVesselScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVesselScheduleResponseMultiError) AllErrors() []error { return m }

// GetVesselScheduleResponseValidationError is the validation error returned by
// GetVesselScheduleResponse.Validate if the designated constraints aren't met.
type GetVesselScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVesselScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVesselScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVesselScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVesselScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVesselScheduleResponseValidationError) ErrorName() string {
	return "GetVesselScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVesselScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVesselScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVesselScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVesselScheduleResponseValidationError{}

// Validate checks the field values on GetVesselScheduleByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVesselScheduleByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVesselScheduleByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVesselScheduleByPkRequestMultiError, or nil if none found.
func (m *GetVesselScheduleByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVesselScheduleByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVesselScheduleByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVesselScheduleByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVesselScheduleByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVesselScheduleByPkRequestMultiError(errors)
	}

	return nil
}

// GetVesselScheduleByPkRequestMultiError is an error wrapping multiple
// validation errors returned by GetVesselScheduleByPkRequest.ValidateAll() if
// the designated constraints aren't met.
type GetVesselScheduleByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVesselScheduleByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVesselScheduleByPkRequestMultiError) AllErrors() []error { return m }

// GetVesselScheduleByPkRequestValidationError is the validation error returned
// by GetVesselScheduleByPkRequest.Validate if the designated constraints
// aren't met.
type GetVesselScheduleByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVesselScheduleByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVesselScheduleByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVesselScheduleByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVesselScheduleByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVesselScheduleByPkRequestValidationError) ErrorName() string {
	return "GetVesselScheduleByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVesselScheduleByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVesselScheduleByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVesselScheduleByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVesselScheduleByPkRequestValidationError{}

// Validate checks the field values on GetVesselScheduleByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVesselScheduleByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVesselScheduleByPkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetVesselScheduleByPkResponseMultiError, or nil if none found.
func (m *GetVesselScheduleByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVesselScheduleByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVesselSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVesselScheduleByPkResponseValidationError{
					field:  "VesselSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVesselScheduleByPkResponseValidationError{
					field:  "VesselSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVesselSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVesselScheduleByPkResponseValidationError{
				field:  "VesselSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVesselScheduleByPkResponseMultiError(errors)
	}

	return nil
}

// GetVesselScheduleByPkResponseMultiError is an error wrapping multiple
// validation errors returned by GetVesselScheduleByPkResponse.ValidateAll()
// if the designated constraints aren't met.
type GetVesselScheduleByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVesselScheduleByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVesselScheduleByPkResponseMultiError) AllErrors() []error { return m }

// GetVesselScheduleByPkResponseValidationError is the validation error
// returned by GetVesselScheduleByPkResponse.Validate if the designated
// constraints aren't met.
type GetVesselScheduleByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVesselScheduleByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVesselScheduleByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVesselScheduleByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVesselScheduleByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVesselScheduleByPkResponseValidationError) ErrorName() string {
	return "GetVesselScheduleByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVesselScheduleByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVesselScheduleByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVesselScheduleByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVesselScheduleByPkResponseValidationError{}

// Validate checks the field values on VesselSchedule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VesselSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VesselSchedule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VesselScheduleMultiError,
// or nil if none found.
func (m *VesselSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *VesselSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVesselScheduleD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VesselScheduleValidationError{
					field:  "VesselScheduleD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VesselScheduleValidationError{
					field:  "VesselScheduleD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVesselScheduleD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VesselScheduleValidationError{
				field:  "VesselScheduleD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VesselScheduleValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VesselScheduleValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VesselScheduleValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VesselScheduleValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VesselScheduleValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VesselScheduleValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VesselScheduleMultiError(errors)
	}

	return nil
}

// VesselScheduleMultiError is an error wrapping multiple validation errors
// returned by VesselSchedule.ValidateAll() if the designated constraints
// aren't met.
type VesselScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VesselScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VesselScheduleMultiError) AllErrors() []error { return m }

// VesselScheduleValidationError is the validation error returned by
// VesselSchedule.Validate if the designated constraints aren't met.
type VesselScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VesselScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VesselScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VesselScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VesselScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VesselScheduleValidationError) ErrorName() string { return "VesselScheduleValidationError" }

// Error satisfies the builtin error interface
func (e VesselScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVesselSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VesselScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VesselScheduleValidationError{}

// Validate checks the field values on VesselScheduleD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VesselScheduleD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VesselScheduleD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VesselScheduleDMultiError, or nil if none found.
func (m *VesselScheduleD) ValidateAll() error {
	return m.validate(true)
}

func (m *VesselScheduleD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for VesselId

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return VesselScheduleDMultiError(errors)
	}

	return nil
}

// VesselScheduleDMultiError is an error wrapping multiple validation errors
// returned by VesselScheduleD.ValidateAll() if the designated constraints
// aren't met.
type VesselScheduleDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VesselScheduleDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VesselScheduleDMultiError) AllErrors() []error { return m }

// VesselScheduleDValidationError is the validation error returned by
// VesselScheduleD.Validate if the designated constraints aren't met.
type VesselScheduleDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VesselScheduleDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VesselScheduleDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VesselScheduleDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VesselScheduleDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VesselScheduleDValidationError) ErrorName() string { return "VesselScheduleDValidationError" }

// Error satisfies the builtin error interface
func (e VesselScheduleDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVesselScheduleD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VesselScheduleDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VesselScheduleDValidationError{}

// Validate checks the field values on CreateVesselRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateVesselRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVesselRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVesselRequestMultiError, or nil if none found.
func (m *CreateVesselRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVesselRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VesselImoNumber

	// no validation rules for VesselName

	// no validation rules for VesselFlag

	// no validation rules for VesselCallSign

	// no validation rules for IsDummyVessel

	// no validation rules for VesselOperatorCarrierCode

	// no validation rules for VesselOperatorCarrierCodeListProvider

	// no validation rules for VesselLength

	// no validation rules for VesselWidth

	// no validation rules for DimensionUnit

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateVesselRequestMultiError(errors)
	}

	return nil
}

// CreateVesselRequestMultiError is an error wrapping multiple validation
// errors returned by CreateVesselRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateVesselRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVesselRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVesselRequestMultiError) AllErrors() []error { return m }

// CreateVesselRequestValidationError is the validation error returned by
// CreateVesselRequest.Validate if the designated constraints aren't met.
type CreateVesselRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVesselRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVesselRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVesselRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVesselRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVesselRequestValidationError) ErrorName() string {
	return "CreateVesselRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVesselRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVesselRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVesselRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVesselRequestValidationError{}

// Validate checks the field values on CreateVesselResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateVesselResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVesselResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVesselResponseMultiError, or nil if none found.
func (m *CreateVesselResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVesselResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVessel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateVesselResponseValidationError{
					field:  "Vessel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateVesselResponseValidationError{
					field:  "Vessel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVessel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVesselResponseValidationError{
				field:  "Vessel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateVesselResponseMultiError(errors)
	}

	return nil
}

// CreateVesselResponseMultiError is an error wrapping multiple validation
// errors returned by CreateVesselResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateVesselResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVesselResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVesselResponseMultiError) AllErrors() []error { return m }

// CreateVesselResponseValidationError is the validation error returned by
// CreateVesselResponse.Validate if the designated constraints aren't met.
type CreateVesselResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVesselResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVesselResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVesselResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVesselResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVesselResponseValidationError) ErrorName() string {
	return "CreateVesselResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVesselResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVesselResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVesselResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVesselResponseValidationError{}

// Validate checks the field values on GetVesselsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVesselsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVesselsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVesselsResponseMultiError, or nil if none found.
func (m *GetVesselsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVesselsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVessels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetVesselsResponseValidationError{
						field:  fmt.Sprintf("Vessels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetVesselsResponseValidationError{
						field:  fmt.Sprintf("Vessels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVesselsResponseValidationError{
					field:  fmt.Sprintf("Vessels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetVesselsResponseMultiError(errors)
	}

	return nil
}

// GetVesselsResponseMultiError is an error wrapping multiple validation errors
// returned by GetVesselsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetVesselsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVesselsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVesselsResponseMultiError) AllErrors() []error { return m }

// GetVesselsResponseValidationError is the validation error returned by
// GetVesselsResponse.Validate if the designated constraints aren't met.
type GetVesselsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVesselsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVesselsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVesselsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVesselsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVesselsResponseValidationError) ErrorName() string {
	return "GetVesselsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVesselsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVesselsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVesselsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVesselsResponseValidationError{}

// Validate checks the field values on GetVesselsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetVesselsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVesselsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVesselsRequestMultiError, or nil if none found.
func (m *GetVesselsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVesselsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetVesselsRequestMultiError(errors)
	}

	return nil
}

// GetVesselsRequestMultiError is an error wrapping multiple validation errors
// returned by GetVesselsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetVesselsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVesselsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVesselsRequestMultiError) AllErrors() []error { return m }

// GetVesselsRequestValidationError is the validation error returned by
// GetVesselsRequest.Validate if the designated constraints aren't met.
type GetVesselsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVesselsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVesselsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVesselsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVesselsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVesselsRequestValidationError) ErrorName() string {
	return "GetVesselsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVesselsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVesselsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVesselsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVesselsRequestValidationError{}

// Validate checks the field values on GetVesselRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetVesselRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVesselRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVesselRequestMultiError, or nil if none found.
func (m *GetVesselRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVesselRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVesselRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVesselRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVesselRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVesselRequestMultiError(errors)
	}

	return nil
}

// GetVesselRequestMultiError is an error wrapping multiple validation errors
// returned by GetVesselRequest.ValidateAll() if the designated constraints
// aren't met.
type GetVesselRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVesselRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVesselRequestMultiError) AllErrors() []error { return m }

// GetVesselRequestValidationError is the validation error returned by
// GetVesselRequest.Validate if the designated constraints aren't met.
type GetVesselRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVesselRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVesselRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVesselRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVesselRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVesselRequestValidationError) ErrorName() string { return "GetVesselRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetVesselRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVesselRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVesselRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVesselRequestValidationError{}

// Validate checks the field values on GetVesselResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetVesselResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVesselResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVesselResponseMultiError, or nil if none found.
func (m *GetVesselResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVesselResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVessel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVesselResponseValidationError{
					field:  "Vessel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVesselResponseValidationError{
					field:  "Vessel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVessel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVesselResponseValidationError{
				field:  "Vessel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVesselResponseMultiError(errors)
	}

	return nil
}

// GetVesselResponseMultiError is an error wrapping multiple validation errors
// returned by GetVesselResponse.ValidateAll() if the designated constraints
// aren't met.
type GetVesselResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVesselResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVesselResponseMultiError) AllErrors() []error { return m }

// GetVesselResponseValidationError is the validation error returned by
// GetVesselResponse.Validate if the designated constraints aren't met.
type GetVesselResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVesselResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVesselResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVesselResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVesselResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVesselResponseValidationError) ErrorName() string {
	return "GetVesselResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVesselResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVesselResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVesselResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVesselResponseValidationError{}

// Validate checks the field values on GetVesselByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVesselByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVesselByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVesselByPkRequestMultiError, or nil if none found.
func (m *GetVesselByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVesselByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVesselByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVesselByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVesselByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVesselByPkRequestMultiError(errors)
	}

	return nil
}

// GetVesselByPkRequestMultiError is an error wrapping multiple validation
// errors returned by GetVesselByPkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetVesselByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVesselByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVesselByPkRequestMultiError) AllErrors() []error { return m }

// GetVesselByPkRequestValidationError is the validation error returned by
// GetVesselByPkRequest.Validate if the designated constraints aren't met.
type GetVesselByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVesselByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVesselByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVesselByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVesselByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVesselByPkRequestValidationError) ErrorName() string {
	return "GetVesselByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVesselByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVesselByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVesselByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVesselByPkRequestValidationError{}

// Validate checks the field values on GetVesselByPkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVesselByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVesselByPkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVesselByPkResponseMultiError, or nil if none found.
func (m *GetVesselByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVesselByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVessel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVesselByPkResponseValidationError{
					field:  "Vessel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVesselByPkResponseValidationError{
					field:  "Vessel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVessel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVesselByPkResponseValidationError{
				field:  "Vessel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVesselByPkResponseMultiError(errors)
	}

	return nil
}

// GetVesselByPkResponseMultiError is an error wrapping multiple validation
// errors returned by GetVesselByPkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetVesselByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVesselByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVesselByPkResponseMultiError) AllErrors() []error { return m }

// GetVesselByPkResponseValidationError is the validation error returned by
// GetVesselByPkResponse.Validate if the designated constraints aren't met.
type GetVesselByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVesselByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVesselByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVesselByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVesselByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVesselByPkResponseValidationError) ErrorName() string {
	return "GetVesselByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVesselByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVesselByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVesselByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVesselByPkResponseValidationError{}

// Validate checks the field values on Vessel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Vessel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Vessel with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VesselMultiError, or nil if none found.
func (m *Vessel) ValidateAll() error {
	return m.validate(true)
}

func (m *Vessel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVesselD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VesselValidationError{
					field:  "VesselD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VesselValidationError{
					field:  "VesselD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVesselD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VesselValidationError{
				field:  "VesselD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VesselValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VesselValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VesselValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VesselValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VesselValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VesselValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VesselMultiError(errors)
	}

	return nil
}

// VesselMultiError is an error wrapping multiple validation errors returned by
// Vessel.ValidateAll() if the designated constraints aren't met.
type VesselMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VesselMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VesselMultiError) AllErrors() []error { return m }

// VesselValidationError is the validation error returned by Vessel.Validate if
// the designated constraints aren't met.
type VesselValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VesselValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VesselValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VesselValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VesselValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VesselValidationError) ErrorName() string { return "VesselValidationError" }

// Error satisfies the builtin error interface
func (e VesselValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVessel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VesselValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VesselValidationError{}

// Validate checks the field values on VesselD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VesselD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VesselD with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VesselDMultiError, or nil if none found.
func (m *VesselD) ValidateAll() error {
	return m.validate(true)
}

func (m *VesselD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for VesselImoNumber

	// no validation rules for VesselName

	// no validation rules for VesselFlag

	// no validation rules for VesselCallSign

	// no validation rules for IsDummyVessel

	// no validation rules for VesselOperatorCarrierCode

	// no validation rules for VesselOperatorCarrierCodeListProvider

	// no validation rules for VesselLength

	// no validation rules for VesselWidth

	// no validation rules for DimensionUnit

	if len(errors) > 0 {
		return VesselDMultiError(errors)
	}

	return nil
}

// VesselDMultiError is an error wrapping multiple validation errors returned
// by VesselD.ValidateAll() if the designated constraints aren't met.
type VesselDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VesselDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VesselDMultiError) AllErrors() []error { return m }

// VesselDValidationError is the validation error returned by VesselD.Validate
// if the designated constraints aren't met.
type VesselDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VesselDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VesselDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VesselDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VesselDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VesselDValidationError) ErrorName() string { return "VesselDValidationError" }

// Error satisfies the builtin error interface
func (e VesselDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVesselD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VesselDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VesselDValidationError{}
