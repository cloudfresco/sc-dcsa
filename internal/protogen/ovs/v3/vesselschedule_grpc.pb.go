// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ovs/v3/vesselschedule.proto

package v3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VesselScheduleService_CreateVesselSchedule_FullMethodName  = "/ovs.v3.VesselScheduleService/CreateVesselSchedule"
	VesselScheduleService_GetVesselSchedules_FullMethodName    = "/ovs.v3.VesselScheduleService/GetVesselSchedules"
	VesselScheduleService_GetVesselSchedule_FullMethodName     = "/ovs.v3.VesselScheduleService/GetVesselSchedule"
	VesselScheduleService_GetVesselScheduleByPk_FullMethodName = "/ovs.v3.VesselScheduleService/GetVesselScheduleByPk"
	VesselScheduleService_CreateVessel_FullMethodName          = "/ovs.v3.VesselScheduleService/CreateVessel"
	VesselScheduleService_GetVessels_FullMethodName            = "/ovs.v3.VesselScheduleService/GetVessels"
	VesselScheduleService_GetVessel_FullMethodName             = "/ovs.v3.VesselScheduleService/GetVessel"
	VesselScheduleService_GetVesselByPk_FullMethodName         = "/ovs.v3.VesselScheduleService/GetVesselByPk"
)

// VesselScheduleServiceClient is the client API for VesselScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The VesselScheduleService service definition.
type VesselScheduleServiceClient interface {
	CreateVesselSchedule(ctx context.Context, in *CreateVesselScheduleRequest, opts ...grpc.CallOption) (*CreateVesselScheduleResponse, error)
	GetVesselSchedules(ctx context.Context, in *GetVesselSchedulesRequest, opts ...grpc.CallOption) (*GetVesselSchedulesResponse, error)
	GetVesselSchedule(ctx context.Context, in *GetVesselScheduleRequest, opts ...grpc.CallOption) (*GetVesselScheduleResponse, error)
	GetVesselScheduleByPk(ctx context.Context, in *GetVesselScheduleByPkRequest, opts ...grpc.CallOption) (*GetVesselScheduleByPkResponse, error)
	CreateVessel(ctx context.Context, in *CreateVesselRequest, opts ...grpc.CallOption) (*CreateVesselResponse, error)
	GetVessels(ctx context.Context, in *GetVesselsRequest, opts ...grpc.CallOption) (*GetVesselsResponse, error)
	GetVessel(ctx context.Context, in *GetVesselRequest, opts ...grpc.CallOption) (*GetVesselResponse, error)
	GetVesselByPk(ctx context.Context, in *GetVesselByPkRequest, opts ...grpc.CallOption) (*GetVesselByPkResponse, error)
}

type vesselScheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVesselScheduleServiceClient(cc grpc.ClientConnInterface) VesselScheduleServiceClient {
	return &vesselScheduleServiceClient{cc}
}

func (c *vesselScheduleServiceClient) CreateVesselSchedule(ctx context.Context, in *CreateVesselScheduleRequest, opts ...grpc.CallOption) (*CreateVesselScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVesselScheduleResponse)
	err := c.cc.Invoke(ctx, VesselScheduleService_CreateVesselSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselScheduleServiceClient) GetVesselSchedules(ctx context.Context, in *GetVesselSchedulesRequest, opts ...grpc.CallOption) (*GetVesselSchedulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVesselSchedulesResponse)
	err := c.cc.Invoke(ctx, VesselScheduleService_GetVesselSchedules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselScheduleServiceClient) GetVesselSchedule(ctx context.Context, in *GetVesselScheduleRequest, opts ...grpc.CallOption) (*GetVesselScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVesselScheduleResponse)
	err := c.cc.Invoke(ctx, VesselScheduleService_GetVesselSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselScheduleServiceClient) GetVesselScheduleByPk(ctx context.Context, in *GetVesselScheduleByPkRequest, opts ...grpc.CallOption) (*GetVesselScheduleByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVesselScheduleByPkResponse)
	err := c.cc.Invoke(ctx, VesselScheduleService_GetVesselScheduleByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselScheduleServiceClient) CreateVessel(ctx context.Context, in *CreateVesselRequest, opts ...grpc.CallOption) (*CreateVesselResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVesselResponse)
	err := c.cc.Invoke(ctx, VesselScheduleService_CreateVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselScheduleServiceClient) GetVessels(ctx context.Context, in *GetVesselsRequest, opts ...grpc.CallOption) (*GetVesselsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVesselsResponse)
	err := c.cc.Invoke(ctx, VesselScheduleService_GetVessels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselScheduleServiceClient) GetVessel(ctx context.Context, in *GetVesselRequest, opts ...grpc.CallOption) (*GetVesselResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVesselResponse)
	err := c.cc.Invoke(ctx, VesselScheduleService_GetVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselScheduleServiceClient) GetVesselByPk(ctx context.Context, in *GetVesselByPkRequest, opts ...grpc.CallOption) (*GetVesselByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVesselByPkResponse)
	err := c.cc.Invoke(ctx, VesselScheduleService_GetVesselByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VesselScheduleServiceServer is the server API for VesselScheduleService service.
// All implementations must embed UnimplementedVesselScheduleServiceServer
// for forward compatibility.
//
// The VesselScheduleService service definition.
type VesselScheduleServiceServer interface {
	CreateVesselSchedule(context.Context, *CreateVesselScheduleRequest) (*CreateVesselScheduleResponse, error)
	GetVesselSchedules(context.Context, *GetVesselSchedulesRequest) (*GetVesselSchedulesResponse, error)
	GetVesselSchedule(context.Context, *GetVesselScheduleRequest) (*GetVesselScheduleResponse, error)
	GetVesselScheduleByPk(context.Context, *GetVesselScheduleByPkRequest) (*GetVesselScheduleByPkResponse, error)
	CreateVessel(context.Context, *CreateVesselRequest) (*CreateVesselResponse, error)
	GetVessels(context.Context, *GetVesselsRequest) (*GetVesselsResponse, error)
	GetVessel(context.Context, *GetVesselRequest) (*GetVesselResponse, error)
	GetVesselByPk(context.Context, *GetVesselByPkRequest) (*GetVesselByPkResponse, error)
	mustEmbedUnimplementedVesselScheduleServiceServer()
}

// UnimplementedVesselScheduleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVesselScheduleServiceServer struct{}

func (UnimplementedVesselScheduleServiceServer) CreateVesselSchedule(context.Context, *CreateVesselScheduleRequest) (*CreateVesselScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVesselSchedule not implemented")
}
func (UnimplementedVesselScheduleServiceServer) GetVesselSchedules(context.Context, *GetVesselSchedulesRequest) (*GetVesselSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVesselSchedules not implemented")
}
func (UnimplementedVesselScheduleServiceServer) GetVesselSchedule(context.Context, *GetVesselScheduleRequest) (*GetVesselScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVesselSchedule not implemented")
}
func (UnimplementedVesselScheduleServiceServer) GetVesselScheduleByPk(context.Context, *GetVesselScheduleByPkRequest) (*GetVesselScheduleByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVesselScheduleByPk not implemented")
}
func (UnimplementedVesselScheduleServiceServer) CreateVessel(context.Context, *CreateVesselRequest) (*CreateVesselResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVessel not implemented")
}
func (UnimplementedVesselScheduleServiceServer) GetVessels(context.Context, *GetVesselsRequest) (*GetVesselsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVessels not implemented")
}
func (UnimplementedVesselScheduleServiceServer) GetVessel(context.Context, *GetVesselRequest) (*GetVesselResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVessel not implemented")
}
func (UnimplementedVesselScheduleServiceServer) GetVesselByPk(context.Context, *GetVesselByPkRequest) (*GetVesselByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVesselByPk not implemented")
}
func (UnimplementedVesselScheduleServiceServer) mustEmbedUnimplementedVesselScheduleServiceServer() {}
func (UnimplementedVesselScheduleServiceServer) testEmbeddedByValue()                               {}

// UnsafeVesselScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VesselScheduleServiceServer will
// result in compilation errors.
type UnsafeVesselScheduleServiceServer interface {
	mustEmbedUnimplementedVesselScheduleServiceServer()
}

func RegisterVesselScheduleServiceServer(s grpc.ServiceRegistrar, srv VesselScheduleServiceServer) {
	// If the following call pancis, it indicates UnimplementedVesselScheduleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VesselScheduleService_ServiceDesc, srv)
}

func _VesselScheduleService_CreateVesselSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVesselScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselScheduleServiceServer).CreateVesselSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VesselScheduleService_CreateVesselSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselScheduleServiceServer).CreateVesselSchedule(ctx, req.(*CreateVesselScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VesselScheduleService_GetVesselSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVesselSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselScheduleServiceServer).GetVesselSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VesselScheduleService_GetVesselSchedules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselScheduleServiceServer).GetVesselSchedules(ctx, req.(*GetVesselSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VesselScheduleService_GetVesselSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVesselScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselScheduleServiceServer).GetVesselSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VesselScheduleService_GetVesselSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselScheduleServiceServer).GetVesselSchedule(ctx, req.(*GetVesselScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VesselScheduleService_GetVesselScheduleByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVesselScheduleByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselScheduleServiceServer).GetVesselScheduleByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VesselScheduleService_GetVesselScheduleByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselScheduleServiceServer).GetVesselScheduleByPk(ctx, req.(*GetVesselScheduleByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VesselScheduleService_CreateVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselScheduleServiceServer).CreateVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VesselScheduleService_CreateVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselScheduleServiceServer).CreateVessel(ctx, req.(*CreateVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VesselScheduleService_GetVessels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVesselsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselScheduleServiceServer).GetVessels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VesselScheduleService_GetVessels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselScheduleServiceServer).GetVessels(ctx, req.(*GetVesselsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VesselScheduleService_GetVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselScheduleServiceServer).GetVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VesselScheduleService_GetVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselScheduleServiceServer).GetVessel(ctx, req.(*GetVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VesselScheduleService_GetVesselByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVesselByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselScheduleServiceServer).GetVesselByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VesselScheduleService_GetVesselByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselScheduleServiceServer).GetVesselByPk(ctx, req.(*GetVesselByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VesselScheduleService_ServiceDesc is the grpc.ServiceDesc for VesselScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VesselScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ovs.v3.VesselScheduleService",
	HandlerType: (*VesselScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVesselSchedule",
			Handler:    _VesselScheduleService_CreateVesselSchedule_Handler,
		},
		{
			MethodName: "GetVesselSchedules",
			Handler:    _VesselScheduleService_GetVesselSchedules_Handler,
		},
		{
			MethodName: "GetVesselSchedule",
			Handler:    _VesselScheduleService_GetVesselSchedule_Handler,
		},
		{
			MethodName: "GetVesselScheduleByPk",
			Handler:    _VesselScheduleService_GetVesselScheduleByPk_Handler,
		},
		{
			MethodName: "CreateVessel",
			Handler:    _VesselScheduleService_CreateVessel_Handler,
		},
		{
			MethodName: "GetVessels",
			Handler:    _VesselScheduleService_GetVessels_Handler,
		},
		{
			MethodName: "GetVessel",
			Handler:    _VesselScheduleService_GetVessel_Handler,
		},
		{
			MethodName: "GetVesselByPk",
			Handler:    _VesselScheduleService_GetVesselByPk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ovs/v3/vesselschedule.proto",
}
