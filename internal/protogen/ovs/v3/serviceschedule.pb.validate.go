// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ovs/v3/serviceschedule.proto

package v3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateServiceScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceScheduleRequestMultiError, or nil if none found.
func (m *CreateServiceScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierServiceName

	// no validation rules for CarrierServiceCode

	// no validation rules for UniversalServiceReference

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateServiceScheduleRequestMultiError(errors)
	}

	return nil
}

// CreateServiceScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by CreateServiceScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateServiceScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceScheduleRequestMultiError) AllErrors() []error { return m }

// CreateServiceScheduleRequestValidationError is the validation error returned
// by CreateServiceScheduleRequest.Validate if the designated constraints
// aren't met.
type CreateServiceScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceScheduleRequestValidationError) ErrorName() string {
	return "CreateServiceScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceScheduleRequestValidationError{}

// Validate checks the field values on CreateServiceScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceScheduleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateServiceScheduleResponseMultiError, or nil if none found.
func (m *CreateServiceScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServiceSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceScheduleResponseValidationError{
					field:  "ServiceSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceScheduleResponseValidationError{
					field:  "ServiceSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceScheduleResponseValidationError{
				field:  "ServiceSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateServiceScheduleResponseMultiError(errors)
	}

	return nil
}

// CreateServiceScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by CreateServiceScheduleResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateServiceScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceScheduleResponseMultiError) AllErrors() []error { return m }

// CreateServiceScheduleResponseValidationError is the validation error
// returned by CreateServiceScheduleResponse.Validate if the designated
// constraints aren't met.
type CreateServiceScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceScheduleResponseValidationError) ErrorName() string {
	return "CreateServiceScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceScheduleResponseValidationError{}

// Validate checks the field values on GetServiceScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceScheduleRequestMultiError, or nil if none found.
func (m *GetServiceScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServiceScheduleRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServiceScheduleRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServiceScheduleRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetServiceScheduleRequestMultiError(errors)
	}

	return nil
}

// GetServiceScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by GetServiceScheduleRequest.ValidateAll() if the
// designated constraints aren't met.
type GetServiceScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceScheduleRequestMultiError) AllErrors() []error { return m }

// GetServiceScheduleRequestValidationError is the validation error returned by
// GetServiceScheduleRequest.Validate if the designated constraints aren't met.
type GetServiceScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceScheduleRequestValidationError) ErrorName() string {
	return "GetServiceScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceScheduleRequestValidationError{}

// Validate checks the field values on GetServiceScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceScheduleResponseMultiError, or nil if none found.
func (m *GetServiceScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServiceSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServiceScheduleResponseValidationError{
					field:  "ServiceSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServiceScheduleResponseValidationError{
					field:  "ServiceSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServiceScheduleResponseValidationError{
				field:  "ServiceSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetServiceScheduleResponseMultiError(errors)
	}

	return nil
}

// GetServiceScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by GetServiceScheduleResponse.ValidateAll() if
// the designated constraints aren't met.
type GetServiceScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceScheduleResponseMultiError) AllErrors() []error { return m }

// GetServiceScheduleResponseValidationError is the validation error returned
// by GetServiceScheduleResponse.Validate if the designated constraints aren't met.
type GetServiceScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceScheduleResponseValidationError) ErrorName() string {
	return "GetServiceScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceScheduleResponseValidationError{}

// Validate checks the field values on GetServiceScheduleByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceScheduleByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceScheduleByPkRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetServiceScheduleByPkRequestMultiError, or nil if none found.
func (m *GetServiceScheduleByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceScheduleByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServiceScheduleByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServiceScheduleByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServiceScheduleByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetServiceScheduleByPkRequestMultiError(errors)
	}

	return nil
}

// GetServiceScheduleByPkRequestMultiError is an error wrapping multiple
// validation errors returned by GetServiceScheduleByPkRequest.ValidateAll()
// if the designated constraints aren't met.
type GetServiceScheduleByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceScheduleByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceScheduleByPkRequestMultiError) AllErrors() []error { return m }

// GetServiceScheduleByPkRequestValidationError is the validation error
// returned by GetServiceScheduleByPkRequest.Validate if the designated
// constraints aren't met.
type GetServiceScheduleByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceScheduleByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceScheduleByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceScheduleByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceScheduleByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceScheduleByPkRequestValidationError) ErrorName() string {
	return "GetServiceScheduleByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceScheduleByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceScheduleByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceScheduleByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceScheduleByPkRequestValidationError{}

// Validate checks the field values on GetServiceScheduleByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceScheduleByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceScheduleByPkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetServiceScheduleByPkResponseMultiError, or nil if none found.
func (m *GetServiceScheduleByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceScheduleByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServiceSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServiceScheduleByPkResponseValidationError{
					field:  "ServiceSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServiceScheduleByPkResponseValidationError{
					field:  "ServiceSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServiceScheduleByPkResponseValidationError{
				field:  "ServiceSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetServiceScheduleByPkResponseMultiError(errors)
	}

	return nil
}

// GetServiceScheduleByPkResponseMultiError is an error wrapping multiple
// validation errors returned by GetServiceScheduleByPkResponse.ValidateAll()
// if the designated constraints aren't met.
type GetServiceScheduleByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceScheduleByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceScheduleByPkResponseMultiError) AllErrors() []error { return m }

// GetServiceScheduleByPkResponseValidationError is the validation error
// returned by GetServiceScheduleByPkResponse.Validate if the designated
// constraints aren't met.
type GetServiceScheduleByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceScheduleByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceScheduleByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceScheduleByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceScheduleByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceScheduleByPkResponseValidationError) ErrorName() string {
	return "GetServiceScheduleByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceScheduleByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceScheduleByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceScheduleByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceScheduleByPkResponseValidationError{}

// Validate checks the field values on
// GetServiceScheduleByUniversalServiceReferenceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetServiceScheduleByUniversalServiceReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetServiceScheduleByUniversalServiceReferenceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetServiceScheduleByUniversalServiceReferenceRequestMultiError, or nil if
// none found.
func (m *GetServiceScheduleByUniversalServiceReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceScheduleByUniversalServiceReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UniversalServiceReference

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetServiceScheduleByUniversalServiceReferenceRequestMultiError(errors)
	}

	return nil
}

// GetServiceScheduleByUniversalServiceReferenceRequestMultiError is an error
// wrapping multiple validation errors returned by
// GetServiceScheduleByUniversalServiceReferenceRequest.ValidateAll() if the
// designated constraints aren't met.
type GetServiceScheduleByUniversalServiceReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceScheduleByUniversalServiceReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceScheduleByUniversalServiceReferenceRequestMultiError) AllErrors() []error { return m }

// GetServiceScheduleByUniversalServiceReferenceRequestValidationError is the
// validation error returned by
// GetServiceScheduleByUniversalServiceReferenceRequest.Validate if the
// designated constraints aren't met.
type GetServiceScheduleByUniversalServiceReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceScheduleByUniversalServiceReferenceRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetServiceScheduleByUniversalServiceReferenceRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetServiceScheduleByUniversalServiceReferenceRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetServiceScheduleByUniversalServiceReferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceScheduleByUniversalServiceReferenceRequestValidationError) ErrorName() string {
	return "GetServiceScheduleByUniversalServiceReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceScheduleByUniversalServiceReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceScheduleByUniversalServiceReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceScheduleByUniversalServiceReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceScheduleByUniversalServiceReferenceRequestValidationError{}

// Validate checks the field values on
// GetServiceScheduleByUniversalServiceReferenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceScheduleByUniversalServiceReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetServiceScheduleByUniversalServiceReferenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceScheduleByUniversalServiceReferenceResponseMultiError, or nil if
// none found.
func (m *GetServiceScheduleByUniversalServiceReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceScheduleByUniversalServiceReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServiceSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServiceScheduleByUniversalServiceReferenceResponseValidationError{
					field:  "ServiceSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServiceScheduleByUniversalServiceReferenceResponseValidationError{
					field:  "ServiceSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServiceScheduleByUniversalServiceReferenceResponseValidationError{
				field:  "ServiceSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetServiceScheduleByUniversalServiceReferenceResponseMultiError(errors)
	}

	return nil
}

// GetServiceScheduleByUniversalServiceReferenceResponseMultiError is an error
// wrapping multiple validation errors returned by
// GetServiceScheduleByUniversalServiceReferenceResponse.ValidateAll() if the
// designated constraints aren't met.
type GetServiceScheduleByUniversalServiceReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceScheduleByUniversalServiceReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceScheduleByUniversalServiceReferenceResponseMultiError) AllErrors() []error {
	return m
}

// GetServiceScheduleByUniversalServiceReferenceResponseValidationError is the
// validation error returned by
// GetServiceScheduleByUniversalServiceReferenceResponse.Validate if the
// designated constraints aren't met.
type GetServiceScheduleByUniversalServiceReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceScheduleByUniversalServiceReferenceResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetServiceScheduleByUniversalServiceReferenceResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetServiceScheduleByUniversalServiceReferenceResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetServiceScheduleByUniversalServiceReferenceResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetServiceScheduleByUniversalServiceReferenceResponseValidationError) ErrorName() string {
	return "GetServiceScheduleByUniversalServiceReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceScheduleByUniversalServiceReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceScheduleByUniversalServiceReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceScheduleByUniversalServiceReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceScheduleByUniversalServiceReferenceResponseValidationError{}

// Validate checks the field values on GetServiceSchedulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceSchedulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceSchedulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceSchedulesRequestMultiError, or nil if none found.
func (m *GetServiceSchedulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceSchedulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetServiceSchedulesRequestMultiError(errors)
	}

	return nil
}

// GetServiceSchedulesRequestMultiError is an error wrapping multiple
// validation errors returned by GetServiceSchedulesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetServiceSchedulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceSchedulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceSchedulesRequestMultiError) AllErrors() []error { return m }

// GetServiceSchedulesRequestValidationError is the validation error returned
// by GetServiceSchedulesRequest.Validate if the designated constraints aren't met.
type GetServiceSchedulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceSchedulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceSchedulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceSchedulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceSchedulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceSchedulesRequestValidationError) ErrorName() string {
	return "GetServiceSchedulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceSchedulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceSchedulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceSchedulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceSchedulesRequestValidationError{}

// Validate checks the field values on GetServiceSchedulesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceSchedulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceSchedulesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceSchedulesResponseMultiError, or nil if none found.
func (m *GetServiceSchedulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceSchedulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServiceSchedules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceSchedulesResponseValidationError{
						field:  fmt.Sprintf("ServiceSchedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceSchedulesResponseValidationError{
						field:  fmt.Sprintf("ServiceSchedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceSchedulesResponseValidationError{
					field:  fmt.Sprintf("ServiceSchedules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetServiceSchedulesResponseMultiError(errors)
	}

	return nil
}

// GetServiceSchedulesResponseMultiError is an error wrapping multiple
// validation errors returned by GetServiceSchedulesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetServiceSchedulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceSchedulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceSchedulesResponseMultiError) AllErrors() []error { return m }

// GetServiceSchedulesResponseValidationError is the validation error returned
// by GetServiceSchedulesResponse.Validate if the designated constraints
// aren't met.
type GetServiceSchedulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceSchedulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceSchedulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceSchedulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceSchedulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceSchedulesResponseValidationError) ErrorName() string {
	return "GetServiceSchedulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceSchedulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceSchedulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceSchedulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceSchedulesResponseValidationError{}

// Validate checks the field values on
// UpdateServiceScheduleByUniversalServiceReferenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServiceScheduleByUniversalServiceReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateServiceScheduleByUniversalServiceReferenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServiceScheduleByUniversalServiceReferenceRequestMultiError, or nil
// if none found.
func (m *UpdateServiceScheduleByUniversalServiceReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceScheduleByUniversalServiceReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierServiceName

	// no validation rules for CarrierServiceCode

	// no validation rules for UniversalServiceReference

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateServiceScheduleByUniversalServiceReferenceRequestMultiError(errors)
	}

	return nil
}

// UpdateServiceScheduleByUniversalServiceReferenceRequestMultiError is an
// error wrapping multiple validation errors returned by
// UpdateServiceScheduleByUniversalServiceReferenceRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateServiceScheduleByUniversalServiceReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceScheduleByUniversalServiceReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceScheduleByUniversalServiceReferenceRequestMultiError) AllErrors() []error {
	return m
}

// UpdateServiceScheduleByUniversalServiceReferenceRequestValidationError is
// the validation error returned by
// UpdateServiceScheduleByUniversalServiceReferenceRequest.Validate if the
// designated constraints aren't met.
type UpdateServiceScheduleByUniversalServiceReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceScheduleByUniversalServiceReferenceRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateServiceScheduleByUniversalServiceReferenceRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateServiceScheduleByUniversalServiceReferenceRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateServiceScheduleByUniversalServiceReferenceRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e UpdateServiceScheduleByUniversalServiceReferenceRequestValidationError) ErrorName() string {
	return "UpdateServiceScheduleByUniversalServiceReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceScheduleByUniversalServiceReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceScheduleByUniversalServiceReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceScheduleByUniversalServiceReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceScheduleByUniversalServiceReferenceRequestValidationError{}

// Validate checks the field values on
// UpdateServiceScheduleByUniversalServiceReferenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServiceScheduleByUniversalServiceReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateServiceScheduleByUniversalServiceReferenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServiceScheduleByUniversalServiceReferenceResponseMultiError, or nil
// if none found.
func (m *UpdateServiceScheduleByUniversalServiceReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceScheduleByUniversalServiceReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServiceScheduleByUniversalServiceReferenceResponseMultiError(errors)
	}

	return nil
}

// UpdateServiceScheduleByUniversalServiceReferenceResponseMultiError is an
// error wrapping multiple validation errors returned by
// UpdateServiceScheduleByUniversalServiceReferenceResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateServiceScheduleByUniversalServiceReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceScheduleByUniversalServiceReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceScheduleByUniversalServiceReferenceResponseMultiError) AllErrors() []error {
	return m
}

// UpdateServiceScheduleByUniversalServiceReferenceResponseValidationError is
// the validation error returned by
// UpdateServiceScheduleByUniversalServiceReferenceResponse.Validate if the
// designated constraints aren't met.
type UpdateServiceScheduleByUniversalServiceReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceScheduleByUniversalServiceReferenceResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateServiceScheduleByUniversalServiceReferenceResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateServiceScheduleByUniversalServiceReferenceResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateServiceScheduleByUniversalServiceReferenceResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e UpdateServiceScheduleByUniversalServiceReferenceResponseValidationError) ErrorName() string {
	return "UpdateServiceScheduleByUniversalServiceReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceScheduleByUniversalServiceReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceScheduleByUniversalServiceReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceScheduleByUniversalServiceReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceScheduleByUniversalServiceReferenceResponseValidationError{}

// Validate checks the field values on ServiceSchedule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServiceSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceSchedule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceScheduleMultiError, or nil if none found.
func (m *ServiceSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServiceScheduleD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceScheduleValidationError{
					field:  "ServiceScheduleD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceScheduleValidationError{
					field:  "ServiceScheduleD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceScheduleD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceScheduleValidationError{
				field:  "ServiceScheduleD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceScheduleValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceScheduleValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceScheduleValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceScheduleValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceScheduleValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceScheduleValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServiceScheduleMultiError(errors)
	}

	return nil
}

// ServiceScheduleMultiError is an error wrapping multiple validation errors
// returned by ServiceSchedule.ValidateAll() if the designated constraints
// aren't met.
type ServiceScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceScheduleMultiError) AllErrors() []error { return m }

// ServiceScheduleValidationError is the validation error returned by
// ServiceSchedule.Validate if the designated constraints aren't met.
type ServiceScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceScheduleValidationError) ErrorName() string { return "ServiceScheduleValidationError" }

// Error satisfies the builtin error interface
func (e ServiceScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceScheduleValidationError{}

// Validate checks the field values on ServiceScheduleD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServiceScheduleD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceScheduleD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceScheduleDMultiError, or nil if none found.
func (m *ServiceScheduleD) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceScheduleD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for CarrierServiceName

	// no validation rules for CarrierServiceCode

	// no validation rules for UniversalServiceReference

	if len(errors) > 0 {
		return ServiceScheduleDMultiError(errors)
	}

	return nil
}

// ServiceScheduleDMultiError is an error wrapping multiple validation errors
// returned by ServiceScheduleD.ValidateAll() if the designated constraints
// aren't met.
type ServiceScheduleDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceScheduleDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceScheduleDMultiError) AllErrors() []error { return m }

// ServiceScheduleDValidationError is the validation error returned by
// ServiceScheduleD.Validate if the designated constraints aren't met.
type ServiceScheduleDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceScheduleDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceScheduleDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceScheduleDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceScheduleDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceScheduleDValidationError) ErrorName() string { return "ServiceScheduleDValidationError" }

// Error satisfies the builtin error interface
func (e ServiceScheduleDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceScheduleD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceScheduleDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceScheduleDValidationError{}
