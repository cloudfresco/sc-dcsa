// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ovs/v3/leg.proto

package v3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateLegRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateLegRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLegRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLegRequestMultiError, or nil if none found.
func (m *CreateLegRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLegRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SequenceNumber

	// no validation rules for ModeOfTransport

	// no validation rules for VesselOperatorSmdgLinerCode

	// no validation rules for VesselImoNumber

	// no validation rules for VesselName

	// no validation rules for CarrierServiceName

	// no validation rules for UniversalServiceReference

	// no validation rules for CarrierServiceCode

	// no validation rules for UniversalImportVoyageReference

	// no validation rules for UniversalExportVoyageReference

	// no validation rules for CarrierImportVoyageNumber

	// no validation rules for CarrierExportVoyageNumber

	// no validation rules for DepartureId

	// no validation rules for ArrivalId

	// no validation rules for PointToPointRoutingId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateLegRequestMultiError(errors)
	}

	return nil
}

// CreateLegRequestMultiError is an error wrapping multiple validation errors
// returned by CreateLegRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateLegRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLegRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLegRequestMultiError) AllErrors() []error { return m }

// CreateLegRequestValidationError is the validation error returned by
// CreateLegRequest.Validate if the designated constraints aren't met.
type CreateLegRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLegRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLegRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLegRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLegRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLegRequestValidationError) ErrorName() string { return "CreateLegRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateLegRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLegRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLegRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLegRequestValidationError{}

// Validate checks the field values on CreateLegResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateLegResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLegResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLegResponseMultiError, or nil if none found.
func (m *CreateLegResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLegResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLeg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLegResponseValidationError{
					field:  "Leg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLegResponseValidationError{
					field:  "Leg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLeg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLegResponseValidationError{
				field:  "Leg",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateLegResponseMultiError(errors)
	}

	return nil
}

// CreateLegResponseMultiError is an error wrapping multiple validation errors
// returned by CreateLegResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateLegResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLegResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLegResponseMultiError) AllErrors() []error { return m }

// CreateLegResponseValidationError is the validation error returned by
// CreateLegResponse.Validate if the designated constraints aren't met.
type CreateLegResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLegResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLegResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLegResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLegResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLegResponseValidationError) ErrorName() string {
	return "CreateLegResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLegResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLegResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLegResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLegResponseValidationError{}

// Validate checks the field values on GetLegsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLegsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLegsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLegsResponseMultiError, or nil if none found.
func (m *GetLegsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLegsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLegs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLegsResponseValidationError{
						field:  fmt.Sprintf("Legs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLegsResponseValidationError{
						field:  fmt.Sprintf("Legs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLegsResponseValidationError{
					field:  fmt.Sprintf("Legs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetLegsResponseMultiError(errors)
	}

	return nil
}

// GetLegsResponseMultiError is an error wrapping multiple validation errors
// returned by GetLegsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetLegsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLegsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLegsResponseMultiError) AllErrors() []error { return m }

// GetLegsResponseValidationError is the validation error returned by
// GetLegsResponse.Validate if the designated constraints aren't met.
type GetLegsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLegsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLegsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLegsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLegsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLegsResponseValidationError) ErrorName() string { return "GetLegsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetLegsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLegsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLegsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLegsResponseValidationError{}

// Validate checks the field values on GetLegsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLegsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLegsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLegsRequestMultiError,
// or nil if none found.
func (m *GetLegsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLegsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetLegsRequestMultiError(errors)
	}

	return nil
}

// GetLegsRequestMultiError is an error wrapping multiple validation errors
// returned by GetLegsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLegsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLegsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLegsRequestMultiError) AllErrors() []error { return m }

// GetLegsRequestValidationError is the validation error returned by
// GetLegsRequest.Validate if the designated constraints aren't met.
type GetLegsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLegsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLegsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLegsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLegsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLegsRequestValidationError) ErrorName() string { return "GetLegsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLegsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLegsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLegsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLegsRequestValidationError{}

// Validate checks the field values on GetLegRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLegRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLegRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLegRequestMultiError, or
// nil if none found.
func (m *GetLegRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLegRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLegRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLegRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLegRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLegRequestMultiError(errors)
	}

	return nil
}

// GetLegRequestMultiError is an error wrapping multiple validation errors
// returned by GetLegRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLegRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLegRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLegRequestMultiError) AllErrors() []error { return m }

// GetLegRequestValidationError is the validation error returned by
// GetLegRequest.Validate if the designated constraints aren't met.
type GetLegRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLegRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLegRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLegRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLegRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLegRequestValidationError) ErrorName() string { return "GetLegRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLegRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLegRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLegRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLegRequestValidationError{}

// Validate checks the field values on GetLegResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLegResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLegResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLegResponseMultiError,
// or nil if none found.
func (m *GetLegResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLegResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLeg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLegResponseValidationError{
					field:  "Leg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLegResponseValidationError{
					field:  "Leg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLeg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLegResponseValidationError{
				field:  "Leg",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLegResponseMultiError(errors)
	}

	return nil
}

// GetLegResponseMultiError is an error wrapping multiple validation errors
// returned by GetLegResponse.ValidateAll() if the designated constraints
// aren't met.
type GetLegResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLegResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLegResponseMultiError) AllErrors() []error { return m }

// GetLegResponseValidationError is the validation error returned by
// GetLegResponse.Validate if the designated constraints aren't met.
type GetLegResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLegResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLegResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLegResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLegResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLegResponseValidationError) ErrorName() string { return "GetLegResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetLegResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLegResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLegResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLegResponseValidationError{}

// Validate checks the field values on GetLegByPkRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLegByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLegByPkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLegByPkRequestMultiError, or nil if none found.
func (m *GetLegByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLegByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLegByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLegByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLegByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLegByPkRequestMultiError(errors)
	}

	return nil
}

// GetLegByPkRequestMultiError is an error wrapping multiple validation errors
// returned by GetLegByPkRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLegByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLegByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLegByPkRequestMultiError) AllErrors() []error { return m }

// GetLegByPkRequestValidationError is the validation error returned by
// GetLegByPkRequest.Validate if the designated constraints aren't met.
type GetLegByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLegByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLegByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLegByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLegByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLegByPkRequestValidationError) ErrorName() string {
	return "GetLegByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLegByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLegByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLegByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLegByPkRequestValidationError{}

// Validate checks the field values on GetLegByPkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLegByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLegByPkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLegByPkResponseMultiError, or nil if none found.
func (m *GetLegByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLegByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLeg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLegByPkResponseValidationError{
					field:  "Leg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLegByPkResponseValidationError{
					field:  "Leg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLeg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLegByPkResponseValidationError{
				field:  "Leg",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLegByPkResponseMultiError(errors)
	}

	return nil
}

// GetLegByPkResponseMultiError is an error wrapping multiple validation errors
// returned by GetLegByPkResponse.ValidateAll() if the designated constraints
// aren't met.
type GetLegByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLegByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLegByPkResponseMultiError) AllErrors() []error { return m }

// GetLegByPkResponseValidationError is the validation error returned by
// GetLegByPkResponse.Validate if the designated constraints aren't met.
type GetLegByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLegByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLegByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLegByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLegByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLegByPkResponseValidationError) ErrorName() string {
	return "GetLegByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLegByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLegByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLegByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLegByPkResponseValidationError{}

// Validate checks the field values on Leg with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Leg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Leg with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LegMultiError, or nil if none found.
func (m *Leg) ValidateAll() error {
	return m.validate(true)
}

func (m *Leg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLegD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LegValidationError{
					field:  "LegD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LegValidationError{
					field:  "LegD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLegD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LegValidationError{
				field:  "LegD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LegValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LegValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LegValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LegValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LegValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LegValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LegMultiError(errors)
	}

	return nil
}

// LegMultiError is an error wrapping multiple validation errors returned by
// Leg.ValidateAll() if the designated constraints aren't met.
type LegMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LegMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LegMultiError) AllErrors() []error { return m }

// LegValidationError is the validation error returned by Leg.Validate if the
// designated constraints aren't met.
type LegValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LegValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LegValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LegValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LegValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LegValidationError) ErrorName() string { return "LegValidationError" }

// Error satisfies the builtin error interface
func (e LegValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LegValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LegValidationError{}

// Validate checks the field values on LegD with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *LegD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LegD with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LegDMultiError, or nil if none found.
func (m *LegD) ValidateAll() error {
	return m.validate(true)
}

func (m *LegD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for SequenceNumber

	// no validation rules for ModeOfTransport

	// no validation rules for VesselOperatorSmdgLinerCode

	// no validation rules for VesselImoNumber

	// no validation rules for VesselName

	// no validation rules for CarrierServiceName

	// no validation rules for UniversalServiceReference

	// no validation rules for CarrierServiceCode

	// no validation rules for UniversalImportVoyageReference

	// no validation rules for UniversalExportVoyageReference

	// no validation rules for CarrierImportVoyageNumber

	// no validation rules for CarrierExportVoyageNumber

	// no validation rules for DepartureId

	// no validation rules for ArrivalId

	// no validation rules for PointToPointRoutingId

	if len(errors) > 0 {
		return LegDMultiError(errors)
	}

	return nil
}

// LegDMultiError is an error wrapping multiple validation errors returned by
// LegD.ValidateAll() if the designated constraints aren't met.
type LegDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LegDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LegDMultiError) AllErrors() []error { return m }

// LegDValidationError is the validation error returned by LegD.Validate if the
// designated constraints aren't met.
type LegDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LegDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LegDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LegDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LegDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LegDValidationError) ErrorName() string { return "LegDValidationError" }

// Error satisfies the builtin error interface
func (e LegDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLegD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LegDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LegDValidationError{}

// Validate checks the field values on CreatePointToPointRoutingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePointToPointRoutingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePointToPointRoutingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePointToPointRoutingRequestMultiError, or nil if none found.
func (m *CreatePointToPointRoutingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePointToPointRoutingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SequenceNumber

	// no validation rules for PlaceOfReceiptId

	// no validation rules for PlaceOfDeliveryId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	for idx, item := range m.GetLegs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePointToPointRoutingRequestValidationError{
						field:  fmt.Sprintf("Legs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePointToPointRoutingRequestValidationError{
						field:  fmt.Sprintf("Legs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePointToPointRoutingRequestValidationError{
					field:  fmt.Sprintf("Legs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreatePointToPointRoutingRequestMultiError(errors)
	}

	return nil
}

// CreatePointToPointRoutingRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreatePointToPointRoutingRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePointToPointRoutingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePointToPointRoutingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePointToPointRoutingRequestMultiError) AllErrors() []error { return m }

// CreatePointToPointRoutingRequestValidationError is the validation error
// returned by CreatePointToPointRoutingRequest.Validate if the designated
// constraints aren't met.
type CreatePointToPointRoutingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePointToPointRoutingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePointToPointRoutingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePointToPointRoutingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePointToPointRoutingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePointToPointRoutingRequestValidationError) ErrorName() string {
	return "CreatePointToPointRoutingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePointToPointRoutingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePointToPointRoutingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePointToPointRoutingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePointToPointRoutingRequestValidationError{}

// Validate checks the field values on CreatePointToPointRoutingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePointToPointRoutingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePointToPointRoutingResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreatePointToPointRoutingResponseMultiError, or nil if none found.
func (m *CreatePointToPointRoutingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePointToPointRoutingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPointToPointRouting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePointToPointRoutingResponseValidationError{
					field:  "PointToPointRouting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePointToPointRoutingResponseValidationError{
					field:  "PointToPointRouting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPointToPointRouting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePointToPointRoutingResponseValidationError{
				field:  "PointToPointRouting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePointToPointRoutingResponseMultiError(errors)
	}

	return nil
}

// CreatePointToPointRoutingResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreatePointToPointRoutingResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePointToPointRoutingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePointToPointRoutingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePointToPointRoutingResponseMultiError) AllErrors() []error { return m }

// CreatePointToPointRoutingResponseValidationError is the validation error
// returned by CreatePointToPointRoutingResponse.Validate if the designated
// constraints aren't met.
type CreatePointToPointRoutingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePointToPointRoutingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePointToPointRoutingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePointToPointRoutingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePointToPointRoutingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePointToPointRoutingResponseValidationError) ErrorName() string {
	return "CreatePointToPointRoutingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePointToPointRoutingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePointToPointRoutingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePointToPointRoutingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePointToPointRoutingResponseValidationError{}

// Validate checks the field values on GetPointToPointRoutingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPointToPointRoutingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPointToPointRoutingsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPointToPointRoutingsResponseMultiError, or nil if none found.
func (m *GetPointToPointRoutingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPointToPointRoutingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPointToPointRoutings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPointToPointRoutingsResponseValidationError{
						field:  fmt.Sprintf("PointToPointRoutings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPointToPointRoutingsResponseValidationError{
						field:  fmt.Sprintf("PointToPointRoutings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPointToPointRoutingsResponseValidationError{
					field:  fmt.Sprintf("PointToPointRoutings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetPointToPointRoutingsResponseMultiError(errors)
	}

	return nil
}

// GetPointToPointRoutingsResponseMultiError is an error wrapping multiple
// validation errors returned by GetPointToPointRoutingsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPointToPointRoutingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPointToPointRoutingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPointToPointRoutingsResponseMultiError) AllErrors() []error { return m }

// GetPointToPointRoutingsResponseValidationError is the validation error
// returned by GetPointToPointRoutingsResponse.Validate if the designated
// constraints aren't met.
type GetPointToPointRoutingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPointToPointRoutingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPointToPointRoutingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPointToPointRoutingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPointToPointRoutingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPointToPointRoutingsResponseValidationError) ErrorName() string {
	return "GetPointToPointRoutingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPointToPointRoutingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPointToPointRoutingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPointToPointRoutingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPointToPointRoutingsResponseValidationError{}

// Validate checks the field values on GetPointToPointRoutingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPointToPointRoutingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPointToPointRoutingsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPointToPointRoutingsRequestMultiError, or nil if none found.
func (m *GetPointToPointRoutingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPointToPointRoutingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetPointToPointRoutingsRequestMultiError(errors)
	}

	return nil
}

// GetPointToPointRoutingsRequestMultiError is an error wrapping multiple
// validation errors returned by GetPointToPointRoutingsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPointToPointRoutingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPointToPointRoutingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPointToPointRoutingsRequestMultiError) AllErrors() []error { return m }

// GetPointToPointRoutingsRequestValidationError is the validation error
// returned by GetPointToPointRoutingsRequest.Validate if the designated
// constraints aren't met.
type GetPointToPointRoutingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPointToPointRoutingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPointToPointRoutingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPointToPointRoutingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPointToPointRoutingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPointToPointRoutingsRequestValidationError) ErrorName() string {
	return "GetPointToPointRoutingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPointToPointRoutingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPointToPointRoutingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPointToPointRoutingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPointToPointRoutingsRequestValidationError{}

// Validate checks the field values on GetPointToPointRoutingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPointToPointRoutingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPointToPointRoutingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPointToPointRoutingRequestMultiError, or nil if none found.
func (m *GetPointToPointRoutingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPointToPointRoutingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPointToPointRoutingRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPointToPointRoutingRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPointToPointRoutingRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPointToPointRoutingRequestMultiError(errors)
	}

	return nil
}

// GetPointToPointRoutingRequestMultiError is an error wrapping multiple
// validation errors returned by GetPointToPointRoutingRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPointToPointRoutingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPointToPointRoutingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPointToPointRoutingRequestMultiError) AllErrors() []error { return m }

// GetPointToPointRoutingRequestValidationError is the validation error
// returned by GetPointToPointRoutingRequest.Validate if the designated
// constraints aren't met.
type GetPointToPointRoutingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPointToPointRoutingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPointToPointRoutingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPointToPointRoutingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPointToPointRoutingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPointToPointRoutingRequestValidationError) ErrorName() string {
	return "GetPointToPointRoutingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPointToPointRoutingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPointToPointRoutingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPointToPointRoutingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPointToPointRoutingRequestValidationError{}

// Validate checks the field values on GetPointToPointRoutingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPointToPointRoutingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPointToPointRoutingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPointToPointRoutingResponseMultiError, or nil if none found.
func (m *GetPointToPointRoutingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPointToPointRoutingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPointToPointRouting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPointToPointRoutingResponseValidationError{
					field:  "PointToPointRouting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPointToPointRoutingResponseValidationError{
					field:  "PointToPointRouting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPointToPointRouting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPointToPointRoutingResponseValidationError{
				field:  "PointToPointRouting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPointToPointRoutingResponseMultiError(errors)
	}

	return nil
}

// GetPointToPointRoutingResponseMultiError is an error wrapping multiple
// validation errors returned by GetPointToPointRoutingResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPointToPointRoutingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPointToPointRoutingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPointToPointRoutingResponseMultiError) AllErrors() []error { return m }

// GetPointToPointRoutingResponseValidationError is the validation error
// returned by GetPointToPointRoutingResponse.Validate if the designated
// constraints aren't met.
type GetPointToPointRoutingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPointToPointRoutingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPointToPointRoutingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPointToPointRoutingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPointToPointRoutingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPointToPointRoutingResponseValidationError) ErrorName() string {
	return "GetPointToPointRoutingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPointToPointRoutingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPointToPointRoutingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPointToPointRoutingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPointToPointRoutingResponseValidationError{}

// Validate checks the field values on GetPointToPointRoutingByPkRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPointToPointRoutingByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPointToPointRoutingByPkRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPointToPointRoutingByPkRequestMultiError, or nil if none found.
func (m *GetPointToPointRoutingByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPointToPointRoutingByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPointToPointRoutingByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPointToPointRoutingByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPointToPointRoutingByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPointToPointRoutingByPkRequestMultiError(errors)
	}

	return nil
}

// GetPointToPointRoutingByPkRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetPointToPointRoutingByPkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPointToPointRoutingByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPointToPointRoutingByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPointToPointRoutingByPkRequestMultiError) AllErrors() []error { return m }

// GetPointToPointRoutingByPkRequestValidationError is the validation error
// returned by GetPointToPointRoutingByPkRequest.Validate if the designated
// constraints aren't met.
type GetPointToPointRoutingByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPointToPointRoutingByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPointToPointRoutingByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPointToPointRoutingByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPointToPointRoutingByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPointToPointRoutingByPkRequestValidationError) ErrorName() string {
	return "GetPointToPointRoutingByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPointToPointRoutingByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPointToPointRoutingByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPointToPointRoutingByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPointToPointRoutingByPkRequestValidationError{}

// Validate checks the field values on GetPointToPointRoutingByPkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPointToPointRoutingByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPointToPointRoutingByPkResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPointToPointRoutingByPkResponseMultiError, or nil if none found.
func (m *GetPointToPointRoutingByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPointToPointRoutingByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPointToPointRouting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPointToPointRoutingByPkResponseValidationError{
					field:  "PointToPointRouting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPointToPointRoutingByPkResponseValidationError{
					field:  "PointToPointRouting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPointToPointRouting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPointToPointRoutingByPkResponseValidationError{
				field:  "PointToPointRouting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPointToPointRoutingByPkResponseMultiError(errors)
	}

	return nil
}

// GetPointToPointRoutingByPkResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetPointToPointRoutingByPkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPointToPointRoutingByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPointToPointRoutingByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPointToPointRoutingByPkResponseMultiError) AllErrors() []error { return m }

// GetPointToPointRoutingByPkResponseValidationError is the validation error
// returned by GetPointToPointRoutingByPkResponse.Validate if the designated
// constraints aren't met.
type GetPointToPointRoutingByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPointToPointRoutingByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPointToPointRoutingByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPointToPointRoutingByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPointToPointRoutingByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPointToPointRoutingByPkResponseValidationError) ErrorName() string {
	return "GetPointToPointRoutingByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPointToPointRoutingByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPointToPointRoutingByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPointToPointRoutingByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPointToPointRoutingByPkResponseValidationError{}

// Validate checks the field values on PointToPointRouting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PointToPointRouting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PointToPointRouting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PointToPointRoutingMultiError, or nil if none found.
func (m *PointToPointRouting) ValidateAll() error {
	return m.validate(true)
}

func (m *PointToPointRouting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPointToPointRoutingD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PointToPointRoutingValidationError{
					field:  "PointToPointRoutingD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PointToPointRoutingValidationError{
					field:  "PointToPointRoutingD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPointToPointRoutingD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PointToPointRoutingValidationError{
				field:  "PointToPointRoutingD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PointToPointRoutingValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PointToPointRoutingValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PointToPointRoutingValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PointToPointRoutingValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PointToPointRoutingValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PointToPointRoutingValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLegs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PointToPointRoutingValidationError{
						field:  fmt.Sprintf("Legs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PointToPointRoutingValidationError{
						field:  fmt.Sprintf("Legs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PointToPointRoutingValidationError{
					field:  fmt.Sprintf("Legs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PointToPointRoutingMultiError(errors)
	}

	return nil
}

// PointToPointRoutingMultiError is an error wrapping multiple validation
// errors returned by PointToPointRouting.ValidateAll() if the designated
// constraints aren't met.
type PointToPointRoutingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PointToPointRoutingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PointToPointRoutingMultiError) AllErrors() []error { return m }

// PointToPointRoutingValidationError is the validation error returned by
// PointToPointRouting.Validate if the designated constraints aren't met.
type PointToPointRoutingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PointToPointRoutingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PointToPointRoutingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PointToPointRoutingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PointToPointRoutingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PointToPointRoutingValidationError) ErrorName() string {
	return "PointToPointRoutingValidationError"
}

// Error satisfies the builtin error interface
func (e PointToPointRoutingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPointToPointRouting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PointToPointRoutingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PointToPointRoutingValidationError{}

// Validate checks the field values on PointToPointRoutingD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PointToPointRoutingD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PointToPointRoutingD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PointToPointRoutingDMultiError, or nil if none found.
func (m *PointToPointRoutingD) ValidateAll() error {
	return m.validate(true)
}

func (m *PointToPointRoutingD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for SequenceNumber

	// no validation rules for PlaceOfReceiptId

	// no validation rules for PlaceOfDeliveryId

	if len(errors) > 0 {
		return PointToPointRoutingDMultiError(errors)
	}

	return nil
}

// PointToPointRoutingDMultiError is an error wrapping multiple validation
// errors returned by PointToPointRoutingD.ValidateAll() if the designated
// constraints aren't met.
type PointToPointRoutingDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PointToPointRoutingDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PointToPointRoutingDMultiError) AllErrors() []error { return m }

// PointToPointRoutingDValidationError is the validation error returned by
// PointToPointRoutingD.Validate if the designated constraints aren't met.
type PointToPointRoutingDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PointToPointRoutingDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PointToPointRoutingDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PointToPointRoutingDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PointToPointRoutingDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PointToPointRoutingDValidationError) ErrorName() string {
	return "PointToPointRoutingDValidationError"
}

// Error satisfies the builtin error interface
func (e PointToPointRoutingDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPointToPointRoutingD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PointToPointRoutingDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PointToPointRoutingDValidationError{}
