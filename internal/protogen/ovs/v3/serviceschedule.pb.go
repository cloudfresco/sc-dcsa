// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: ovs/v3/serviceschedule.proto

package v3

import (
	v1 "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateServiceScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarrierServiceName        string `protobuf:"bytes,1,opt,name=carrier_service_name,json=carrierServiceName,proto3" json:"carrier_service_name,omitempty"`
	CarrierServiceCode        string `protobuf:"bytes,2,opt,name=carrier_service_code,json=carrierServiceCode,proto3" json:"carrier_service_code,omitempty"`
	UniversalServiceReference string `protobuf:"bytes,3,opt,name=universal_service_reference,json=universalServiceReference,proto3" json:"universal_service_reference,omitempty"`
	UserId                    string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                 string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                 string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateServiceScheduleRequest) Reset() {
	*x = CreateServiceScheduleRequest{}
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceScheduleRequest) ProtoMessage() {}

func (x *CreateServiceScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceScheduleRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceScheduleRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_serviceschedule_proto_rawDescGZIP(), []int{0}
}

func (x *CreateServiceScheduleRequest) GetCarrierServiceName() string {
	if x != nil {
		return x.CarrierServiceName
	}
	return ""
}

func (x *CreateServiceScheduleRequest) GetCarrierServiceCode() string {
	if x != nil {
		return x.CarrierServiceCode
	}
	return ""
}

func (x *CreateServiceScheduleRequest) GetUniversalServiceReference() string {
	if x != nil {
		return x.UniversalServiceReference
	}
	return ""
}

func (x *CreateServiceScheduleRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateServiceScheduleRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateServiceScheduleRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateServiceScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceSchedule *ServiceSchedule `protobuf:"bytes,1,opt,name=service_schedule,json=serviceSchedule,proto3" json:"service_schedule,omitempty"`
}

func (x *CreateServiceScheduleResponse) Reset() {
	*x = CreateServiceScheduleResponse{}
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceScheduleResponse) ProtoMessage() {}

func (x *CreateServiceScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceScheduleResponse.ProtoReflect.Descriptor instead.
func (*CreateServiceScheduleResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_serviceschedule_proto_rawDescGZIP(), []int{1}
}

func (x *CreateServiceScheduleResponse) GetServiceSchedule() *ServiceSchedule {
	if x != nil {
		return x.ServiceSchedule
	}
	return nil
}

type GetServiceScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetServiceScheduleRequest) Reset() {
	*x = GetServiceScheduleRequest{}
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceScheduleRequest) ProtoMessage() {}

func (x *GetServiceScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceScheduleRequest.ProtoReflect.Descriptor instead.
func (*GetServiceScheduleRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_serviceschedule_proto_rawDescGZIP(), []int{2}
}

func (x *GetServiceScheduleRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetServiceScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceSchedule *ServiceSchedule `protobuf:"bytes,1,opt,name=service_schedule,json=serviceSchedule,proto3" json:"service_schedule,omitempty"`
}

func (x *GetServiceScheduleResponse) Reset() {
	*x = GetServiceScheduleResponse{}
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceScheduleResponse) ProtoMessage() {}

func (x *GetServiceScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceScheduleResponse.ProtoReflect.Descriptor instead.
func (*GetServiceScheduleResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_serviceschedule_proto_rawDescGZIP(), []int{3}
}

func (x *GetServiceScheduleResponse) GetServiceSchedule() *ServiceSchedule {
	if x != nil {
		return x.ServiceSchedule
	}
	return nil
}

type GetServiceScheduleByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetServiceScheduleByPkRequest) Reset() {
	*x = GetServiceScheduleByPkRequest{}
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceScheduleByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceScheduleByPkRequest) ProtoMessage() {}

func (x *GetServiceScheduleByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceScheduleByPkRequest.ProtoReflect.Descriptor instead.
func (*GetServiceScheduleByPkRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_serviceschedule_proto_rawDescGZIP(), []int{4}
}

func (x *GetServiceScheduleByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetServiceScheduleByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceSchedule *ServiceSchedule `protobuf:"bytes,1,opt,name=service_schedule,json=serviceSchedule,proto3" json:"service_schedule,omitempty"`
}

func (x *GetServiceScheduleByPkResponse) Reset() {
	*x = GetServiceScheduleByPkResponse{}
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceScheduleByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceScheduleByPkResponse) ProtoMessage() {}

func (x *GetServiceScheduleByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceScheduleByPkResponse.ProtoReflect.Descriptor instead.
func (*GetServiceScheduleByPkResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_serviceschedule_proto_rawDescGZIP(), []int{5}
}

func (x *GetServiceScheduleByPkResponse) GetServiceSchedule() *ServiceSchedule {
	if x != nil {
		return x.ServiceSchedule
	}
	return nil
}

type GetServiceScheduleByUniversalServiceReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniversalServiceReference string `protobuf:"bytes,1,opt,name=universal_service_reference,json=universalServiceReference,proto3" json:"universal_service_reference,omitempty"`
	UserEmail                 string `protobuf:"bytes,2,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                 string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetServiceScheduleByUniversalServiceReferenceRequest) Reset() {
	*x = GetServiceScheduleByUniversalServiceReferenceRequest{}
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceScheduleByUniversalServiceReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceScheduleByUniversalServiceReferenceRequest) ProtoMessage() {}

func (x *GetServiceScheduleByUniversalServiceReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceScheduleByUniversalServiceReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetServiceScheduleByUniversalServiceReferenceRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_serviceschedule_proto_rawDescGZIP(), []int{6}
}

func (x *GetServiceScheduleByUniversalServiceReferenceRequest) GetUniversalServiceReference() string {
	if x != nil {
		return x.UniversalServiceReference
	}
	return ""
}

func (x *GetServiceScheduleByUniversalServiceReferenceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetServiceScheduleByUniversalServiceReferenceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetServiceScheduleByUniversalServiceReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceSchedule *ServiceSchedule `protobuf:"bytes,1,opt,name=service_schedule,json=serviceSchedule,proto3" json:"service_schedule,omitempty"`
}

func (x *GetServiceScheduleByUniversalServiceReferenceResponse) Reset() {
	*x = GetServiceScheduleByUniversalServiceReferenceResponse{}
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceScheduleByUniversalServiceReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceScheduleByUniversalServiceReferenceResponse) ProtoMessage() {}

func (x *GetServiceScheduleByUniversalServiceReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceScheduleByUniversalServiceReferenceResponse.ProtoReflect.Descriptor instead.
func (*GetServiceScheduleByUniversalServiceReferenceResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_serviceschedule_proto_rawDescGZIP(), []int{7}
}

func (x *GetServiceScheduleByUniversalServiceReferenceResponse) GetServiceSchedule() *ServiceSchedule {
	if x != nil {
		return x.ServiceSchedule
	}
	return nil
}

type GetServiceSchedulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetServiceSchedulesRequest) Reset() {
	*x = GetServiceSchedulesRequest{}
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceSchedulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceSchedulesRequest) ProtoMessage() {}

func (x *GetServiceSchedulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceSchedulesRequest.ProtoReflect.Descriptor instead.
func (*GetServiceSchedulesRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_serviceschedule_proto_rawDescGZIP(), []int{8}
}

func (x *GetServiceSchedulesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetServiceSchedulesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetServiceSchedulesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetServiceSchedulesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetServiceSchedulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceSchedules []*ServiceSchedule `protobuf:"bytes,1,rep,name=service_schedules,json=serviceSchedules,proto3" json:"service_schedules,omitempty"`
	NextCursor       string             `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetServiceSchedulesResponse) Reset() {
	*x = GetServiceSchedulesResponse{}
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceSchedulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceSchedulesResponse) ProtoMessage() {}

func (x *GetServiceSchedulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceSchedulesResponse.ProtoReflect.Descriptor instead.
func (*GetServiceSchedulesResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_serviceschedule_proto_rawDescGZIP(), []int{9}
}

func (x *GetServiceSchedulesResponse) GetServiceSchedules() []*ServiceSchedule {
	if x != nil {
		return x.ServiceSchedules
	}
	return nil
}

func (x *GetServiceSchedulesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type UpdateServiceScheduleByUniversalServiceReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarrierServiceName        string `protobuf:"bytes,1,opt,name=carrier_service_name,json=carrierServiceName,proto3" json:"carrier_service_name,omitempty"`
	CarrierServiceCode        string `protobuf:"bytes,2,opt,name=carrier_service_code,json=carrierServiceCode,proto3" json:"carrier_service_code,omitempty"`
	UniversalServiceReference string `protobuf:"bytes,3,opt,name=universal_service_reference,json=universalServiceReference,proto3" json:"universal_service_reference,omitempty"`
	UserId                    string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                 string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                 string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateServiceScheduleByUniversalServiceReferenceRequest) Reset() {
	*x = UpdateServiceScheduleByUniversalServiceReferenceRequest{}
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceScheduleByUniversalServiceReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceScheduleByUniversalServiceReferenceRequest) ProtoMessage() {}

func (x *UpdateServiceScheduleByUniversalServiceReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceScheduleByUniversalServiceReferenceRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceScheduleByUniversalServiceReferenceRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_serviceschedule_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateServiceScheduleByUniversalServiceReferenceRequest) GetCarrierServiceName() string {
	if x != nil {
		return x.CarrierServiceName
	}
	return ""
}

func (x *UpdateServiceScheduleByUniversalServiceReferenceRequest) GetCarrierServiceCode() string {
	if x != nil {
		return x.CarrierServiceCode
	}
	return ""
}

func (x *UpdateServiceScheduleByUniversalServiceReferenceRequest) GetUniversalServiceReference() string {
	if x != nil {
		return x.UniversalServiceReference
	}
	return ""
}

func (x *UpdateServiceScheduleByUniversalServiceReferenceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateServiceScheduleByUniversalServiceReferenceRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateServiceScheduleByUniversalServiceReferenceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateServiceScheduleByUniversalServiceReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateServiceScheduleByUniversalServiceReferenceResponse) Reset() {
	*x = UpdateServiceScheduleByUniversalServiceReferenceResponse{}
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceScheduleByUniversalServiceReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceScheduleByUniversalServiceReferenceResponse) ProtoMessage() {}

func (x *UpdateServiceScheduleByUniversalServiceReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceScheduleByUniversalServiceReferenceResponse.ProtoReflect.Descriptor instead.
func (*UpdateServiceScheduleByUniversalServiceReferenceResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_serviceschedule_proto_rawDescGZIP(), []int{11}
}

type ServiceSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceScheduleD *ServiceScheduleD `protobuf:"bytes,1,opt,name=service_schedule_d,json=serviceScheduleD,proto3" json:"service_schedule_d,omitempty"`
	CrUpdUser        *v1.CrUpdUser     `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime        *v1.CrUpdTime     `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *ServiceSchedule) Reset() {
	*x = ServiceSchedule{}
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceSchedule) ProtoMessage() {}

func (x *ServiceSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceSchedule.ProtoReflect.Descriptor instead.
func (*ServiceSchedule) Descriptor() ([]byte, []int) {
	return file_ovs_v3_serviceschedule_proto_rawDescGZIP(), []int{12}
}

func (x *ServiceSchedule) GetServiceScheduleD() *ServiceScheduleD {
	if x != nil {
		return x.ServiceScheduleD
	}
	return nil
}

func (x *ServiceSchedule) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *ServiceSchedule) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type ServiceScheduleD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                     []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                       string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	CarrierServiceName        string `protobuf:"bytes,4,opt,name=carrier_service_name,json=carrierServiceName,proto3" json:"carrier_service_name,omitempty"`
	CarrierServiceCode        string `protobuf:"bytes,5,opt,name=carrier_service_code,json=carrierServiceCode,proto3" json:"carrier_service_code,omitempty"`
	UniversalServiceReference string `protobuf:"bytes,6,opt,name=universal_service_reference,json=universalServiceReference,proto3" json:"universal_service_reference,omitempty"`
}

func (x *ServiceScheduleD) Reset() {
	*x = ServiceScheduleD{}
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceScheduleD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceScheduleD) ProtoMessage() {}

func (x *ServiceScheduleD) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_serviceschedule_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceScheduleD.ProtoReflect.Descriptor instead.
func (*ServiceScheduleD) Descriptor() ([]byte, []int) {
	return file_ovs_v3_serviceschedule_proto_rawDescGZIP(), []int{13}
}

func (x *ServiceScheduleD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServiceScheduleD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ServiceScheduleD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ServiceScheduleD) GetCarrierServiceName() string {
	if x != nil {
		return x.CarrierServiceName
	}
	return ""
}

func (x *ServiceScheduleD) GetCarrierServiceCode() string {
	if x != nil {
		return x.CarrierServiceCode
	}
	return ""
}

func (x *ServiceScheduleD) GetUniversalServiceReference() string {
	if x != nil {
		return x.UniversalServiceReference
	}
	return ""
}

var File_ovs_v3_serviceschedule_proto protoreflect.FileDescriptor

var file_ovs_v3_serviceschedule_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6f, 0x76, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99,
	0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22,
	0x53, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b,
	0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f,
	0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x65, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62,
	0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x64, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x76, 0x73, 0x2e,
	0x76, 0x33, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x34, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1b,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x35, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x79, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x22, 0xb4, 0x02, 0x0a, 0x37, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x38, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x79, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x52,
	0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xef, 0x01,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3e, 0x0a, 0x1b, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x32,
	0x8b, 0x06, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x76, 0x73, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x76,
	0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x76, 0x73, 0x2e,
	0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xac, 0x01,
	0x0a, 0x2d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x3c, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e,
	0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb5, 0x01, 0x0a,
	0x30, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x3f, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x79, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x79, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x12, 0x25,
	0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0x5a,
	0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x64, 0x63, 0x73, 0x61, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65,
	0x6e, 0x2f, 0x6f, 0x76, 0x73, 0x2f, 0x76, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ovs_v3_serviceschedule_proto_rawDescOnce sync.Once
	file_ovs_v3_serviceschedule_proto_rawDescData = file_ovs_v3_serviceschedule_proto_rawDesc
)

func file_ovs_v3_serviceschedule_proto_rawDescGZIP() []byte {
	file_ovs_v3_serviceschedule_proto_rawDescOnce.Do(func() {
		file_ovs_v3_serviceschedule_proto_rawDescData = protoimpl.X.CompressGZIP(file_ovs_v3_serviceschedule_proto_rawDescData)
	})
	return file_ovs_v3_serviceschedule_proto_rawDescData
}

var file_ovs_v3_serviceschedule_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_ovs_v3_serviceschedule_proto_goTypes = []any{
	(*CreateServiceScheduleRequest)(nil),                             // 0: ovs.v3.CreateServiceScheduleRequest
	(*CreateServiceScheduleResponse)(nil),                            // 1: ovs.v3.CreateServiceScheduleResponse
	(*GetServiceScheduleRequest)(nil),                                // 2: ovs.v3.GetServiceScheduleRequest
	(*GetServiceScheduleResponse)(nil),                               // 3: ovs.v3.GetServiceScheduleResponse
	(*GetServiceScheduleByPkRequest)(nil),                            // 4: ovs.v3.GetServiceScheduleByPkRequest
	(*GetServiceScheduleByPkResponse)(nil),                           // 5: ovs.v3.GetServiceScheduleByPkResponse
	(*GetServiceScheduleByUniversalServiceReferenceRequest)(nil),     // 6: ovs.v3.GetServiceScheduleByUniversalServiceReferenceRequest
	(*GetServiceScheduleByUniversalServiceReferenceResponse)(nil),    // 7: ovs.v3.GetServiceScheduleByUniversalServiceReferenceResponse
	(*GetServiceSchedulesRequest)(nil),                               // 8: ovs.v3.GetServiceSchedulesRequest
	(*GetServiceSchedulesResponse)(nil),                              // 9: ovs.v3.GetServiceSchedulesResponse
	(*UpdateServiceScheduleByUniversalServiceReferenceRequest)(nil),  // 10: ovs.v3.UpdateServiceScheduleByUniversalServiceReferenceRequest
	(*UpdateServiceScheduleByUniversalServiceReferenceResponse)(nil), // 11: ovs.v3.UpdateServiceScheduleByUniversalServiceReferenceResponse
	(*ServiceSchedule)(nil),                                          // 12: ovs.v3.ServiceSchedule
	(*ServiceScheduleD)(nil),                                         // 13: ovs.v3.ServiceScheduleD
	(*v1.GetRequest)(nil),                                            // 14: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),                                        // 15: common.v1.GetByIdRequest
	(*v1.CrUpdUser)(nil),                                             // 16: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                                             // 17: common.v1.CrUpdTime
}
var file_ovs_v3_serviceschedule_proto_depIdxs = []int32{
	12, // 0: ovs.v3.CreateServiceScheduleResponse.service_schedule:type_name -> ovs.v3.ServiceSchedule
	14, // 1: ovs.v3.GetServiceScheduleRequest.get_request:type_name -> common.v1.GetRequest
	12, // 2: ovs.v3.GetServiceScheduleResponse.service_schedule:type_name -> ovs.v3.ServiceSchedule
	15, // 3: ovs.v3.GetServiceScheduleByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	12, // 4: ovs.v3.GetServiceScheduleByPkResponse.service_schedule:type_name -> ovs.v3.ServiceSchedule
	12, // 5: ovs.v3.GetServiceScheduleByUniversalServiceReferenceResponse.service_schedule:type_name -> ovs.v3.ServiceSchedule
	12, // 6: ovs.v3.GetServiceSchedulesResponse.service_schedules:type_name -> ovs.v3.ServiceSchedule
	13, // 7: ovs.v3.ServiceSchedule.service_schedule_d:type_name -> ovs.v3.ServiceScheduleD
	16, // 8: ovs.v3.ServiceSchedule.cr_upd_user:type_name -> common.v1.CrUpdUser
	17, // 9: ovs.v3.ServiceSchedule.cr_upd_time:type_name -> common.v1.CrUpdTime
	0,  // 10: ovs.v3.ServiceScheduleService.CreateServiceSchedule:input_type -> ovs.v3.CreateServiceScheduleRequest
	8,  // 11: ovs.v3.ServiceScheduleService.GetServiceSchedules:input_type -> ovs.v3.GetServiceSchedulesRequest
	2,  // 12: ovs.v3.ServiceScheduleService.GetServiceSchedule:input_type -> ovs.v3.GetServiceScheduleRequest
	6,  // 13: ovs.v3.ServiceScheduleService.GetServiceScheduleByUniversalServiceReference:input_type -> ovs.v3.GetServiceScheduleByUniversalServiceReferenceRequest
	10, // 14: ovs.v3.ServiceScheduleService.UpdateServiceScheduleByUniversalServiceReference:input_type -> ovs.v3.UpdateServiceScheduleByUniversalServiceReferenceRequest
	4,  // 15: ovs.v3.ServiceScheduleService.GetServiceScheduleByPk:input_type -> ovs.v3.GetServiceScheduleByPkRequest
	1,  // 16: ovs.v3.ServiceScheduleService.CreateServiceSchedule:output_type -> ovs.v3.CreateServiceScheduleResponse
	9,  // 17: ovs.v3.ServiceScheduleService.GetServiceSchedules:output_type -> ovs.v3.GetServiceSchedulesResponse
	3,  // 18: ovs.v3.ServiceScheduleService.GetServiceSchedule:output_type -> ovs.v3.GetServiceScheduleResponse
	7,  // 19: ovs.v3.ServiceScheduleService.GetServiceScheduleByUniversalServiceReference:output_type -> ovs.v3.GetServiceScheduleByUniversalServiceReferenceResponse
	11, // 20: ovs.v3.ServiceScheduleService.UpdateServiceScheduleByUniversalServiceReference:output_type -> ovs.v3.UpdateServiceScheduleByUniversalServiceReferenceResponse
	5,  // 21: ovs.v3.ServiceScheduleService.GetServiceScheduleByPk:output_type -> ovs.v3.GetServiceScheduleByPkResponse
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_ovs_v3_serviceschedule_proto_init() }
func file_ovs_v3_serviceschedule_proto_init() {
	if File_ovs_v3_serviceschedule_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ovs_v3_serviceschedule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ovs_v3_serviceschedule_proto_goTypes,
		DependencyIndexes: file_ovs_v3_serviceschedule_proto_depIdxs,
		MessageInfos:      file_ovs_v3_serviceschedule_proto_msgTypes,
	}.Build()
	File_ovs_v3_serviceschedule_proto = out.File
	file_ovs_v3_serviceschedule_proto_rawDesc = nil
	file_ovs_v3_serviceschedule_proto_goTypes = nil
	file_ovs_v3_serviceschedule_proto_depIdxs = nil
}
