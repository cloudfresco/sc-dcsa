// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: ovs/v3/leg.proto

package v3

import (
	v1 "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateLegRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber                 int32  `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ModeOfTransport                string `protobuf:"bytes,2,opt,name=mode_of_transport,json=modeOfTransport,proto3" json:"mode_of_transport,omitempty"`
	VesselOperatorSmdgLinerCode    string `protobuf:"bytes,3,opt,name=vessel_operator_smdg_liner_code,json=vesselOperatorSmdgLinerCode,proto3" json:"vessel_operator_smdg_liner_code,omitempty"`
	VesselImoNumber                string `protobuf:"bytes,4,opt,name=vessel_imo_number,json=vesselImoNumber,proto3" json:"vessel_imo_number,omitempty"`
	VesselName                     string `protobuf:"bytes,5,opt,name=vessel_name,json=vesselName,proto3" json:"vessel_name,omitempty"`
	CarrierServiceName             string `protobuf:"bytes,6,opt,name=carrier_service_name,json=carrierServiceName,proto3" json:"carrier_service_name,omitempty"`
	UniversalServiceReference      string `protobuf:"bytes,7,opt,name=universal_service_reference,json=universalServiceReference,proto3" json:"universal_service_reference,omitempty"`
	CarrierServiceCode             string `protobuf:"bytes,8,opt,name=carrier_service_code,json=carrierServiceCode,proto3" json:"carrier_service_code,omitempty"`
	UniversalImportVoyageReference string `protobuf:"bytes,9,opt,name=universal_import_voyage_reference,json=universalImportVoyageReference,proto3" json:"universal_import_voyage_reference,omitempty"`
	UniversalExportVoyageReference string `protobuf:"bytes,10,opt,name=universal_export_voyage_reference,json=universalExportVoyageReference,proto3" json:"universal_export_voyage_reference,omitempty"`
	CarrierImportVoyageNumber      string `protobuf:"bytes,11,opt,name=carrier_import_voyage_number,json=carrierImportVoyageNumber,proto3" json:"carrier_import_voyage_number,omitempty"`
	CarrierExportVoyageNumber      string `protobuf:"bytes,12,opt,name=carrier_export_voyage_number,json=carrierExportVoyageNumber,proto3" json:"carrier_export_voyage_number,omitempty"`
	DepartureId                    uint32 `protobuf:"varint,13,opt,name=departure_id,json=departureId,proto3" json:"departure_id,omitempty"`
	ArrivalId                      uint32 `protobuf:"varint,14,opt,name=arrival_id,json=arrivalId,proto3" json:"arrival_id,omitempty"`
	PointToPointRoutingId          uint32 `protobuf:"varint,15,opt,name=point_to_point_routing_id,json=pointToPointRoutingId,proto3" json:"point_to_point_routing_id,omitempty"`
	UserId                         string `protobuf:"bytes,16,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                      string `protobuf:"bytes,17,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                      string `protobuf:"bytes,18,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateLegRequest) Reset() {
	*x = CreateLegRequest{}
	mi := &file_ovs_v3_leg_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLegRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLegRequest) ProtoMessage() {}

func (x *CreateLegRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLegRequest.ProtoReflect.Descriptor instead.
func (*CreateLegRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{0}
}

func (x *CreateLegRequest) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *CreateLegRequest) GetModeOfTransport() string {
	if x != nil {
		return x.ModeOfTransport
	}
	return ""
}

func (x *CreateLegRequest) GetVesselOperatorSmdgLinerCode() string {
	if x != nil {
		return x.VesselOperatorSmdgLinerCode
	}
	return ""
}

func (x *CreateLegRequest) GetVesselImoNumber() string {
	if x != nil {
		return x.VesselImoNumber
	}
	return ""
}

func (x *CreateLegRequest) GetVesselName() string {
	if x != nil {
		return x.VesselName
	}
	return ""
}

func (x *CreateLegRequest) GetCarrierServiceName() string {
	if x != nil {
		return x.CarrierServiceName
	}
	return ""
}

func (x *CreateLegRequest) GetUniversalServiceReference() string {
	if x != nil {
		return x.UniversalServiceReference
	}
	return ""
}

func (x *CreateLegRequest) GetCarrierServiceCode() string {
	if x != nil {
		return x.CarrierServiceCode
	}
	return ""
}

func (x *CreateLegRequest) GetUniversalImportVoyageReference() string {
	if x != nil {
		return x.UniversalImportVoyageReference
	}
	return ""
}

func (x *CreateLegRequest) GetUniversalExportVoyageReference() string {
	if x != nil {
		return x.UniversalExportVoyageReference
	}
	return ""
}

func (x *CreateLegRequest) GetCarrierImportVoyageNumber() string {
	if x != nil {
		return x.CarrierImportVoyageNumber
	}
	return ""
}

func (x *CreateLegRequest) GetCarrierExportVoyageNumber() string {
	if x != nil {
		return x.CarrierExportVoyageNumber
	}
	return ""
}

func (x *CreateLegRequest) GetDepartureId() uint32 {
	if x != nil {
		return x.DepartureId
	}
	return 0
}

func (x *CreateLegRequest) GetArrivalId() uint32 {
	if x != nil {
		return x.ArrivalId
	}
	return 0
}

func (x *CreateLegRequest) GetPointToPointRoutingId() uint32 {
	if x != nil {
		return x.PointToPointRoutingId
	}
	return 0
}

func (x *CreateLegRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateLegRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateLegRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateLegResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leg *Leg `protobuf:"bytes,1,opt,name=leg,proto3" json:"leg,omitempty"`
}

func (x *CreateLegResponse) Reset() {
	*x = CreateLegResponse{}
	mi := &file_ovs_v3_leg_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLegResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLegResponse) ProtoMessage() {}

func (x *CreateLegResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLegResponse.ProtoReflect.Descriptor instead.
func (*CreateLegResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{1}
}

func (x *CreateLegResponse) GetLeg() *Leg {
	if x != nil {
		return x.Leg
	}
	return nil
}

type GetLegsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Legs       []*Leg `protobuf:"bytes,1,rep,name=legs,proto3" json:"legs,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetLegsResponse) Reset() {
	*x = GetLegsResponse{}
	mi := &file_ovs_v3_leg_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLegsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLegsResponse) ProtoMessage() {}

func (x *GetLegsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLegsResponse.ProtoReflect.Descriptor instead.
func (*GetLegsResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{2}
}

func (x *GetLegsResponse) GetLegs() []*Leg {
	if x != nil {
		return x.Legs
	}
	return nil
}

func (x *GetLegsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetLegsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetLegsRequest) Reset() {
	*x = GetLegsRequest{}
	mi := &file_ovs_v3_leg_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLegsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLegsRequest) ProtoMessage() {}

func (x *GetLegsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLegsRequest.ProtoReflect.Descriptor instead.
func (*GetLegsRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{3}
}

func (x *GetLegsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetLegsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetLegsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetLegsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetLegRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetLegRequest) Reset() {
	*x = GetLegRequest{}
	mi := &file_ovs_v3_leg_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLegRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLegRequest) ProtoMessage() {}

func (x *GetLegRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLegRequest.ProtoReflect.Descriptor instead.
func (*GetLegRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{4}
}

func (x *GetLegRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetLegResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leg *Leg `protobuf:"bytes,1,opt,name=leg,proto3" json:"leg,omitempty"`
}

func (x *GetLegResponse) Reset() {
	*x = GetLegResponse{}
	mi := &file_ovs_v3_leg_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLegResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLegResponse) ProtoMessage() {}

func (x *GetLegResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLegResponse.ProtoReflect.Descriptor instead.
func (*GetLegResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{5}
}

func (x *GetLegResponse) GetLeg() *Leg {
	if x != nil {
		return x.Leg
	}
	return nil
}

type GetLegByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetLegByPkRequest) Reset() {
	*x = GetLegByPkRequest{}
	mi := &file_ovs_v3_leg_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLegByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLegByPkRequest) ProtoMessage() {}

func (x *GetLegByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLegByPkRequest.ProtoReflect.Descriptor instead.
func (*GetLegByPkRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{6}
}

func (x *GetLegByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetLegByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leg *Leg `protobuf:"bytes,1,opt,name=leg,proto3" json:"leg,omitempty"`
}

func (x *GetLegByPkResponse) Reset() {
	*x = GetLegByPkResponse{}
	mi := &file_ovs_v3_leg_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLegByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLegByPkResponse) ProtoMessage() {}

func (x *GetLegByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLegByPkResponse.ProtoReflect.Descriptor instead.
func (*GetLegByPkResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{7}
}

func (x *GetLegByPkResponse) GetLeg() *Leg {
	if x != nil {
		return x.Leg
	}
	return nil
}

type Leg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegD      *LegD         `protobuf:"bytes,1,opt,name=leg_d,json=legD,proto3" json:"leg_d,omitempty"`
	CrUpdUser *v1.CrUpdUser `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime *v1.CrUpdTime `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *Leg) Reset() {
	*x = Leg{}
	mi := &file_ovs_v3_leg_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Leg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Leg) ProtoMessage() {}

func (x *Leg) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Leg.ProtoReflect.Descriptor instead.
func (*Leg) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{8}
}

func (x *Leg) GetLegD() *LegD {
	if x != nil {
		return x.LegD
	}
	return nil
}

func (x *Leg) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Leg) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type LegD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                          []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                            string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	SequenceNumber                 int32  `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ModeOfTransport                string `protobuf:"bytes,5,opt,name=mode_of_transport,json=modeOfTransport,proto3" json:"mode_of_transport,omitempty"`
	VesselOperatorSmdgLinerCode    string `protobuf:"bytes,6,opt,name=vessel_operator_smdg_liner_code,json=vesselOperatorSmdgLinerCode,proto3" json:"vessel_operator_smdg_liner_code,omitempty"`
	VesselImoNumber                string `protobuf:"bytes,7,opt,name=vessel_imo_number,json=vesselImoNumber,proto3" json:"vessel_imo_number,omitempty"`
	VesselName                     string `protobuf:"bytes,8,opt,name=vessel_name,json=vesselName,proto3" json:"vessel_name,omitempty"`
	CarrierServiceName             string `protobuf:"bytes,9,opt,name=carrier_service_name,json=carrierServiceName,proto3" json:"carrier_service_name,omitempty"`
	UniversalServiceReference      string `protobuf:"bytes,10,opt,name=universal_service_reference,json=universalServiceReference,proto3" json:"universal_service_reference,omitempty"`
	CarrierServiceCode             string `protobuf:"bytes,11,opt,name=carrier_service_code,json=carrierServiceCode,proto3" json:"carrier_service_code,omitempty"`
	UniversalImportVoyageReference string `protobuf:"bytes,12,opt,name=universal_import_voyage_reference,json=universalImportVoyageReference,proto3" json:"universal_import_voyage_reference,omitempty"`
	UniversalExportVoyageReference string `protobuf:"bytes,13,opt,name=universal_export_voyage_reference,json=universalExportVoyageReference,proto3" json:"universal_export_voyage_reference,omitempty"`
	CarrierImportVoyageNumber      string `protobuf:"bytes,14,opt,name=carrier_import_voyage_number,json=carrierImportVoyageNumber,proto3" json:"carrier_import_voyage_number,omitempty"`
	CarrierExportVoyageNumber      string `protobuf:"bytes,15,opt,name=carrier_export_voyage_number,json=carrierExportVoyageNumber,proto3" json:"carrier_export_voyage_number,omitempty"`
	DepartureId                    uint32 `protobuf:"varint,16,opt,name=departure_id,json=departureId,proto3" json:"departure_id,omitempty"`
	ArrivalId                      uint32 `protobuf:"varint,17,opt,name=arrival_id,json=arrivalId,proto3" json:"arrival_id,omitempty"`
	PointToPointRoutingId          uint32 `protobuf:"varint,18,opt,name=point_to_point_routing_id,json=pointToPointRoutingId,proto3" json:"point_to_point_routing_id,omitempty"`
}

func (x *LegD) Reset() {
	*x = LegD{}
	mi := &file_ovs_v3_leg_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegD) ProtoMessage() {}

func (x *LegD) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegD.ProtoReflect.Descriptor instead.
func (*LegD) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{9}
}

func (x *LegD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LegD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *LegD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *LegD) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *LegD) GetModeOfTransport() string {
	if x != nil {
		return x.ModeOfTransport
	}
	return ""
}

func (x *LegD) GetVesselOperatorSmdgLinerCode() string {
	if x != nil {
		return x.VesselOperatorSmdgLinerCode
	}
	return ""
}

func (x *LegD) GetVesselImoNumber() string {
	if x != nil {
		return x.VesselImoNumber
	}
	return ""
}

func (x *LegD) GetVesselName() string {
	if x != nil {
		return x.VesselName
	}
	return ""
}

func (x *LegD) GetCarrierServiceName() string {
	if x != nil {
		return x.CarrierServiceName
	}
	return ""
}

func (x *LegD) GetUniversalServiceReference() string {
	if x != nil {
		return x.UniversalServiceReference
	}
	return ""
}

func (x *LegD) GetCarrierServiceCode() string {
	if x != nil {
		return x.CarrierServiceCode
	}
	return ""
}

func (x *LegD) GetUniversalImportVoyageReference() string {
	if x != nil {
		return x.UniversalImportVoyageReference
	}
	return ""
}

func (x *LegD) GetUniversalExportVoyageReference() string {
	if x != nil {
		return x.UniversalExportVoyageReference
	}
	return ""
}

func (x *LegD) GetCarrierImportVoyageNumber() string {
	if x != nil {
		return x.CarrierImportVoyageNumber
	}
	return ""
}

func (x *LegD) GetCarrierExportVoyageNumber() string {
	if x != nil {
		return x.CarrierExportVoyageNumber
	}
	return ""
}

func (x *LegD) GetDepartureId() uint32 {
	if x != nil {
		return x.DepartureId
	}
	return 0
}

func (x *LegD) GetArrivalId() uint32 {
	if x != nil {
		return x.ArrivalId
	}
	return 0
}

func (x *LegD) GetPointToPointRoutingId() uint32 {
	if x != nil {
		return x.PointToPointRoutingId
	}
	return 0
}

type CreatePointToPointRoutingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber    int32               `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	PlaceOfReceiptId  uint32              `protobuf:"varint,2,opt,name=place_of_receipt_id,json=placeOfReceiptId,proto3" json:"place_of_receipt_id,omitempty"`
	PlaceOfDeliveryId uint32              `protobuf:"varint,3,opt,name=place_of_delivery_id,json=placeOfDeliveryId,proto3" json:"place_of_delivery_id,omitempty"`
	UserId            string              `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail         string              `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId         string              `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Legs              []*CreateLegRequest `protobuf:"bytes,7,rep,name=legs,proto3" json:"legs,omitempty"`
}

func (x *CreatePointToPointRoutingRequest) Reset() {
	*x = CreatePointToPointRoutingRequest{}
	mi := &file_ovs_v3_leg_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePointToPointRoutingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePointToPointRoutingRequest) ProtoMessage() {}

func (x *CreatePointToPointRoutingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePointToPointRoutingRequest.ProtoReflect.Descriptor instead.
func (*CreatePointToPointRoutingRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{10}
}

func (x *CreatePointToPointRoutingRequest) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *CreatePointToPointRoutingRequest) GetPlaceOfReceiptId() uint32 {
	if x != nil {
		return x.PlaceOfReceiptId
	}
	return 0
}

func (x *CreatePointToPointRoutingRequest) GetPlaceOfDeliveryId() uint32 {
	if x != nil {
		return x.PlaceOfDeliveryId
	}
	return 0
}

func (x *CreatePointToPointRoutingRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePointToPointRoutingRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreatePointToPointRoutingRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreatePointToPointRoutingRequest) GetLegs() []*CreateLegRequest {
	if x != nil {
		return x.Legs
	}
	return nil
}

type CreatePointToPointRoutingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointToPointRouting *PointToPointRouting `protobuf:"bytes,1,opt,name=point_to_point_routing,json=pointToPointRouting,proto3" json:"point_to_point_routing,omitempty"`
}

func (x *CreatePointToPointRoutingResponse) Reset() {
	*x = CreatePointToPointRoutingResponse{}
	mi := &file_ovs_v3_leg_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePointToPointRoutingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePointToPointRoutingResponse) ProtoMessage() {}

func (x *CreatePointToPointRoutingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePointToPointRoutingResponse.ProtoReflect.Descriptor instead.
func (*CreatePointToPointRoutingResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{11}
}

func (x *CreatePointToPointRoutingResponse) GetPointToPointRouting() *PointToPointRouting {
	if x != nil {
		return x.PointToPointRouting
	}
	return nil
}

type GetPointToPointRoutingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointToPointRoutings []*PointToPointRouting `protobuf:"bytes,1,rep,name=point_to_point_routings,json=pointToPointRoutings,proto3" json:"point_to_point_routings,omitempty"`
	NextCursor           string                 `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetPointToPointRoutingsResponse) Reset() {
	*x = GetPointToPointRoutingsResponse{}
	mi := &file_ovs_v3_leg_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPointToPointRoutingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPointToPointRoutingsResponse) ProtoMessage() {}

func (x *GetPointToPointRoutingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPointToPointRoutingsResponse.ProtoReflect.Descriptor instead.
func (*GetPointToPointRoutingsResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{12}
}

func (x *GetPointToPointRoutingsResponse) GetPointToPointRoutings() []*PointToPointRouting {
	if x != nil {
		return x.PointToPointRoutings
	}
	return nil
}

func (x *GetPointToPointRoutingsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetPointToPointRoutingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetPointToPointRoutingsRequest) Reset() {
	*x = GetPointToPointRoutingsRequest{}
	mi := &file_ovs_v3_leg_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPointToPointRoutingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPointToPointRoutingsRequest) ProtoMessage() {}

func (x *GetPointToPointRoutingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPointToPointRoutingsRequest.ProtoReflect.Descriptor instead.
func (*GetPointToPointRoutingsRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{13}
}

func (x *GetPointToPointRoutingsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetPointToPointRoutingsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetPointToPointRoutingsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetPointToPointRoutingsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetPointToPointRoutingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *GetPointToPointRoutingRequest) Reset() {
	*x = GetPointToPointRoutingRequest{}
	mi := &file_ovs_v3_leg_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPointToPointRoutingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPointToPointRoutingRequest) ProtoMessage() {}

func (x *GetPointToPointRoutingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPointToPointRoutingRequest.ProtoReflect.Descriptor instead.
func (*GetPointToPointRoutingRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{14}
}

func (x *GetPointToPointRoutingRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type GetPointToPointRoutingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointToPointRouting *PointToPointRouting `protobuf:"bytes,1,opt,name=point_to_point_routing,json=pointToPointRouting,proto3" json:"point_to_point_routing,omitempty"`
}

func (x *GetPointToPointRoutingResponse) Reset() {
	*x = GetPointToPointRoutingResponse{}
	mi := &file_ovs_v3_leg_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPointToPointRoutingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPointToPointRoutingResponse) ProtoMessage() {}

func (x *GetPointToPointRoutingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPointToPointRoutingResponse.ProtoReflect.Descriptor instead.
func (*GetPointToPointRoutingResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{15}
}

func (x *GetPointToPointRoutingResponse) GetPointToPointRouting() *PointToPointRouting {
	if x != nil {
		return x.PointToPointRouting
	}
	return nil
}

type GetPointToPointRoutingByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetPointToPointRoutingByPkRequest) Reset() {
	*x = GetPointToPointRoutingByPkRequest{}
	mi := &file_ovs_v3_leg_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPointToPointRoutingByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPointToPointRoutingByPkRequest) ProtoMessage() {}

func (x *GetPointToPointRoutingByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPointToPointRoutingByPkRequest.ProtoReflect.Descriptor instead.
func (*GetPointToPointRoutingByPkRequest) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{16}
}

func (x *GetPointToPointRoutingByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetPointToPointRoutingByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointToPointRouting *PointToPointRouting `protobuf:"bytes,1,opt,name=point_to_point_routing,json=pointToPointRouting,proto3" json:"point_to_point_routing,omitempty"`
}

func (x *GetPointToPointRoutingByPkResponse) Reset() {
	*x = GetPointToPointRoutingByPkResponse{}
	mi := &file_ovs_v3_leg_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPointToPointRoutingByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPointToPointRoutingByPkResponse) ProtoMessage() {}

func (x *GetPointToPointRoutingByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPointToPointRoutingByPkResponse.ProtoReflect.Descriptor instead.
func (*GetPointToPointRoutingByPkResponse) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{17}
}

func (x *GetPointToPointRoutingByPkResponse) GetPointToPointRouting() *PointToPointRouting {
	if x != nil {
		return x.PointToPointRouting
	}
	return nil
}

type PointToPointRouting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointToPointRoutingD *PointToPointRoutingD `protobuf:"bytes,1,opt,name=point_to_point_routing_d,json=pointToPointRoutingD,proto3" json:"point_to_point_routing_d,omitempty"`
	CrUpdUser            *v1.CrUpdUser         `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime            *v1.CrUpdTime         `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
	Legs                 []*Leg                `protobuf:"bytes,4,rep,name=legs,proto3" json:"legs,omitempty"`
}

func (x *PointToPointRouting) Reset() {
	*x = PointToPointRouting{}
	mi := &file_ovs_v3_leg_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PointToPointRouting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointToPointRouting) ProtoMessage() {}

func (x *PointToPointRouting) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointToPointRouting.ProtoReflect.Descriptor instead.
func (*PointToPointRouting) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{18}
}

func (x *PointToPointRouting) GetPointToPointRoutingD() *PointToPointRoutingD {
	if x != nil {
		return x.PointToPointRoutingD
	}
	return nil
}

func (x *PointToPointRouting) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *PointToPointRouting) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

func (x *PointToPointRouting) GetLegs() []*Leg {
	if x != nil {
		return x.Legs
	}
	return nil
}

type PointToPointRoutingD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4             []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS               string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	SequenceNumber    int32  `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	PlaceOfReceiptId  uint32 `protobuf:"varint,5,opt,name=place_of_receipt_id,json=placeOfReceiptId,proto3" json:"place_of_receipt_id,omitempty"`
	PlaceOfDeliveryId uint32 `protobuf:"varint,6,opt,name=place_of_delivery_id,json=placeOfDeliveryId,proto3" json:"place_of_delivery_id,omitempty"`
}

func (x *PointToPointRoutingD) Reset() {
	*x = PointToPointRoutingD{}
	mi := &file_ovs_v3_leg_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PointToPointRoutingD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointToPointRoutingD) ProtoMessage() {}

func (x *PointToPointRoutingD) ProtoReflect() protoreflect.Message {
	mi := &file_ovs_v3_leg_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointToPointRoutingD.ProtoReflect.Descriptor instead.
func (*PointToPointRoutingD) Descriptor() ([]byte, []int) {
	return file_ovs_v3_leg_proto_rawDescGZIP(), []int{19}
}

func (x *PointToPointRoutingD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PointToPointRoutingD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *PointToPointRoutingD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *PointToPointRoutingD) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *PointToPointRoutingD) GetPlaceOfReceiptId() uint32 {
	if x != nil {
		return x.PlaceOfReceiptId
	}
	return 0
}

func (x *PointToPointRoutingD) GetPlaceOfDeliveryId() uint32 {
	if x != nil {
		return x.PlaceOfDeliveryId
	}
	return 0
}

var File_ovs_v3_leg_proto protoreflect.FileDescriptor

var file_ovs_v3_leg_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6f, 0x76, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x6c, 0x65, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x89, 0x07, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64,
	0x65, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x1f,
	0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x73, 0x6d, 0x64, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x6d, 0x64, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x6f,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6d, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x6f, 0x79, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x49,
	0x0a, 0x21, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f,
	0x79, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x6f, 0x79, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x19, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x32,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x6c, 0x65, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x65, 0x67, 0x52, 0x03, 0x6c,
	0x65, 0x67, 0x22, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x6c, 0x65, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x65, 0x67,
	0x52, 0x04, 0x6c, 0x65, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x47, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x6c, 0x65,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33,
	0x2e, 0x4c, 0x65, 0x67, 0x52, 0x03, 0x6c, 0x65, 0x67, 0x22, 0x59, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x67, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x42, 0x79,
	0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x6c, 0x65,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33,
	0x2e, 0x4c, 0x65, 0x67, 0x52, 0x03, 0x6c, 0x65, 0x67, 0x22, 0x94, 0x01, 0x0a, 0x03, 0x4c, 0x65,
	0x67, 0x12, 0x21, 0x0a, 0x05, 0x6c, 0x65, 0x67, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x65, 0x67, 0x44, 0x52, 0x04,
	0x6c, 0x65, 0x67, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72,
	0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xdf, 0x06, 0x0a, 0x04, 0x4c, 0x65, 0x67, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12,
	0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x53, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x76, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x6d, 0x64, 0x67, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x6d, 0x64, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x49, 0x6d, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1b,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49,
	0x0a, 0x21, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f,
	0x79, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x19, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x22, 0xb0, 0x02, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x65, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x04, 0x6c, 0x65, 0x67, 0x73, 0x22, 0x75, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x76, 0x73,
	0x2e, 0x76, 0x33, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x96, 0x01, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x17, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x14,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x95, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x57, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76,
	0x33, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x69, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x76,
	0x73, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54,
	0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xf8, 0x01,
	0x0a, 0x13, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x18, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x44, 0x52, 0x14, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55,
	0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x6c, 0x65, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x4c,
	0x65, 0x67, 0x52, 0x04, 0x6c, 0x65, 0x67, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x32, 0xc4, 0x05, 0x0a, 0x0a, 0x4c, 0x65, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x12,
	0x18, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6f, 0x76, 0x73, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x73, 0x12,
	0x16, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x12, 0x15, 0x2e, 0x6f, 0x76, 0x73,
	0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x67, 0x42, 0x79, 0x50, 0x6b, 0x12, 0x19, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x67, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x2e, 0x6f, 0x76,
	0x73, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x6f, 0x76,
	0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54,
	0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x50, 0x6b, 0x12, 0x29, 0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6f, 0x76, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x64, 0x63, 0x73, 0x61, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x6f,
	0x76, 0x73, 0x2f, 0x76, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ovs_v3_leg_proto_rawDescOnce sync.Once
	file_ovs_v3_leg_proto_rawDescData = file_ovs_v3_leg_proto_rawDesc
)

func file_ovs_v3_leg_proto_rawDescGZIP() []byte {
	file_ovs_v3_leg_proto_rawDescOnce.Do(func() {
		file_ovs_v3_leg_proto_rawDescData = protoimpl.X.CompressGZIP(file_ovs_v3_leg_proto_rawDescData)
	})
	return file_ovs_v3_leg_proto_rawDescData
}

var file_ovs_v3_leg_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_ovs_v3_leg_proto_goTypes = []any{
	(*CreateLegRequest)(nil),                   // 0: ovs.v3.CreateLegRequest
	(*CreateLegResponse)(nil),                  // 1: ovs.v3.CreateLegResponse
	(*GetLegsResponse)(nil),                    // 2: ovs.v3.GetLegsResponse
	(*GetLegsRequest)(nil),                     // 3: ovs.v3.GetLegsRequest
	(*GetLegRequest)(nil),                      // 4: ovs.v3.GetLegRequest
	(*GetLegResponse)(nil),                     // 5: ovs.v3.GetLegResponse
	(*GetLegByPkRequest)(nil),                  // 6: ovs.v3.GetLegByPkRequest
	(*GetLegByPkResponse)(nil),                 // 7: ovs.v3.GetLegByPkResponse
	(*Leg)(nil),                                // 8: ovs.v3.Leg
	(*LegD)(nil),                               // 9: ovs.v3.LegD
	(*CreatePointToPointRoutingRequest)(nil),   // 10: ovs.v3.CreatePointToPointRoutingRequest
	(*CreatePointToPointRoutingResponse)(nil),  // 11: ovs.v3.CreatePointToPointRoutingResponse
	(*GetPointToPointRoutingsResponse)(nil),    // 12: ovs.v3.GetPointToPointRoutingsResponse
	(*GetPointToPointRoutingsRequest)(nil),     // 13: ovs.v3.GetPointToPointRoutingsRequest
	(*GetPointToPointRoutingRequest)(nil),      // 14: ovs.v3.GetPointToPointRoutingRequest
	(*GetPointToPointRoutingResponse)(nil),     // 15: ovs.v3.GetPointToPointRoutingResponse
	(*GetPointToPointRoutingByPkRequest)(nil),  // 16: ovs.v3.GetPointToPointRoutingByPkRequest
	(*GetPointToPointRoutingByPkResponse)(nil), // 17: ovs.v3.GetPointToPointRoutingByPkResponse
	(*PointToPointRouting)(nil),                // 18: ovs.v3.PointToPointRouting
	(*PointToPointRoutingD)(nil),               // 19: ovs.v3.PointToPointRoutingD
	(*v1.GetRequest)(nil),                      // 20: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),                  // 21: common.v1.GetByIdRequest
	(*v1.CrUpdUser)(nil),                       // 22: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                       // 23: common.v1.CrUpdTime
}
var file_ovs_v3_leg_proto_depIdxs = []int32{
	8,  // 0: ovs.v3.CreateLegResponse.leg:type_name -> ovs.v3.Leg
	8,  // 1: ovs.v3.GetLegsResponse.legs:type_name -> ovs.v3.Leg
	20, // 2: ovs.v3.GetLegRequest.get_request:type_name -> common.v1.GetRequest
	8,  // 3: ovs.v3.GetLegResponse.leg:type_name -> ovs.v3.Leg
	21, // 4: ovs.v3.GetLegByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	8,  // 5: ovs.v3.GetLegByPkResponse.leg:type_name -> ovs.v3.Leg
	9,  // 6: ovs.v3.Leg.leg_d:type_name -> ovs.v3.LegD
	22, // 7: ovs.v3.Leg.cr_upd_user:type_name -> common.v1.CrUpdUser
	23, // 8: ovs.v3.Leg.cr_upd_time:type_name -> common.v1.CrUpdTime
	0,  // 9: ovs.v3.CreatePointToPointRoutingRequest.legs:type_name -> ovs.v3.CreateLegRequest
	18, // 10: ovs.v3.CreatePointToPointRoutingResponse.point_to_point_routing:type_name -> ovs.v3.PointToPointRouting
	18, // 11: ovs.v3.GetPointToPointRoutingsResponse.point_to_point_routings:type_name -> ovs.v3.PointToPointRouting
	20, // 12: ovs.v3.GetPointToPointRoutingRequest.get_request:type_name -> common.v1.GetRequest
	18, // 13: ovs.v3.GetPointToPointRoutingResponse.point_to_point_routing:type_name -> ovs.v3.PointToPointRouting
	21, // 14: ovs.v3.GetPointToPointRoutingByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	18, // 15: ovs.v3.GetPointToPointRoutingByPkResponse.point_to_point_routing:type_name -> ovs.v3.PointToPointRouting
	19, // 16: ovs.v3.PointToPointRouting.point_to_point_routing_d:type_name -> ovs.v3.PointToPointRoutingD
	22, // 17: ovs.v3.PointToPointRouting.cr_upd_user:type_name -> common.v1.CrUpdUser
	23, // 18: ovs.v3.PointToPointRouting.cr_upd_time:type_name -> common.v1.CrUpdTime
	8,  // 19: ovs.v3.PointToPointRouting.legs:type_name -> ovs.v3.Leg
	0,  // 20: ovs.v3.LegService.CreateLeg:input_type -> ovs.v3.CreateLegRequest
	3,  // 21: ovs.v3.LegService.GetLegs:input_type -> ovs.v3.GetLegsRequest
	4,  // 22: ovs.v3.LegService.GetLeg:input_type -> ovs.v3.GetLegRequest
	6,  // 23: ovs.v3.LegService.GetLegByPk:input_type -> ovs.v3.GetLegByPkRequest
	10, // 24: ovs.v3.LegService.CreatePointToPointRouting:input_type -> ovs.v3.CreatePointToPointRoutingRequest
	13, // 25: ovs.v3.LegService.GetPointToPointRoutings:input_type -> ovs.v3.GetPointToPointRoutingsRequest
	14, // 26: ovs.v3.LegService.GetPointToPointRouting:input_type -> ovs.v3.GetPointToPointRoutingRequest
	16, // 27: ovs.v3.LegService.GetPointToPointRoutingByPk:input_type -> ovs.v3.GetPointToPointRoutingByPkRequest
	1,  // 28: ovs.v3.LegService.CreateLeg:output_type -> ovs.v3.CreateLegResponse
	2,  // 29: ovs.v3.LegService.GetLegs:output_type -> ovs.v3.GetLegsResponse
	5,  // 30: ovs.v3.LegService.GetLeg:output_type -> ovs.v3.GetLegResponse
	7,  // 31: ovs.v3.LegService.GetLegByPk:output_type -> ovs.v3.GetLegByPkResponse
	11, // 32: ovs.v3.LegService.CreatePointToPointRouting:output_type -> ovs.v3.CreatePointToPointRoutingResponse
	12, // 33: ovs.v3.LegService.GetPointToPointRoutings:output_type -> ovs.v3.GetPointToPointRoutingsResponse
	15, // 34: ovs.v3.LegService.GetPointToPointRouting:output_type -> ovs.v3.GetPointToPointRoutingResponse
	17, // 35: ovs.v3.LegService.GetPointToPointRoutingByPk:output_type -> ovs.v3.GetPointToPointRoutingByPkResponse
	28, // [28:36] is the sub-list for method output_type
	20, // [20:28] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_ovs_v3_leg_proto_init() }
func file_ovs_v3_leg_proto_init() {
	if File_ovs_v3_leg_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ovs_v3_leg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ovs_v3_leg_proto_goTypes,
		DependencyIndexes: file_ovs_v3_leg_proto_depIdxs,
		MessageInfos:      file_ovs_v3_leg_proto_msgTypes,
	}.Build()
	File_ovs_v3_leg_proto = out.File
	file_ovs_v3_leg_proto_rawDesc = nil
	file_ovs_v3_leg_proto_goTypes = nil
	file_ovs_v3_leg_proto_depIdxs = nil
}
