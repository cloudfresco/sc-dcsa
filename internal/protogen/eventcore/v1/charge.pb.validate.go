// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: eventcore/v1/charge.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateChargeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChargeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChargeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChargeRequestMultiError, or nil if none found.
func (m *CreateChargeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChargeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransportDocumentId

	// no validation rules for ShipmentId

	// no validation rules for ChargeType

	// no validation rules for CurrencyAmount

	// no validation rules for CurrencyCode

	// no validation rules for PaymentTermCode

	// no validation rules for CalculationBasis

	// no validation rules for UnitPrice

	// no validation rules for Quantity

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateChargeRequestMultiError(errors)
	}

	return nil
}

// CreateChargeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateChargeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateChargeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChargeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChargeRequestMultiError) AllErrors() []error { return m }

// CreateChargeRequestValidationError is the validation error returned by
// CreateChargeRequest.Validate if the designated constraints aren't met.
type CreateChargeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChargeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChargeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChargeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChargeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChargeRequestValidationError) ErrorName() string {
	return "CreateChargeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChargeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChargeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChargeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChargeRequestValidationError{}

// Validate checks the field values on CreateChargeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChargeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChargeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChargeResponseMultiError, or nil if none found.
func (m *CreateChargeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChargeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCharge()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateChargeResponseValidationError{
					field:  "Charge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateChargeResponseValidationError{
					field:  "Charge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCharge()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateChargeResponseValidationError{
				field:  "Charge",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateChargeResponseMultiError(errors)
	}

	return nil
}

// CreateChargeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateChargeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateChargeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChargeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChargeResponseMultiError) AllErrors() []error { return m }

// CreateChargeResponseValidationError is the validation error returned by
// CreateChargeResponse.Validate if the designated constraints aren't met.
type CreateChargeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChargeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChargeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChargeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChargeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChargeResponseValidationError) ErrorName() string {
	return "CreateChargeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChargeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChargeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChargeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChargeResponseValidationError{}

// Validate checks the field values on FetchChargesByShipmentIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchChargesByShipmentIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchChargesByShipmentIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FetchChargesByShipmentIdRequestMultiError, or nil if none found.
func (m *FetchChargesByShipmentIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchChargesByShipmentIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShipmentId

	// no validation rules for UserId

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FetchChargesByShipmentIdRequestMultiError(errors)
	}

	return nil
}

// FetchChargesByShipmentIdRequestMultiError is an error wrapping multiple
// validation errors returned by FetchChargesByShipmentIdRequest.ValidateAll()
// if the designated constraints aren't met.
type FetchChargesByShipmentIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchChargesByShipmentIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchChargesByShipmentIdRequestMultiError) AllErrors() []error { return m }

// FetchChargesByShipmentIdRequestValidationError is the validation error
// returned by FetchChargesByShipmentIdRequest.Validate if the designated
// constraints aren't met.
type FetchChargesByShipmentIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchChargesByShipmentIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchChargesByShipmentIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchChargesByShipmentIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchChargesByShipmentIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchChargesByShipmentIdRequestValidationError) ErrorName() string {
	return "FetchChargesByShipmentIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchChargesByShipmentIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchChargesByShipmentIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchChargesByShipmentIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchChargesByShipmentIdRequestValidationError{}

// Validate checks the field values on FetchChargesByShipmentIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FetchChargesByShipmentIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchChargesByShipmentIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FetchChargesByShipmentIdResponseMultiError, or nil if none found.
func (m *FetchChargesByShipmentIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchChargesByShipmentIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCharges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchChargesByShipmentIdResponseValidationError{
						field:  fmt.Sprintf("Charges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchChargesByShipmentIdResponseValidationError{
						field:  fmt.Sprintf("Charges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchChargesByShipmentIdResponseValidationError{
					field:  fmt.Sprintf("Charges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return FetchChargesByShipmentIdResponseMultiError(errors)
	}

	return nil
}

// FetchChargesByShipmentIdResponseMultiError is an error wrapping multiple
// validation errors returned by
// FetchChargesByShipmentIdResponse.ValidateAll() if the designated
// constraints aren't met.
type FetchChargesByShipmentIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchChargesByShipmentIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchChargesByShipmentIdResponseMultiError) AllErrors() []error { return m }

// FetchChargesByShipmentIdResponseValidationError is the validation error
// returned by FetchChargesByShipmentIdResponse.Validate if the designated
// constraints aren't met.
type FetchChargesByShipmentIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchChargesByShipmentIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchChargesByShipmentIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchChargesByShipmentIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchChargesByShipmentIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchChargesByShipmentIdResponseValidationError) ErrorName() string {
	return "FetchChargesByShipmentIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchChargesByShipmentIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchChargesByShipmentIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchChargesByShipmentIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchChargesByShipmentIdResponseValidationError{}

// Validate checks the field values on FetchChargesByTransportDocumentIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FetchChargesByTransportDocumentIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FetchChargesByTransportDocumentIdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// FetchChargesByTransportDocumentIdRequestMultiError, or nil if none found.
func (m *FetchChargesByTransportDocumentIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchChargesByTransportDocumentIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransportDocumentId

	// no validation rules for UserId

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FetchChargesByTransportDocumentIdRequestMultiError(errors)
	}

	return nil
}

// FetchChargesByTransportDocumentIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// FetchChargesByTransportDocumentIdRequest.ValidateAll() if the designated
// constraints aren't met.
type FetchChargesByTransportDocumentIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchChargesByTransportDocumentIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchChargesByTransportDocumentIdRequestMultiError) AllErrors() []error { return m }

// FetchChargesByTransportDocumentIdRequestValidationError is the validation
// error returned by FetchChargesByTransportDocumentIdRequest.Validate if the
// designated constraints aren't met.
type FetchChargesByTransportDocumentIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchChargesByTransportDocumentIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchChargesByTransportDocumentIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchChargesByTransportDocumentIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchChargesByTransportDocumentIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchChargesByTransportDocumentIdRequestValidationError) ErrorName() string {
	return "FetchChargesByTransportDocumentIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchChargesByTransportDocumentIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchChargesByTransportDocumentIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchChargesByTransportDocumentIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchChargesByTransportDocumentIdRequestValidationError{}

// Validate checks the field values on
// FetchChargesByTransportDocumentIdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FetchChargesByTransportDocumentIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FetchChargesByTransportDocumentIdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// FetchChargesByTransportDocumentIdResponseMultiError, or nil if none found.
func (m *FetchChargesByTransportDocumentIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchChargesByTransportDocumentIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCharges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchChargesByTransportDocumentIdResponseValidationError{
						field:  fmt.Sprintf("Charges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchChargesByTransportDocumentIdResponseValidationError{
						field:  fmt.Sprintf("Charges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchChargesByTransportDocumentIdResponseValidationError{
					field:  fmt.Sprintf("Charges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return FetchChargesByTransportDocumentIdResponseMultiError(errors)
	}

	return nil
}

// FetchChargesByTransportDocumentIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// FetchChargesByTransportDocumentIdResponse.ValidateAll() if the designated
// constraints aren't met.
type FetchChargesByTransportDocumentIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchChargesByTransportDocumentIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchChargesByTransportDocumentIdResponseMultiError) AllErrors() []error { return m }

// FetchChargesByTransportDocumentIdResponseValidationError is the validation
// error returned by FetchChargesByTransportDocumentIdResponse.Validate if the
// designated constraints aren't met.
type FetchChargesByTransportDocumentIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchChargesByTransportDocumentIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchChargesByTransportDocumentIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchChargesByTransportDocumentIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchChargesByTransportDocumentIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchChargesByTransportDocumentIdResponseValidationError) ErrorName() string {
	return "FetchChargesByTransportDocumentIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchChargesByTransportDocumentIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchChargesByTransportDocumentIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchChargesByTransportDocumentIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchChargesByTransportDocumentIdResponseValidationError{}

// Validate checks the field values on Charge with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Charge) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Charge with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChargeMultiError, or nil if none found.
func (m *Charge) ValidateAll() error {
	return m.validate(true)
}

func (m *Charge) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChargeD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChargeValidationError{
					field:  "ChargeD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChargeValidationError{
					field:  "ChargeD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChargeD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChargeValidationError{
				field:  "ChargeD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChargeValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChargeValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChargeValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChargeValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChargeValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChargeValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChargeMultiError(errors)
	}

	return nil
}

// ChargeMultiError is an error wrapping multiple validation errors returned by
// Charge.ValidateAll() if the designated constraints aren't met.
type ChargeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChargeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChargeMultiError) AllErrors() []error { return m }

// ChargeValidationError is the validation error returned by Charge.Validate if
// the designated constraints aren't met.
type ChargeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChargeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChargeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChargeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChargeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChargeValidationError) ErrorName() string { return "ChargeValidationError" }

// Error satisfies the builtin error interface
func (e ChargeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChargeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChargeValidationError{}

// Validate checks the field values on ChargeD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChargeD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChargeD with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChargeDMultiError, or nil if none found.
func (m *ChargeD) ValidateAll() error {
	return m.validate(true)
}

func (m *ChargeD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for TransportDocumentId

	// no validation rules for ShipmentId

	// no validation rules for ChargeType

	// no validation rules for CurrencyAmount

	// no validation rules for CurrencyCode

	// no validation rules for PaymentTermCode

	// no validation rules for CalculationBasis

	// no validation rules for UnitPrice

	// no validation rules for Quantity

	if len(errors) > 0 {
		return ChargeDMultiError(errors)
	}

	return nil
}

// ChargeDMultiError is an error wrapping multiple validation errors returned
// by ChargeD.ValidateAll() if the designated constraints aren't met.
type ChargeDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChargeDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChargeDMultiError) AllErrors() []error { return m }

// ChargeDValidationError is the validation error returned by ChargeD.Validate
// if the designated constraints aren't met.
type ChargeDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChargeDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChargeDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChargeDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChargeDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChargeDValidationError) ErrorName() string { return "ChargeDValidationError" }

// Error satisfies the builtin error interface
func (e ChargeDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChargeD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChargeDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChargeDValidationError{}
