// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: eventcore/v1/voyage.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VoyageService_CreateVoyage_FullMethodName                                    = "/eventcore.v1.VoyageService/CreateVoyage"
	VoyageService_GetVoyages_FullMethodName                                      = "/eventcore.v1.VoyageService/GetVoyages"
	VoyageService_FindCarrierVoyageNumbersByTransportDocumentRef_FullMethodName  = "/eventcore.v1.VoyageService/FindCarrierVoyageNumbersByTransportDocumentRef"
	VoyageService_FindByCarrierVoyageNumberAndServiceId_FullMethodName           = "/eventcore.v1.VoyageService/FindByCarrierVoyageNumberAndServiceId"
	VoyageService_FindByCarrierVoyageNumber_FullMethodName                       = "/eventcore.v1.VoyageService/FindByCarrierVoyageNumber"
	VoyageService_FindCarrierVoyageNumbersByCarrierBookingRef_FullMethodName     = "/eventcore.v1.VoyageService/FindCarrierVoyageNumbersByCarrierBookingRef"
	VoyageService_FindCarrierVoyageNumbersByShippingInstructionId_FullMethodName = "/eventcore.v1.VoyageService/FindCarrierVoyageNumbersByShippingInstructionId"
)

// VoyageServiceClient is the client API for VoyageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The VoyageService service definition.
type VoyageServiceClient interface {
	CreateVoyage(ctx context.Context, in *CreateVoyageRequest, opts ...grpc.CallOption) (*CreateVoyageResponse, error)
	GetVoyages(ctx context.Context, in *GetVoyagesRequest, opts ...grpc.CallOption) (*GetVoyagesResponse, error)
	FindCarrierVoyageNumbersByTransportDocumentRef(ctx context.Context, in *FindCarrierVoyageNumbersByTransportDocumentRefRequest, opts ...grpc.CallOption) (*FindCarrierVoyageNumbersByTransportDocumentRefResponse, error)
	FindByCarrierVoyageNumberAndServiceId(ctx context.Context, in *FindByCarrierVoyageNumberAndServiceIdRequest, opts ...grpc.CallOption) (*FindByCarrierVoyageNumberAndServiceIdResponse, error)
	FindByCarrierVoyageNumber(ctx context.Context, in *FindByCarrierVoyageNumberRequest, opts ...grpc.CallOption) (*FindByCarrierVoyageNumberResponse, error)
	FindCarrierVoyageNumbersByCarrierBookingRef(ctx context.Context, in *FindCarrierVoyageNumbersByCarrierBookingRefRequest, opts ...grpc.CallOption) (*FindCarrierVoyageNumbersByCarrierBookingRefResponse, error)
	FindCarrierVoyageNumbersByShippingInstructionId(ctx context.Context, in *FindCarrierVoyageNumbersByShippingInstructionIdRequest, opts ...grpc.CallOption) (*FindCarrierVoyageNumbersByShippingInstructionIdResponse, error)
}

type voyageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoyageServiceClient(cc grpc.ClientConnInterface) VoyageServiceClient {
	return &voyageServiceClient{cc}
}

func (c *voyageServiceClient) CreateVoyage(ctx context.Context, in *CreateVoyageRequest, opts ...grpc.CallOption) (*CreateVoyageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVoyageResponse)
	err := c.cc.Invoke(ctx, VoyageService_CreateVoyage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voyageServiceClient) GetVoyages(ctx context.Context, in *GetVoyagesRequest, opts ...grpc.CallOption) (*GetVoyagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVoyagesResponse)
	err := c.cc.Invoke(ctx, VoyageService_GetVoyages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voyageServiceClient) FindCarrierVoyageNumbersByTransportDocumentRef(ctx context.Context, in *FindCarrierVoyageNumbersByTransportDocumentRefRequest, opts ...grpc.CallOption) (*FindCarrierVoyageNumbersByTransportDocumentRefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindCarrierVoyageNumbersByTransportDocumentRefResponse)
	err := c.cc.Invoke(ctx, VoyageService_FindCarrierVoyageNumbersByTransportDocumentRef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voyageServiceClient) FindByCarrierVoyageNumberAndServiceId(ctx context.Context, in *FindByCarrierVoyageNumberAndServiceIdRequest, opts ...grpc.CallOption) (*FindByCarrierVoyageNumberAndServiceIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByCarrierVoyageNumberAndServiceIdResponse)
	err := c.cc.Invoke(ctx, VoyageService_FindByCarrierVoyageNumberAndServiceId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voyageServiceClient) FindByCarrierVoyageNumber(ctx context.Context, in *FindByCarrierVoyageNumberRequest, opts ...grpc.CallOption) (*FindByCarrierVoyageNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByCarrierVoyageNumberResponse)
	err := c.cc.Invoke(ctx, VoyageService_FindByCarrierVoyageNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voyageServiceClient) FindCarrierVoyageNumbersByCarrierBookingRef(ctx context.Context, in *FindCarrierVoyageNumbersByCarrierBookingRefRequest, opts ...grpc.CallOption) (*FindCarrierVoyageNumbersByCarrierBookingRefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindCarrierVoyageNumbersByCarrierBookingRefResponse)
	err := c.cc.Invoke(ctx, VoyageService_FindCarrierVoyageNumbersByCarrierBookingRef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voyageServiceClient) FindCarrierVoyageNumbersByShippingInstructionId(ctx context.Context, in *FindCarrierVoyageNumbersByShippingInstructionIdRequest, opts ...grpc.CallOption) (*FindCarrierVoyageNumbersByShippingInstructionIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindCarrierVoyageNumbersByShippingInstructionIdResponse)
	err := c.cc.Invoke(ctx, VoyageService_FindCarrierVoyageNumbersByShippingInstructionId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoyageServiceServer is the server API for VoyageService service.
// All implementations must embed UnimplementedVoyageServiceServer
// for forward compatibility.
//
// The VoyageService service definition.
type VoyageServiceServer interface {
	CreateVoyage(context.Context, *CreateVoyageRequest) (*CreateVoyageResponse, error)
	GetVoyages(context.Context, *GetVoyagesRequest) (*GetVoyagesResponse, error)
	FindCarrierVoyageNumbersByTransportDocumentRef(context.Context, *FindCarrierVoyageNumbersByTransportDocumentRefRequest) (*FindCarrierVoyageNumbersByTransportDocumentRefResponse, error)
	FindByCarrierVoyageNumberAndServiceId(context.Context, *FindByCarrierVoyageNumberAndServiceIdRequest) (*FindByCarrierVoyageNumberAndServiceIdResponse, error)
	FindByCarrierVoyageNumber(context.Context, *FindByCarrierVoyageNumberRequest) (*FindByCarrierVoyageNumberResponse, error)
	FindCarrierVoyageNumbersByCarrierBookingRef(context.Context, *FindCarrierVoyageNumbersByCarrierBookingRefRequest) (*FindCarrierVoyageNumbersByCarrierBookingRefResponse, error)
	FindCarrierVoyageNumbersByShippingInstructionId(context.Context, *FindCarrierVoyageNumbersByShippingInstructionIdRequest) (*FindCarrierVoyageNumbersByShippingInstructionIdResponse, error)
	mustEmbedUnimplementedVoyageServiceServer()
}

// UnimplementedVoyageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVoyageServiceServer struct{}

func (UnimplementedVoyageServiceServer) CreateVoyage(context.Context, *CreateVoyageRequest) (*CreateVoyageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVoyage not implemented")
}
func (UnimplementedVoyageServiceServer) GetVoyages(context.Context, *GetVoyagesRequest) (*GetVoyagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoyages not implemented")
}
func (UnimplementedVoyageServiceServer) FindCarrierVoyageNumbersByTransportDocumentRef(context.Context, *FindCarrierVoyageNumbersByTransportDocumentRefRequest) (*FindCarrierVoyageNumbersByTransportDocumentRefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCarrierVoyageNumbersByTransportDocumentRef not implemented")
}
func (UnimplementedVoyageServiceServer) FindByCarrierVoyageNumberAndServiceId(context.Context, *FindByCarrierVoyageNumberAndServiceIdRequest) (*FindByCarrierVoyageNumberAndServiceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCarrierVoyageNumberAndServiceId not implemented")
}
func (UnimplementedVoyageServiceServer) FindByCarrierVoyageNumber(context.Context, *FindByCarrierVoyageNumberRequest) (*FindByCarrierVoyageNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCarrierVoyageNumber not implemented")
}
func (UnimplementedVoyageServiceServer) FindCarrierVoyageNumbersByCarrierBookingRef(context.Context, *FindCarrierVoyageNumbersByCarrierBookingRefRequest) (*FindCarrierVoyageNumbersByCarrierBookingRefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCarrierVoyageNumbersByCarrierBookingRef not implemented")
}
func (UnimplementedVoyageServiceServer) FindCarrierVoyageNumbersByShippingInstructionId(context.Context, *FindCarrierVoyageNumbersByShippingInstructionIdRequest) (*FindCarrierVoyageNumbersByShippingInstructionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCarrierVoyageNumbersByShippingInstructionId not implemented")
}
func (UnimplementedVoyageServiceServer) mustEmbedUnimplementedVoyageServiceServer() {}
func (UnimplementedVoyageServiceServer) testEmbeddedByValue()                       {}

// UnsafeVoyageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoyageServiceServer will
// result in compilation errors.
type UnsafeVoyageServiceServer interface {
	mustEmbedUnimplementedVoyageServiceServer()
}

func RegisterVoyageServiceServer(s grpc.ServiceRegistrar, srv VoyageServiceServer) {
	// If the following call pancis, it indicates UnimplementedVoyageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VoyageService_ServiceDesc, srv)
}

func _VoyageService_CreateVoyage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoyageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoyageServiceServer).CreateVoyage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoyageService_CreateVoyage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoyageServiceServer).CreateVoyage(ctx, req.(*CreateVoyageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoyageService_GetVoyages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoyagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoyageServiceServer).GetVoyages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoyageService_GetVoyages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoyageServiceServer).GetVoyages(ctx, req.(*GetVoyagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoyageService_FindCarrierVoyageNumbersByTransportDocumentRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCarrierVoyageNumbersByTransportDocumentRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoyageServiceServer).FindCarrierVoyageNumbersByTransportDocumentRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoyageService_FindCarrierVoyageNumbersByTransportDocumentRef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoyageServiceServer).FindCarrierVoyageNumbersByTransportDocumentRef(ctx, req.(*FindCarrierVoyageNumbersByTransportDocumentRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoyageService_FindByCarrierVoyageNumberAndServiceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByCarrierVoyageNumberAndServiceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoyageServiceServer).FindByCarrierVoyageNumberAndServiceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoyageService_FindByCarrierVoyageNumberAndServiceId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoyageServiceServer).FindByCarrierVoyageNumberAndServiceId(ctx, req.(*FindByCarrierVoyageNumberAndServiceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoyageService_FindByCarrierVoyageNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByCarrierVoyageNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoyageServiceServer).FindByCarrierVoyageNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoyageService_FindByCarrierVoyageNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoyageServiceServer).FindByCarrierVoyageNumber(ctx, req.(*FindByCarrierVoyageNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoyageService_FindCarrierVoyageNumbersByCarrierBookingRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCarrierVoyageNumbersByCarrierBookingRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoyageServiceServer).FindCarrierVoyageNumbersByCarrierBookingRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoyageService_FindCarrierVoyageNumbersByCarrierBookingRef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoyageServiceServer).FindCarrierVoyageNumbersByCarrierBookingRef(ctx, req.(*FindCarrierVoyageNumbersByCarrierBookingRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoyageService_FindCarrierVoyageNumbersByShippingInstructionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCarrierVoyageNumbersByShippingInstructionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoyageServiceServer).FindCarrierVoyageNumbersByShippingInstructionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoyageService_FindCarrierVoyageNumbersByShippingInstructionId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoyageServiceServer).FindCarrierVoyageNumbersByShippingInstructionId(ctx, req.(*FindCarrierVoyageNumbersByShippingInstructionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VoyageService_ServiceDesc is the grpc.ServiceDesc for VoyageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoyageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventcore.v1.VoyageService",
	HandlerType: (*VoyageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVoyage",
			Handler:    _VoyageService_CreateVoyage_Handler,
		},
		{
			MethodName: "GetVoyages",
			Handler:    _VoyageService_GetVoyages_Handler,
		},
		{
			MethodName: "FindCarrierVoyageNumbersByTransportDocumentRef",
			Handler:    _VoyageService_FindCarrierVoyageNumbersByTransportDocumentRef_Handler,
		},
		{
			MethodName: "FindByCarrierVoyageNumberAndServiceId",
			Handler:    _VoyageService_FindByCarrierVoyageNumberAndServiceId_Handler,
		},
		{
			MethodName: "FindByCarrierVoyageNumber",
			Handler:    _VoyageService_FindByCarrierVoyageNumber_Handler,
		},
		{
			MethodName: "FindCarrierVoyageNumbersByCarrierBookingRef",
			Handler:    _VoyageService_FindCarrierVoyageNumbersByCarrierBookingRef_Handler,
		},
		{
			MethodName: "FindCarrierVoyageNumbersByShippingInstructionId",
			Handler:    _VoyageService_FindCarrierVoyageNumbersByShippingInstructionId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eventcore/v1/voyage.proto",
}
