// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: eventcore/v1/utilizedtransportequipment.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UtilizedTransportEquipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UtilizedTransportEquipmentD *UtilizedTransportEquipmentD `protobuf:"bytes,1,opt,name=utilized_transport_equipment_d,json=utilizedTransportEquipmentD,proto3" json:"utilized_transport_equipment_d,omitempty"`
	CrUpdUser                   *v1.CrUpdUser                `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime                   *v1.CrUpdTime                `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
	Equipment                   *Equipment                   `protobuf:"bytes,4,opt,name=equipment,proto3" json:"equipment,omitempty"`
}

func (x *UtilizedTransportEquipment) Reset() {
	*x = UtilizedTransportEquipment{}
	mi := &file_eventcore_v1_utilizedtransportequipment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UtilizedTransportEquipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtilizedTransportEquipment) ProtoMessage() {}

func (x *UtilizedTransportEquipment) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_utilizedtransportequipment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtilizedTransportEquipment.ProtoReflect.Descriptor instead.
func (*UtilizedTransportEquipment) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_utilizedtransportequipment_proto_rawDescGZIP(), []int{0}
}

func (x *UtilizedTransportEquipment) GetUtilizedTransportEquipmentD() *UtilizedTransportEquipmentD {
	if x != nil {
		return x.UtilizedTransportEquipmentD
	}
	return nil
}

func (x *UtilizedTransportEquipment) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *UtilizedTransportEquipment) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

func (x *UtilizedTransportEquipment) GetEquipment() *Equipment {
	if x != nil {
		return x.Equipment
	}
	return nil
}

type UtilizedTransportEquipmentD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                  string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	EquipmentReference   string  `protobuf:"bytes,4,opt,name=equipment_reference,json=equipmentReference,proto3" json:"equipment_reference,omitempty"`
	CargoGrossWeight     float64 `protobuf:"fixed64,5,opt,name=cargo_gross_weight,json=cargoGrossWeight,proto3" json:"cargo_gross_weight,omitempty"`
	CargoGrossWeightUnit string  `protobuf:"bytes,6,opt,name=cargo_gross_weight_unit,json=cargoGrossWeightUnit,proto3" json:"cargo_gross_weight_unit,omitempty"`
	IsShipperOwned       bool    `protobuf:"varint,7,opt,name=is_shipper_owned,json=isShipperOwned,proto3" json:"is_shipper_owned,omitempty"`
}

func (x *UtilizedTransportEquipmentD) Reset() {
	*x = UtilizedTransportEquipmentD{}
	mi := &file_eventcore_v1_utilizedtransportequipment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UtilizedTransportEquipmentD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtilizedTransportEquipmentD) ProtoMessage() {}

func (x *UtilizedTransportEquipmentD) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_utilizedtransportequipment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtilizedTransportEquipmentD.ProtoReflect.Descriptor instead.
func (*UtilizedTransportEquipmentD) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_utilizedtransportequipment_proto_rawDescGZIP(), []int{1}
}

func (x *UtilizedTransportEquipmentD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UtilizedTransportEquipmentD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *UtilizedTransportEquipmentD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *UtilizedTransportEquipmentD) GetEquipmentReference() string {
	if x != nil {
		return x.EquipmentReference
	}
	return ""
}

func (x *UtilizedTransportEquipmentD) GetCargoGrossWeight() float64 {
	if x != nil {
		return x.CargoGrossWeight
	}
	return 0
}

func (x *UtilizedTransportEquipmentD) GetCargoGrossWeightUnit() string {
	if x != nil {
		return x.CargoGrossWeightUnit
	}
	return ""
}

func (x *UtilizedTransportEquipmentD) GetIsShipperOwned() bool {
	if x != nil {
		return x.IsShipperOwned
	}
	return false
}

type CreateUtilizedTransportEquipmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipmentReference   string                  `protobuf:"bytes,1,opt,name=equipment_reference,json=equipmentReference,proto3" json:"equipment_reference,omitempty"`
	CargoGrossWeight     float64                 `protobuf:"fixed64,2,opt,name=cargo_gross_weight,json=cargoGrossWeight,proto3" json:"cargo_gross_weight,omitempty"`
	CargoGrossWeightUnit string                  `protobuf:"bytes,3,opt,name=cargo_gross_weight_unit,json=cargoGrossWeightUnit,proto3" json:"cargo_gross_weight_unit,omitempty"`
	IsShipperOwned       bool                    `protobuf:"varint,4,opt,name=is_shipper_owned,json=isShipperOwned,proto3" json:"is_shipper_owned,omitempty"`
	UserId               string                  `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail            string                  `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId            string                  `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Equipment            *CreateEquipmentRequest `protobuf:"bytes,8,opt,name=equipment,proto3" json:"equipment,omitempty"`
}

func (x *CreateUtilizedTransportEquipmentRequest) Reset() {
	*x = CreateUtilizedTransportEquipmentRequest{}
	mi := &file_eventcore_v1_utilizedtransportequipment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUtilizedTransportEquipmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUtilizedTransportEquipmentRequest) ProtoMessage() {}

func (x *CreateUtilizedTransportEquipmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_utilizedtransportequipment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUtilizedTransportEquipmentRequest.ProtoReflect.Descriptor instead.
func (*CreateUtilizedTransportEquipmentRequest) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_utilizedtransportequipment_proto_rawDescGZIP(), []int{2}
}

func (x *CreateUtilizedTransportEquipmentRequest) GetEquipmentReference() string {
	if x != nil {
		return x.EquipmentReference
	}
	return ""
}

func (x *CreateUtilizedTransportEquipmentRequest) GetCargoGrossWeight() float64 {
	if x != nil {
		return x.CargoGrossWeight
	}
	return 0
}

func (x *CreateUtilizedTransportEquipmentRequest) GetCargoGrossWeightUnit() string {
	if x != nil {
		return x.CargoGrossWeightUnit
	}
	return ""
}

func (x *CreateUtilizedTransportEquipmentRequest) GetIsShipperOwned() bool {
	if x != nil {
		return x.IsShipperOwned
	}
	return false
}

func (x *CreateUtilizedTransportEquipmentRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateUtilizedTransportEquipmentRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateUtilizedTransportEquipmentRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateUtilizedTransportEquipmentRequest) GetEquipment() *CreateEquipmentRequest {
	if x != nil {
		return x.Equipment
	}
	return nil
}

type CreateUtilizedTransportEquipmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UtilizedTransportEquipment *UtilizedTransportEquipment `protobuf:"bytes,1,opt,name=utilized_transport_equipment,json=utilizedTransportEquipment,proto3" json:"utilized_transport_equipment,omitempty"`
}

func (x *CreateUtilizedTransportEquipmentResponse) Reset() {
	*x = CreateUtilizedTransportEquipmentResponse{}
	mi := &file_eventcore_v1_utilizedtransportequipment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUtilizedTransportEquipmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUtilizedTransportEquipmentResponse) ProtoMessage() {}

func (x *CreateUtilizedTransportEquipmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_utilizedtransportequipment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUtilizedTransportEquipmentResponse.ProtoReflect.Descriptor instead.
func (*CreateUtilizedTransportEquipmentResponse) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_utilizedtransportequipment_proto_rawDescGZIP(), []int{3}
}

func (x *CreateUtilizedTransportEquipmentResponse) GetUtilizedTransportEquipment() *UtilizedTransportEquipment {
	if x != nil {
		return x.UtilizedTransportEquipment
	}
	return nil
}

type Equipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipmentD *EquipmentD   `protobuf:"bytes,1,opt,name=equipment_d,json=equipmentD,proto3" json:"equipment_d,omitempty"`
	CrUpdUser  *v1.CrUpdUser `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime  *v1.CrUpdTime `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *Equipment) Reset() {
	*x = Equipment{}
	mi := &file_eventcore_v1_utilizedtransportequipment_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Equipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Equipment) ProtoMessage() {}

func (x *Equipment) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_utilizedtransportequipment_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Equipment.ProtoReflect.Descriptor instead.
func (*Equipment) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_utilizedtransportequipment_proto_rawDescGZIP(), []int{4}
}

func (x *Equipment) GetEquipmentD() *EquipmentD {
	if x != nil {
		return x.EquipmentD
	}
	return nil
}

func (x *Equipment) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Equipment) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type EquipmentD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4              []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	EquipmentReference string  `protobuf:"bytes,4,opt,name=equipment_reference,json=equipmentReference,proto3" json:"equipment_reference,omitempty"`
	IsoEquipmentCode   string  `protobuf:"bytes,5,opt,name=iso_equipment_code,json=isoEquipmentCode,proto3" json:"iso_equipment_code,omitempty"`
	TareWeight         float64 `protobuf:"fixed64,6,opt,name=tare_weight,json=tareWeight,proto3" json:"tare_weight,omitempty"`
	WeightUnit         string  `protobuf:"bytes,7,opt,name=weight_unit,json=weightUnit,proto3" json:"weight_unit,omitempty"`
}

func (x *EquipmentD) Reset() {
	*x = EquipmentD{}
	mi := &file_eventcore_v1_utilizedtransportequipment_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipmentD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentD) ProtoMessage() {}

func (x *EquipmentD) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_utilizedtransportequipment_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentD.ProtoReflect.Descriptor instead.
func (*EquipmentD) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_utilizedtransportequipment_proto_rawDescGZIP(), []int{5}
}

func (x *EquipmentD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EquipmentD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *EquipmentD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *EquipmentD) GetEquipmentReference() string {
	if x != nil {
		return x.EquipmentReference
	}
	return ""
}

func (x *EquipmentD) GetIsoEquipmentCode() string {
	if x != nil {
		return x.IsoEquipmentCode
	}
	return ""
}

func (x *EquipmentD) GetTareWeight() float64 {
	if x != nil {
		return x.TareWeight
	}
	return 0
}

func (x *EquipmentD) GetWeightUnit() string {
	if x != nil {
		return x.WeightUnit
	}
	return ""
}

type CreateEquipmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipmentReference string  `protobuf:"bytes,1,opt,name=equipment_reference,json=equipmentReference,proto3" json:"equipment_reference,omitempty"`
	IsoEquipmentCode   string  `protobuf:"bytes,2,opt,name=iso_equipment_code,json=isoEquipmentCode,proto3" json:"iso_equipment_code,omitempty"`
	TareWeight         float64 `protobuf:"fixed64,3,opt,name=tare_weight,json=tareWeight,proto3" json:"tare_weight,omitempty"`
	WeightUnit         string  `protobuf:"bytes,4,opt,name=weight_unit,json=weightUnit,proto3" json:"weight_unit,omitempty"`
	UserId             string  `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail          string  `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId          string  `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateEquipmentRequest) Reset() {
	*x = CreateEquipmentRequest{}
	mi := &file_eventcore_v1_utilizedtransportequipment_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEquipmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEquipmentRequest) ProtoMessage() {}

func (x *CreateEquipmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_utilizedtransportequipment_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEquipmentRequest.ProtoReflect.Descriptor instead.
func (*CreateEquipmentRequest) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_utilizedtransportequipment_proto_rawDescGZIP(), []int{6}
}

func (x *CreateEquipmentRequest) GetEquipmentReference() string {
	if x != nil {
		return x.EquipmentReference
	}
	return ""
}

func (x *CreateEquipmentRequest) GetIsoEquipmentCode() string {
	if x != nil {
		return x.IsoEquipmentCode
	}
	return ""
}

func (x *CreateEquipmentRequest) GetTareWeight() float64 {
	if x != nil {
		return x.TareWeight
	}
	return 0
}

func (x *CreateEquipmentRequest) GetWeightUnit() string {
	if x != nil {
		return x.WeightUnit
	}
	return ""
}

func (x *CreateEquipmentRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateEquipmentRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateEquipmentRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

var File_eventcore_v1_utilizedtransportequipment_proto protoreflect.FileDescriptor

var file_eventcore_v1_utilizedtransportequipment_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xaf, 0x02, 0x0a, 0x1a, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x6e, 0x0a, 0x1e, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x52, 0x1b, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xaf, 0x02, 0x0a, 0x1b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64,
	0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x2f, 0x0a,
	0x13, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3c,
	0x0a, 0x12, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x12,
	0x09, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x10, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3e, 0x0a, 0x17,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x14, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x47, 0x72, 0x6f,
	0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x22, 0x84, 0x03, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x6f,
	0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x77, 0x6e,
	0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x96, 0x01,
	0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x1c, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1a, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x0a,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34,
	0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x53, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x69, 0x73, 0x6f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x65, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x13, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x73,
	0x6f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x32, 0xb7, 0x01, 0x0a, 0x21, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x91, 0x01,
	0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x35, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x64,
	0x63, 0x73, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eventcore_v1_utilizedtransportequipment_proto_rawDescOnce sync.Once
	file_eventcore_v1_utilizedtransportequipment_proto_rawDescData = file_eventcore_v1_utilizedtransportequipment_proto_rawDesc
)

func file_eventcore_v1_utilizedtransportequipment_proto_rawDescGZIP() []byte {
	file_eventcore_v1_utilizedtransportequipment_proto_rawDescOnce.Do(func() {
		file_eventcore_v1_utilizedtransportequipment_proto_rawDescData = protoimpl.X.CompressGZIP(file_eventcore_v1_utilizedtransportequipment_proto_rawDescData)
	})
	return file_eventcore_v1_utilizedtransportequipment_proto_rawDescData
}

var file_eventcore_v1_utilizedtransportequipment_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_eventcore_v1_utilizedtransportequipment_proto_goTypes = []any{
	(*UtilizedTransportEquipment)(nil),               // 0: eventcore.v1.UtilizedTransportEquipment
	(*UtilizedTransportEquipmentD)(nil),              // 1: eventcore.v1.UtilizedTransportEquipmentD
	(*CreateUtilizedTransportEquipmentRequest)(nil),  // 2: eventcore.v1.CreateUtilizedTransportEquipmentRequest
	(*CreateUtilizedTransportEquipmentResponse)(nil), // 3: eventcore.v1.CreateUtilizedTransportEquipmentResponse
	(*Equipment)(nil),                                // 4: eventcore.v1.Equipment
	(*EquipmentD)(nil),                               // 5: eventcore.v1.EquipmentD
	(*CreateEquipmentRequest)(nil),                   // 6: eventcore.v1.CreateEquipmentRequest
	(*v1.CrUpdUser)(nil),                             // 7: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                             // 8: common.v1.CrUpdTime
}
var file_eventcore_v1_utilizedtransportequipment_proto_depIdxs = []int32{
	1,  // 0: eventcore.v1.UtilizedTransportEquipment.utilized_transport_equipment_d:type_name -> eventcore.v1.UtilizedTransportEquipmentD
	7,  // 1: eventcore.v1.UtilizedTransportEquipment.cr_upd_user:type_name -> common.v1.CrUpdUser
	8,  // 2: eventcore.v1.UtilizedTransportEquipment.cr_upd_time:type_name -> common.v1.CrUpdTime
	4,  // 3: eventcore.v1.UtilizedTransportEquipment.equipment:type_name -> eventcore.v1.Equipment
	6,  // 4: eventcore.v1.CreateUtilizedTransportEquipmentRequest.equipment:type_name -> eventcore.v1.CreateEquipmentRequest
	0,  // 5: eventcore.v1.CreateUtilizedTransportEquipmentResponse.utilized_transport_equipment:type_name -> eventcore.v1.UtilizedTransportEquipment
	5,  // 6: eventcore.v1.Equipment.equipment_d:type_name -> eventcore.v1.EquipmentD
	7,  // 7: eventcore.v1.Equipment.cr_upd_user:type_name -> common.v1.CrUpdUser
	8,  // 8: eventcore.v1.Equipment.cr_upd_time:type_name -> common.v1.CrUpdTime
	2,  // 9: eventcore.v1.UtilizedTransportEquipmentService.CreateUtilizedTransportEquipment:input_type -> eventcore.v1.CreateUtilizedTransportEquipmentRequest
	3,  // 10: eventcore.v1.UtilizedTransportEquipmentService.CreateUtilizedTransportEquipment:output_type -> eventcore.v1.CreateUtilizedTransportEquipmentResponse
	10, // [10:11] is the sub-list for method output_type
	9,  // [9:10] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_eventcore_v1_utilizedtransportequipment_proto_init() }
func file_eventcore_v1_utilizedtransportequipment_proto_init() {
	if File_eventcore_v1_utilizedtransportequipment_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eventcore_v1_utilizedtransportequipment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eventcore_v1_utilizedtransportequipment_proto_goTypes,
		DependencyIndexes: file_eventcore_v1_utilizedtransportequipment_proto_depIdxs,
		MessageInfos:      file_eventcore_v1_utilizedtransportequipment_proto_msgTypes,
	}.Build()
	File_eventcore_v1_utilizedtransportequipment_proto = out.File
	file_eventcore_v1_utilizedtransportequipment_proto_rawDesc = nil
	file_eventcore_v1_utilizedtransportequipment_proto_goTypes = nil
	file_eventcore_v1_utilizedtransportequipment_proto_depIdxs = nil
}
