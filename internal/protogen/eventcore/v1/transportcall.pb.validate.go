// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: eventcore/v1/transportcall.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FindTransportCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindTransportCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindTransportCallRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindTransportCallRequestMultiError, or nil if none found.
func (m *FindTransportCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindTransportCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindTransportCallRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindTransportCallRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindTransportCallRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindTransportCallRequestMultiError(errors)
	}

	return nil
}

// FindTransportCallRequestMultiError is an error wrapping multiple validation
// errors returned by FindTransportCallRequest.ValidateAll() if the designated
// constraints aren't met.
type FindTransportCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindTransportCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindTransportCallRequestMultiError) AllErrors() []error { return m }

// FindTransportCallRequestValidationError is the validation error returned by
// FindTransportCallRequest.Validate if the designated constraints aren't met.
type FindTransportCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindTransportCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindTransportCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindTransportCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindTransportCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindTransportCallRequestValidationError) ErrorName() string {
	return "FindTransportCallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindTransportCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindTransportCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindTransportCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindTransportCallRequestValidationError{}

// Validate checks the field values on FindTransportCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindTransportCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindTransportCallResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindTransportCallResponseMultiError, or nil if none found.
func (m *FindTransportCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindTransportCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindTransportCallResponseValidationError{
					field:  "TransportCall",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindTransportCallResponseValidationError{
					field:  "TransportCall",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindTransportCallResponseValidationError{
				field:  "TransportCall",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindTransportCallResponseMultiError(errors)
	}

	return nil
}

// FindTransportCallResponseMultiError is an error wrapping multiple validation
// errors returned by FindTransportCallResponse.ValidateAll() if the
// designated constraints aren't met.
type FindTransportCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindTransportCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindTransportCallResponseMultiError) AllErrors() []error { return m }

// FindTransportCallResponseValidationError is the validation error returned by
// FindTransportCallResponse.Validate if the designated constraints aren't met.
type FindTransportCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindTransportCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindTransportCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindTransportCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindTransportCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindTransportCallResponseValidationError) ErrorName() string {
	return "FindTransportCallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindTransportCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindTransportCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindTransportCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindTransportCallResponseValidationError{}

// Validate checks the field values on GetTransportCallByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransportCallByPkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportCallByPkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransportCallByPkRequestMultiError, or nil if none found.
func (m *GetTransportCallByPkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportCallByPkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransportCallByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransportCallByPkRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransportCallByPkRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransportCallByPkRequestMultiError(errors)
	}

	return nil
}

// GetTransportCallByPkRequestMultiError is an error wrapping multiple
// validation errors returned by GetTransportCallByPkRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTransportCallByPkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportCallByPkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportCallByPkRequestMultiError) AllErrors() []error { return m }

// GetTransportCallByPkRequestValidationError is the validation error returned
// by GetTransportCallByPkRequest.Validate if the designated constraints
// aren't met.
type GetTransportCallByPkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportCallByPkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportCallByPkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportCallByPkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportCallByPkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportCallByPkRequestValidationError) ErrorName() string {
	return "GetTransportCallByPkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportCallByPkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportCallByPkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportCallByPkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportCallByPkRequestValidationError{}

// Validate checks the field values on GetTransportCallByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransportCallByPkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportCallByPkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransportCallByPkResponseMultiError, or nil if none found.
func (m *GetTransportCallByPkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportCallByPkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransportCallByPkResponseValidationError{
					field:  "TransportCall",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransportCallByPkResponseValidationError{
					field:  "TransportCall",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransportCallByPkResponseValidationError{
				field:  "TransportCall",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransportCallByPkResponseMultiError(errors)
	}

	return nil
}

// GetTransportCallByPkResponseMultiError is an error wrapping multiple
// validation errors returned by GetTransportCallByPkResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTransportCallByPkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportCallByPkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportCallByPkResponseMultiError) AllErrors() []error { return m }

// GetTransportCallByPkResponseValidationError is the validation error returned
// by GetTransportCallByPkResponse.Validate if the designated constraints
// aren't met.
type GetTransportCallByPkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportCallByPkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportCallByPkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportCallByPkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportCallByPkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportCallByPkResponseValidationError) ErrorName() string {
	return "GetTransportCallByPkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportCallByPkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportCallByPkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportCallByPkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportCallByPkResponseValidationError{}

// Validate checks the field values on CreateTransportCallRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransportCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransportCallRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransportCallRequestMultiError, or nil if none found.
func (m *CreateTransportCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransportCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransportCallReference

	// no validation rules for TransportCallSequenceNumber

	// no validation rules for FacilityId

	// no validation rules for FacilityTypeCode

	// no validation rules for OtherFacility

	// no validation rules for LocationId

	// no validation rules for ModeOfTransportCode

	// no validation rules for VesselId

	// no validation rules for ImportVoyageId

	// no validation rules for ExportVoyageId

	// no validation rules for PortCallStatusCode

	// no validation rules for PortVisitReference

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateTransportCallRequestMultiError(errors)
	}

	return nil
}

// CreateTransportCallRequestMultiError is an error wrapping multiple
// validation errors returned by CreateTransportCallRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateTransportCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransportCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransportCallRequestMultiError) AllErrors() []error { return m }

// CreateTransportCallRequestValidationError is the validation error returned
// by CreateTransportCallRequest.Validate if the designated constraints aren't met.
type CreateTransportCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransportCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransportCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransportCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransportCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransportCallRequestValidationError) ErrorName() string {
	return "CreateTransportCallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransportCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransportCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransportCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransportCallRequestValidationError{}

// Validate checks the field values on CreateTransportCallResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransportCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransportCallResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransportCallResponseMultiError, or nil if none found.
func (m *CreateTransportCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransportCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransportCallResponseValidationError{
					field:  "TransportCall",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransportCallResponseValidationError{
					field:  "TransportCall",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransportCallResponseValidationError{
				field:  "TransportCall",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTransportCallResponseMultiError(errors)
	}

	return nil
}

// CreateTransportCallResponseMultiError is an error wrapping multiple
// validation errors returned by CreateTransportCallResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateTransportCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransportCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransportCallResponseMultiError) AllErrors() []error { return m }

// CreateTransportCallResponseValidationError is the validation error returned
// by CreateTransportCallResponse.Validate if the designated constraints
// aren't met.
type CreateTransportCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransportCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransportCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransportCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransportCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransportCallResponseValidationError) ErrorName() string {
	return "CreateTransportCallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransportCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransportCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransportCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransportCallResponseValidationError{}

// Validate checks the field values on GetTransportCallsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransportCallsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportCallsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransportCallsResponseMultiError, or nil if none found.
func (m *GetTransportCallsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportCallsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransportCalls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTransportCallsResponseValidationError{
						field:  fmt.Sprintf("TransportCalls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTransportCallsResponseValidationError{
						field:  fmt.Sprintf("TransportCalls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTransportCallsResponseValidationError{
					field:  fmt.Sprintf("TransportCalls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetTransportCallsResponseMultiError(errors)
	}

	return nil
}

// GetTransportCallsResponseMultiError is an error wrapping multiple validation
// errors returned by GetTransportCallsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetTransportCallsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportCallsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportCallsResponseMultiError) AllErrors() []error { return m }

// GetTransportCallsResponseValidationError is the validation error returned by
// GetTransportCallsResponse.Validate if the designated constraints aren't met.
type GetTransportCallsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportCallsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportCallsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportCallsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportCallsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportCallsResponseValidationError) ErrorName() string {
	return "GetTransportCallsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportCallsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportCallsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportCallsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportCallsResponseValidationError{}

// Validate checks the field values on GetTransportCallsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransportCallsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransportCallsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransportCallsRequestMultiError, or nil if none found.
func (m *GetTransportCallsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransportCallsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetTransportCallsRequestMultiError(errors)
	}

	return nil
}

// GetTransportCallsRequestMultiError is an error wrapping multiple validation
// errors returned by GetTransportCallsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTransportCallsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransportCallsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransportCallsRequestMultiError) AllErrors() []error { return m }

// GetTransportCallsRequestValidationError is the validation error returned by
// GetTransportCallsRequest.Validate if the designated constraints aren't met.
type GetTransportCallsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransportCallsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransportCallsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransportCallsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransportCallsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransportCallsRequestValidationError) ErrorName() string {
	return "GetTransportCallsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransportCallsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransportCallsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransportCallsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransportCallsRequestValidationError{}

// Validate checks the field values on TransportCall with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TransportCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransportCall with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransportCallMultiError, or
// nil if none found.
func (m *TransportCall) ValidateAll() error {
	return m.validate(true)
}

func (m *TransportCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportCallD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportCallValidationError{
					field:  "TransportCallD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportCallValidationError{
					field:  "TransportCallD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportCallD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportCallValidationError{
				field:  "TransportCallD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportCallValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportCallValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportCallValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportCallValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportCallValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportCallValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransportCallMultiError(errors)
	}

	return nil
}

// TransportCallMultiError is an error wrapping multiple validation errors
// returned by TransportCall.ValidateAll() if the designated constraints
// aren't met.
type TransportCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportCallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportCallMultiError) AllErrors() []error { return m }

// TransportCallValidationError is the validation error returned by
// TransportCall.Validate if the designated constraints aren't met.
type TransportCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportCallValidationError) ErrorName() string { return "TransportCallValidationError" }

// Error satisfies the builtin error interface
func (e TransportCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransportCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportCallValidationError{}

// Validate checks the field values on TransportCallD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TransportCallD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransportCallD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransportCallDMultiError,
// or nil if none found.
func (m *TransportCallD) ValidateAll() error {
	return m.validate(true)
}

func (m *TransportCallD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for TransportCallReference

	// no validation rules for TransportCallSequenceNumber

	// no validation rules for FacilityId

	// no validation rules for FacilityTypeCode

	// no validation rules for OtherFacility

	// no validation rules for LocationId

	// no validation rules for ModeOfTransportCode

	// no validation rules for VesselId

	// no validation rules for ImportVoyageId

	// no validation rules for ExportVoyageId

	// no validation rules for PortCallStatusCode

	// no validation rules for PortVisitReference

	if len(errors) > 0 {
		return TransportCallDMultiError(errors)
	}

	return nil
}

// TransportCallDMultiError is an error wrapping multiple validation errors
// returned by TransportCallD.ValidateAll() if the designated constraints
// aren't met.
type TransportCallDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportCallDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportCallDMultiError) AllErrors() []error { return m }

// TransportCallDValidationError is the validation error returned by
// TransportCallD.Validate if the designated constraints aren't met.
type TransportCallDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportCallDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportCallDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportCallDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportCallDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportCallDValidationError) ErrorName() string { return "TransportCallDValidationError" }

// Error satisfies the builtin error interface
func (e TransportCallDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransportCallD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportCallDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportCallDValidationError{}
