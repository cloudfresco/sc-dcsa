// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: eventcore/v1/transportcall.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransportCallService_CreateTransportCall_FullMethodName  = "/eventcore.v1.TransportCallService/CreateTransportCall"
	TransportCallService_GetTransportCalls_FullMethodName    = "/eventcore.v1.TransportCallService/GetTransportCalls"
	TransportCallService_FindTransportCall_FullMethodName    = "/eventcore.v1.TransportCallService/FindTransportCall"
	TransportCallService_GetTransportCallByPk_FullMethodName = "/eventcore.v1.TransportCallService/GetTransportCallByPk"
)

// TransportCallServiceClient is the client API for TransportCallService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The TransportCallService service definition.
type TransportCallServiceClient interface {
	CreateTransportCall(ctx context.Context, in *CreateTransportCallRequest, opts ...grpc.CallOption) (*CreateTransportCallResponse, error)
	GetTransportCalls(ctx context.Context, in *GetTransportCallsRequest, opts ...grpc.CallOption) (*GetTransportCallsResponse, error)
	FindTransportCall(ctx context.Context, in *FindTransportCallRequest, opts ...grpc.CallOption) (*FindTransportCallResponse, error)
	GetTransportCallByPk(ctx context.Context, in *GetTransportCallByPkRequest, opts ...grpc.CallOption) (*GetTransportCallByPkResponse, error)
}

type transportCallServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportCallServiceClient(cc grpc.ClientConnInterface) TransportCallServiceClient {
	return &transportCallServiceClient{cc}
}

func (c *transportCallServiceClient) CreateTransportCall(ctx context.Context, in *CreateTransportCallRequest, opts ...grpc.CallOption) (*CreateTransportCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransportCallResponse)
	err := c.cc.Invoke(ctx, TransportCallService_CreateTransportCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportCallServiceClient) GetTransportCalls(ctx context.Context, in *GetTransportCallsRequest, opts ...grpc.CallOption) (*GetTransportCallsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransportCallsResponse)
	err := c.cc.Invoke(ctx, TransportCallService_GetTransportCalls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportCallServiceClient) FindTransportCall(ctx context.Context, in *FindTransportCallRequest, opts ...grpc.CallOption) (*FindTransportCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindTransportCallResponse)
	err := c.cc.Invoke(ctx, TransportCallService_FindTransportCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportCallServiceClient) GetTransportCallByPk(ctx context.Context, in *GetTransportCallByPkRequest, opts ...grpc.CallOption) (*GetTransportCallByPkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransportCallByPkResponse)
	err := c.cc.Invoke(ctx, TransportCallService_GetTransportCallByPk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportCallServiceServer is the server API for TransportCallService service.
// All implementations must embed UnimplementedTransportCallServiceServer
// for forward compatibility.
//
// The TransportCallService service definition.
type TransportCallServiceServer interface {
	CreateTransportCall(context.Context, *CreateTransportCallRequest) (*CreateTransportCallResponse, error)
	GetTransportCalls(context.Context, *GetTransportCallsRequest) (*GetTransportCallsResponse, error)
	FindTransportCall(context.Context, *FindTransportCallRequest) (*FindTransportCallResponse, error)
	GetTransportCallByPk(context.Context, *GetTransportCallByPkRequest) (*GetTransportCallByPkResponse, error)
	mustEmbedUnimplementedTransportCallServiceServer()
}

// UnimplementedTransportCallServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransportCallServiceServer struct{}

func (UnimplementedTransportCallServiceServer) CreateTransportCall(context.Context, *CreateTransportCallRequest) (*CreateTransportCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransportCall not implemented")
}
func (UnimplementedTransportCallServiceServer) GetTransportCalls(context.Context, *GetTransportCallsRequest) (*GetTransportCallsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransportCalls not implemented")
}
func (UnimplementedTransportCallServiceServer) FindTransportCall(context.Context, *FindTransportCallRequest) (*FindTransportCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTransportCall not implemented")
}
func (UnimplementedTransportCallServiceServer) GetTransportCallByPk(context.Context, *GetTransportCallByPkRequest) (*GetTransportCallByPkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransportCallByPk not implemented")
}
func (UnimplementedTransportCallServiceServer) mustEmbedUnimplementedTransportCallServiceServer() {}
func (UnimplementedTransportCallServiceServer) testEmbeddedByValue()                              {}

// UnsafeTransportCallServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportCallServiceServer will
// result in compilation errors.
type UnsafeTransportCallServiceServer interface {
	mustEmbedUnimplementedTransportCallServiceServer()
}

func RegisterTransportCallServiceServer(s grpc.ServiceRegistrar, srv TransportCallServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransportCallServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransportCallService_ServiceDesc, srv)
}

func _TransportCallService_CreateTransportCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransportCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCallServiceServer).CreateTransportCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportCallService_CreateTransportCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCallServiceServer).CreateTransportCall(ctx, req.(*CreateTransportCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportCallService_GetTransportCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransportCallsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCallServiceServer).GetTransportCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportCallService_GetTransportCalls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCallServiceServer).GetTransportCalls(ctx, req.(*GetTransportCallsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportCallService_FindTransportCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTransportCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCallServiceServer).FindTransportCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportCallService_FindTransportCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCallServiceServer).FindTransportCall(ctx, req.(*FindTransportCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportCallService_GetTransportCallByPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransportCallByPkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCallServiceServer).GetTransportCallByPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportCallService_GetTransportCallByPk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCallServiceServer).GetTransportCallByPk(ctx, req.(*GetTransportCallByPkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransportCallService_ServiceDesc is the grpc.ServiceDesc for TransportCallService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportCallService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventcore.v1.TransportCallService",
	HandlerType: (*TransportCallServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransportCall",
			Handler:    _TransportCallService_CreateTransportCall_Handler,
		},
		{
			MethodName: "GetTransportCalls",
			Handler:    _TransportCallService_GetTransportCalls_Handler,
		},
		{
			MethodName: "FindTransportCall",
			Handler:    _TransportCallService_FindTransportCall_Handler,
		},
		{
			MethodName: "GetTransportCallByPk",
			Handler:    _TransportCallService_GetTransportCallByPk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eventcore/v1/transportcall.proto",
}
