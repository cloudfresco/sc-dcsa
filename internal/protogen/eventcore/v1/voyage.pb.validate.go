// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: eventcore/v1/voyage.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateVoyageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateVoyageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVoyageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVoyageRequestMultiError, or nil if none found.
func (m *CreateVoyageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVoyageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierVoyageNumber

	// no validation rules for UniversalVoyageReference

	// no validation rules for ServiceId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateVoyageRequestMultiError(errors)
	}

	return nil
}

// CreateVoyageRequestMultiError is an error wrapping multiple validation
// errors returned by CreateVoyageRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateVoyageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVoyageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVoyageRequestMultiError) AllErrors() []error { return m }

// CreateVoyageRequestValidationError is the validation error returned by
// CreateVoyageRequest.Validate if the designated constraints aren't met.
type CreateVoyageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVoyageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVoyageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVoyageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVoyageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVoyageRequestValidationError) ErrorName() string {
	return "CreateVoyageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVoyageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVoyageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVoyageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVoyageRequestValidationError{}

// Validate checks the field values on CreateVoyageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateVoyageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVoyageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVoyageResponseMultiError, or nil if none found.
func (m *CreateVoyageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVoyageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVoyage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateVoyageResponseValidationError{
					field:  "Voyage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateVoyageResponseValidationError{
					field:  "Voyage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVoyage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVoyageResponseValidationError{
				field:  "Voyage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateVoyageResponseMultiError(errors)
	}

	return nil
}

// CreateVoyageResponseMultiError is an error wrapping multiple validation
// errors returned by CreateVoyageResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateVoyageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVoyageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVoyageResponseMultiError) AllErrors() []error { return m }

// CreateVoyageResponseValidationError is the validation error returned by
// CreateVoyageResponse.Validate if the designated constraints aren't met.
type CreateVoyageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVoyageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVoyageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVoyageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVoyageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVoyageResponseValidationError) ErrorName() string {
	return "CreateVoyageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVoyageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVoyageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVoyageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVoyageResponseValidationError{}

// Validate checks the field values on GetVoyagesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetVoyagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVoyagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVoyagesRequestMultiError, or nil if none found.
func (m *GetVoyagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVoyagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetVoyagesRequestMultiError(errors)
	}

	return nil
}

// GetVoyagesRequestMultiError is an error wrapping multiple validation errors
// returned by GetVoyagesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetVoyagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVoyagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVoyagesRequestMultiError) AllErrors() []error { return m }

// GetVoyagesRequestValidationError is the validation error returned by
// GetVoyagesRequest.Validate if the designated constraints aren't met.
type GetVoyagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVoyagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVoyagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVoyagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVoyagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVoyagesRequestValidationError) ErrorName() string {
	return "GetVoyagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVoyagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVoyagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVoyagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVoyagesRequestValidationError{}

// Validate checks the field values on GetVoyagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVoyagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVoyagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVoyagesResponseMultiError, or nil if none found.
func (m *GetVoyagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVoyagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVoyages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetVoyagesResponseValidationError{
						field:  fmt.Sprintf("Voyages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetVoyagesResponseValidationError{
						field:  fmt.Sprintf("Voyages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVoyagesResponseValidationError{
					field:  fmt.Sprintf("Voyages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetVoyagesResponseMultiError(errors)
	}

	return nil
}

// GetVoyagesResponseMultiError is an error wrapping multiple validation errors
// returned by GetVoyagesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetVoyagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVoyagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVoyagesResponseMultiError) AllErrors() []error { return m }

// GetVoyagesResponseValidationError is the validation error returned by
// GetVoyagesResponse.Validate if the designated constraints aren't met.
type GetVoyagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVoyagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVoyagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVoyagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVoyagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVoyagesResponseValidationError) ErrorName() string {
	return "GetVoyagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVoyagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVoyagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVoyagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVoyagesResponseValidationError{}

// Validate checks the field values on
// FindCarrierVoyageNumbersByTransportDocumentRefResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindCarrierVoyageNumbersByTransportDocumentRefResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindCarrierVoyageNumbersByTransportDocumentRefResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindCarrierVoyageNumbersByTransportDocumentRefResponseMultiError, or nil if
// none found.
func (m *FindCarrierVoyageNumbersByTransportDocumentRefResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCarrierVoyageNumbersByTransportDocumentRefResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVoyage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindCarrierVoyageNumbersByTransportDocumentRefResponseValidationError{
					field:  "Voyage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindCarrierVoyageNumbersByTransportDocumentRefResponseValidationError{
					field:  "Voyage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVoyage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindCarrierVoyageNumbersByTransportDocumentRefResponseValidationError{
				field:  "Voyage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindCarrierVoyageNumbersByTransportDocumentRefResponseMultiError(errors)
	}

	return nil
}

// FindCarrierVoyageNumbersByTransportDocumentRefResponseMultiError is an error
// wrapping multiple validation errors returned by
// FindCarrierVoyageNumbersByTransportDocumentRefResponse.ValidateAll() if the
// designated constraints aren't met.
type FindCarrierVoyageNumbersByTransportDocumentRefResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCarrierVoyageNumbersByTransportDocumentRefResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCarrierVoyageNumbersByTransportDocumentRefResponseMultiError) AllErrors() []error {
	return m
}

// FindCarrierVoyageNumbersByTransportDocumentRefResponseValidationError is the
// validation error returned by
// FindCarrierVoyageNumbersByTransportDocumentRefResponse.Validate if the
// designated constraints aren't met.
type FindCarrierVoyageNumbersByTransportDocumentRefResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCarrierVoyageNumbersByTransportDocumentRefResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FindCarrierVoyageNumbersByTransportDocumentRefResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindCarrierVoyageNumbersByTransportDocumentRefResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FindCarrierVoyageNumbersByTransportDocumentRefResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e FindCarrierVoyageNumbersByTransportDocumentRefResponseValidationError) ErrorName() string {
	return "FindCarrierVoyageNumbersByTransportDocumentRefResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindCarrierVoyageNumbersByTransportDocumentRefResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCarrierVoyageNumbersByTransportDocumentRefResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCarrierVoyageNumbersByTransportDocumentRefResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCarrierVoyageNumbersByTransportDocumentRefResponseValidationError{}

// Validate checks the field values on
// FindCarrierVoyageNumbersByTransportDocumentRefRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindCarrierVoyageNumbersByTransportDocumentRefRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindCarrierVoyageNumbersByTransportDocumentRefRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindCarrierVoyageNumbersByTransportDocumentRefRequestMultiError, or nil if
// none found.
func (m *FindCarrierVoyageNumbersByTransportDocumentRefRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCarrierVoyageNumbersByTransportDocumentRefRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransportDocumentRef

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FindCarrierVoyageNumbersByTransportDocumentRefRequestMultiError(errors)
	}

	return nil
}

// FindCarrierVoyageNumbersByTransportDocumentRefRequestMultiError is an error
// wrapping multiple validation errors returned by
// FindCarrierVoyageNumbersByTransportDocumentRefRequest.ValidateAll() if the
// designated constraints aren't met.
type FindCarrierVoyageNumbersByTransportDocumentRefRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCarrierVoyageNumbersByTransportDocumentRefRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCarrierVoyageNumbersByTransportDocumentRefRequestMultiError) AllErrors() []error {
	return m
}

// FindCarrierVoyageNumbersByTransportDocumentRefRequestValidationError is the
// validation error returned by
// FindCarrierVoyageNumbersByTransportDocumentRefRequest.Validate if the
// designated constraints aren't met.
type FindCarrierVoyageNumbersByTransportDocumentRefRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCarrierVoyageNumbersByTransportDocumentRefRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FindCarrierVoyageNumbersByTransportDocumentRefRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindCarrierVoyageNumbersByTransportDocumentRefRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FindCarrierVoyageNumbersByTransportDocumentRefRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e FindCarrierVoyageNumbersByTransportDocumentRefRequestValidationError) ErrorName() string {
	return "FindCarrierVoyageNumbersByTransportDocumentRefRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindCarrierVoyageNumbersByTransportDocumentRefRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCarrierVoyageNumbersByTransportDocumentRefRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCarrierVoyageNumbersByTransportDocumentRefRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCarrierVoyageNumbersByTransportDocumentRefRequestValidationError{}

// Validate checks the field values on
// FindByCarrierVoyageNumberAndServiceIdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FindByCarrierVoyageNumberAndServiceIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindByCarrierVoyageNumberAndServiceIdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// FindByCarrierVoyageNumberAndServiceIdRequestMultiError, or nil if none found.
func (m *FindByCarrierVoyageNumberAndServiceIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByCarrierVoyageNumberAndServiceIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierVoyageNumber

	// no validation rules for ServiceId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FindByCarrierVoyageNumberAndServiceIdRequestMultiError(errors)
	}

	return nil
}

// FindByCarrierVoyageNumberAndServiceIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// FindByCarrierVoyageNumberAndServiceIdRequest.ValidateAll() if the
// designated constraints aren't met.
type FindByCarrierVoyageNumberAndServiceIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByCarrierVoyageNumberAndServiceIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByCarrierVoyageNumberAndServiceIdRequestMultiError) AllErrors() []error { return m }

// FindByCarrierVoyageNumberAndServiceIdRequestValidationError is the
// validation error returned by
// FindByCarrierVoyageNumberAndServiceIdRequest.Validate if the designated
// constraints aren't met.
type FindByCarrierVoyageNumberAndServiceIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByCarrierVoyageNumberAndServiceIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByCarrierVoyageNumberAndServiceIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByCarrierVoyageNumberAndServiceIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByCarrierVoyageNumberAndServiceIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByCarrierVoyageNumberAndServiceIdRequestValidationError) ErrorName() string {
	return "FindByCarrierVoyageNumberAndServiceIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindByCarrierVoyageNumberAndServiceIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByCarrierVoyageNumberAndServiceIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByCarrierVoyageNumberAndServiceIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByCarrierVoyageNumberAndServiceIdRequestValidationError{}

// Validate checks the field values on
// FindByCarrierVoyageNumberAndServiceIdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FindByCarrierVoyageNumberAndServiceIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindByCarrierVoyageNumberAndServiceIdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// FindByCarrierVoyageNumberAndServiceIdResponseMultiError, or nil if none found.
func (m *FindByCarrierVoyageNumberAndServiceIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByCarrierVoyageNumberAndServiceIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVoyage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindByCarrierVoyageNumberAndServiceIdResponseValidationError{
					field:  "Voyage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindByCarrierVoyageNumberAndServiceIdResponseValidationError{
					field:  "Voyage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVoyage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindByCarrierVoyageNumberAndServiceIdResponseValidationError{
				field:  "Voyage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindByCarrierVoyageNumberAndServiceIdResponseMultiError(errors)
	}

	return nil
}

// FindByCarrierVoyageNumberAndServiceIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// FindByCarrierVoyageNumberAndServiceIdResponse.ValidateAll() if the
// designated constraints aren't met.
type FindByCarrierVoyageNumberAndServiceIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByCarrierVoyageNumberAndServiceIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByCarrierVoyageNumberAndServiceIdResponseMultiError) AllErrors() []error { return m }

// FindByCarrierVoyageNumberAndServiceIdResponseValidationError is the
// validation error returned by
// FindByCarrierVoyageNumberAndServiceIdResponse.Validate if the designated
// constraints aren't met.
type FindByCarrierVoyageNumberAndServiceIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByCarrierVoyageNumberAndServiceIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByCarrierVoyageNumberAndServiceIdResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindByCarrierVoyageNumberAndServiceIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByCarrierVoyageNumberAndServiceIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByCarrierVoyageNumberAndServiceIdResponseValidationError) ErrorName() string {
	return "FindByCarrierVoyageNumberAndServiceIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindByCarrierVoyageNumberAndServiceIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByCarrierVoyageNumberAndServiceIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByCarrierVoyageNumberAndServiceIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByCarrierVoyageNumberAndServiceIdResponseValidationError{}

// Validate checks the field values on FindByCarrierVoyageNumberRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindByCarrierVoyageNumberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByCarrierVoyageNumberRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FindByCarrierVoyageNumberRequestMultiError, or nil if none found.
func (m *FindByCarrierVoyageNumberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByCarrierVoyageNumberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierVoyageNumber

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FindByCarrierVoyageNumberRequestMultiError(errors)
	}

	return nil
}

// FindByCarrierVoyageNumberRequestMultiError is an error wrapping multiple
// validation errors returned by
// FindByCarrierVoyageNumberRequest.ValidateAll() if the designated
// constraints aren't met.
type FindByCarrierVoyageNumberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByCarrierVoyageNumberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByCarrierVoyageNumberRequestMultiError) AllErrors() []error { return m }

// FindByCarrierVoyageNumberRequestValidationError is the validation error
// returned by FindByCarrierVoyageNumberRequest.Validate if the designated
// constraints aren't met.
type FindByCarrierVoyageNumberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByCarrierVoyageNumberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByCarrierVoyageNumberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByCarrierVoyageNumberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByCarrierVoyageNumberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByCarrierVoyageNumberRequestValidationError) ErrorName() string {
	return "FindByCarrierVoyageNumberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindByCarrierVoyageNumberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByCarrierVoyageNumberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByCarrierVoyageNumberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByCarrierVoyageNumberRequestValidationError{}

// Validate checks the field values on FindByCarrierVoyageNumberResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindByCarrierVoyageNumberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindByCarrierVoyageNumberResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindByCarrierVoyageNumberResponseMultiError, or nil if none found.
func (m *FindByCarrierVoyageNumberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindByCarrierVoyageNumberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVoyage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindByCarrierVoyageNumberResponseValidationError{
					field:  "Voyage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindByCarrierVoyageNumberResponseValidationError{
					field:  "Voyage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVoyage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindByCarrierVoyageNumberResponseValidationError{
				field:  "Voyage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindByCarrierVoyageNumberResponseMultiError(errors)
	}

	return nil
}

// FindByCarrierVoyageNumberResponseMultiError is an error wrapping multiple
// validation errors returned by
// FindByCarrierVoyageNumberResponse.ValidateAll() if the designated
// constraints aren't met.
type FindByCarrierVoyageNumberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindByCarrierVoyageNumberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindByCarrierVoyageNumberResponseMultiError) AllErrors() []error { return m }

// FindByCarrierVoyageNumberResponseValidationError is the validation error
// returned by FindByCarrierVoyageNumberResponse.Validate if the designated
// constraints aren't met.
type FindByCarrierVoyageNumberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindByCarrierVoyageNumberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindByCarrierVoyageNumberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindByCarrierVoyageNumberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindByCarrierVoyageNumberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindByCarrierVoyageNumberResponseValidationError) ErrorName() string {
	return "FindByCarrierVoyageNumberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindByCarrierVoyageNumberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindByCarrierVoyageNumberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindByCarrierVoyageNumberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindByCarrierVoyageNumberResponseValidationError{}

// Validate checks the field values on
// FindCarrierVoyageNumbersByCarrierBookingRefRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindCarrierVoyageNumbersByCarrierBookingRefRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindCarrierVoyageNumbersByCarrierBookingRefRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// FindCarrierVoyageNumbersByCarrierBookingRefRequestMultiError, or nil if
// none found.
func (m *FindCarrierVoyageNumbersByCarrierBookingRefRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCarrierVoyageNumbersByCarrierBookingRefRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CarrierBookingRef

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FindCarrierVoyageNumbersByCarrierBookingRefRequestMultiError(errors)
	}

	return nil
}

// FindCarrierVoyageNumbersByCarrierBookingRefRequestMultiError is an error
// wrapping multiple validation errors returned by
// FindCarrierVoyageNumbersByCarrierBookingRefRequest.ValidateAll() if the
// designated constraints aren't met.
type FindCarrierVoyageNumbersByCarrierBookingRefRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCarrierVoyageNumbersByCarrierBookingRefRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCarrierVoyageNumbersByCarrierBookingRefRequestMultiError) AllErrors() []error { return m }

// FindCarrierVoyageNumbersByCarrierBookingRefRequestValidationError is the
// validation error returned by
// FindCarrierVoyageNumbersByCarrierBookingRefRequest.Validate if the
// designated constraints aren't met.
type FindCarrierVoyageNumbersByCarrierBookingRefRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCarrierVoyageNumbersByCarrierBookingRefRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FindCarrierVoyageNumbersByCarrierBookingRefRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindCarrierVoyageNumbersByCarrierBookingRefRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FindCarrierVoyageNumbersByCarrierBookingRefRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindCarrierVoyageNumbersByCarrierBookingRefRequestValidationError) ErrorName() string {
	return "FindCarrierVoyageNumbersByCarrierBookingRefRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindCarrierVoyageNumbersByCarrierBookingRefRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCarrierVoyageNumbersByCarrierBookingRefRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCarrierVoyageNumbersByCarrierBookingRefRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCarrierVoyageNumbersByCarrierBookingRefRequestValidationError{}

// Validate checks the field values on
// FindCarrierVoyageNumbersByCarrierBookingRefResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindCarrierVoyageNumbersByCarrierBookingRefResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindCarrierVoyageNumbersByCarrierBookingRefResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// FindCarrierVoyageNumbersByCarrierBookingRefResponseMultiError, or nil if
// none found.
func (m *FindCarrierVoyageNumbersByCarrierBookingRefResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCarrierVoyageNumbersByCarrierBookingRefResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVoyage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindCarrierVoyageNumbersByCarrierBookingRefResponseValidationError{
					field:  "Voyage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindCarrierVoyageNumbersByCarrierBookingRefResponseValidationError{
					field:  "Voyage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVoyage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindCarrierVoyageNumbersByCarrierBookingRefResponseValidationError{
				field:  "Voyage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindCarrierVoyageNumbersByCarrierBookingRefResponseMultiError(errors)
	}

	return nil
}

// FindCarrierVoyageNumbersByCarrierBookingRefResponseMultiError is an error
// wrapping multiple validation errors returned by
// FindCarrierVoyageNumbersByCarrierBookingRefResponse.ValidateAll() if the
// designated constraints aren't met.
type FindCarrierVoyageNumbersByCarrierBookingRefResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCarrierVoyageNumbersByCarrierBookingRefResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCarrierVoyageNumbersByCarrierBookingRefResponseMultiError) AllErrors() []error { return m }

// FindCarrierVoyageNumbersByCarrierBookingRefResponseValidationError is the
// validation error returned by
// FindCarrierVoyageNumbersByCarrierBookingRefResponse.Validate if the
// designated constraints aren't met.
type FindCarrierVoyageNumbersByCarrierBookingRefResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCarrierVoyageNumbersByCarrierBookingRefResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FindCarrierVoyageNumbersByCarrierBookingRefResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindCarrierVoyageNumbersByCarrierBookingRefResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FindCarrierVoyageNumbersByCarrierBookingRefResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindCarrierVoyageNumbersByCarrierBookingRefResponseValidationError) ErrorName() string {
	return "FindCarrierVoyageNumbersByCarrierBookingRefResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindCarrierVoyageNumbersByCarrierBookingRefResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCarrierVoyageNumbersByCarrierBookingRefResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCarrierVoyageNumbersByCarrierBookingRefResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCarrierVoyageNumbersByCarrierBookingRefResponseValidationError{}

// Validate checks the field values on
// FindCarrierVoyageNumbersByShippingInstructionIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindCarrierVoyageNumbersByShippingInstructionIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindCarrierVoyageNumbersByShippingInstructionIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindCarrierVoyageNumbersByShippingInstructionIdResponseMultiError, or nil
// if none found.
func (m *FindCarrierVoyageNumbersByShippingInstructionIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCarrierVoyageNumbersByShippingInstructionIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVoyage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindCarrierVoyageNumbersByShippingInstructionIdResponseValidationError{
					field:  "Voyage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindCarrierVoyageNumbersByShippingInstructionIdResponseValidationError{
					field:  "Voyage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVoyage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindCarrierVoyageNumbersByShippingInstructionIdResponseValidationError{
				field:  "Voyage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindCarrierVoyageNumbersByShippingInstructionIdResponseMultiError(errors)
	}

	return nil
}

// FindCarrierVoyageNumbersByShippingInstructionIdResponseMultiError is an
// error wrapping multiple validation errors returned by
// FindCarrierVoyageNumbersByShippingInstructionIdResponse.ValidateAll() if
// the designated constraints aren't met.
type FindCarrierVoyageNumbersByShippingInstructionIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCarrierVoyageNumbersByShippingInstructionIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCarrierVoyageNumbersByShippingInstructionIdResponseMultiError) AllErrors() []error {
	return m
}

// FindCarrierVoyageNumbersByShippingInstructionIdResponseValidationError is
// the validation error returned by
// FindCarrierVoyageNumbersByShippingInstructionIdResponse.Validate if the
// designated constraints aren't met.
type FindCarrierVoyageNumbersByShippingInstructionIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCarrierVoyageNumbersByShippingInstructionIdResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FindCarrierVoyageNumbersByShippingInstructionIdResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindCarrierVoyageNumbersByShippingInstructionIdResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FindCarrierVoyageNumbersByShippingInstructionIdResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e FindCarrierVoyageNumbersByShippingInstructionIdResponseValidationError) ErrorName() string {
	return "FindCarrierVoyageNumbersByShippingInstructionIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindCarrierVoyageNumbersByShippingInstructionIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCarrierVoyageNumbersByShippingInstructionIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCarrierVoyageNumbersByShippingInstructionIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCarrierVoyageNumbersByShippingInstructionIdResponseValidationError{}

// Validate checks the field values on
// FindCarrierVoyageNumbersByShippingInstructionIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindCarrierVoyageNumbersByShippingInstructionIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindCarrierVoyageNumbersByShippingInstructionIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindCarrierVoyageNumbersByShippingInstructionIdRequestMultiError, or nil if
// none found.
func (m *FindCarrierVoyageNumbersByShippingInstructionIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCarrierVoyageNumbersByShippingInstructionIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShippingInstructionId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FindCarrierVoyageNumbersByShippingInstructionIdRequestMultiError(errors)
	}

	return nil
}

// FindCarrierVoyageNumbersByShippingInstructionIdRequestMultiError is an error
// wrapping multiple validation errors returned by
// FindCarrierVoyageNumbersByShippingInstructionIdRequest.ValidateAll() if the
// designated constraints aren't met.
type FindCarrierVoyageNumbersByShippingInstructionIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCarrierVoyageNumbersByShippingInstructionIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCarrierVoyageNumbersByShippingInstructionIdRequestMultiError) AllErrors() []error {
	return m
}

// FindCarrierVoyageNumbersByShippingInstructionIdRequestValidationError is the
// validation error returned by
// FindCarrierVoyageNumbersByShippingInstructionIdRequest.Validate if the
// designated constraints aren't met.
type FindCarrierVoyageNumbersByShippingInstructionIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCarrierVoyageNumbersByShippingInstructionIdRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FindCarrierVoyageNumbersByShippingInstructionIdRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindCarrierVoyageNumbersByShippingInstructionIdRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FindCarrierVoyageNumbersByShippingInstructionIdRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e FindCarrierVoyageNumbersByShippingInstructionIdRequestValidationError) ErrorName() string {
	return "FindCarrierVoyageNumbersByShippingInstructionIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindCarrierVoyageNumbersByShippingInstructionIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCarrierVoyageNumbersByShippingInstructionIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCarrierVoyageNumbersByShippingInstructionIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCarrierVoyageNumbersByShippingInstructionIdRequestValidationError{}

// Validate checks the field values on Voyage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Voyage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Voyage with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VoyageMultiError, or nil if none found.
func (m *Voyage) ValidateAll() error {
	return m.validate(true)
}

func (m *Voyage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVoyageD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VoyageValidationError{
					field:  "VoyageD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VoyageValidationError{
					field:  "VoyageD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVoyageD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VoyageValidationError{
				field:  "VoyageD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VoyageValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VoyageValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VoyageValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VoyageValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VoyageValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VoyageValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VoyageMultiError(errors)
	}

	return nil
}

// VoyageMultiError is an error wrapping multiple validation errors returned by
// Voyage.ValidateAll() if the designated constraints aren't met.
type VoyageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoyageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoyageMultiError) AllErrors() []error { return m }

// VoyageValidationError is the validation error returned by Voyage.Validate if
// the designated constraints aren't met.
type VoyageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoyageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoyageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoyageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoyageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoyageValidationError) ErrorName() string { return "VoyageValidationError" }

// Error satisfies the builtin error interface
func (e VoyageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoyage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoyageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoyageValidationError{}

// Validate checks the field values on VoyageD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VoyageD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VoyageD with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VoyageDMultiError, or nil if none found.
func (m *VoyageD) ValidateAll() error {
	return m.validate(true)
}

func (m *VoyageD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for CarrierVoyageNumber

	// no validation rules for UniversalVoyageReference

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return VoyageDMultiError(errors)
	}

	return nil
}

// VoyageDMultiError is an error wrapping multiple validation errors returned
// by VoyageD.ValidateAll() if the designated constraints aren't met.
type VoyageDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoyageDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoyageDMultiError) AllErrors() []error { return m }

// VoyageDValidationError is the validation error returned by VoyageD.Validate
// if the designated constraints aren't met.
type VoyageDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoyageDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoyageDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoyageDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoyageDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoyageDValidationError) ErrorName() string { return "VoyageDValidationError" }

// Error satisfies the builtin error interface
func (e VoyageDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoyageD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoyageDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoyageDValidationError{}
