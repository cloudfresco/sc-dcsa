// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: eventcore/v1/utilizedtransportequipment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UtilizedTransportEquipment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UtilizedTransportEquipment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UtilizedTransportEquipment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UtilizedTransportEquipmentMultiError, or nil if none found.
func (m *UtilizedTransportEquipment) ValidateAll() error {
	return m.validate(true)
}

func (m *UtilizedTransportEquipment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUtilizedTransportEquipmentD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UtilizedTransportEquipmentValidationError{
					field:  "UtilizedTransportEquipmentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UtilizedTransportEquipmentValidationError{
					field:  "UtilizedTransportEquipmentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUtilizedTransportEquipmentD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UtilizedTransportEquipmentValidationError{
				field:  "UtilizedTransportEquipmentD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UtilizedTransportEquipmentValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UtilizedTransportEquipmentValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UtilizedTransportEquipmentValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UtilizedTransportEquipmentValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UtilizedTransportEquipmentValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UtilizedTransportEquipmentValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEquipment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UtilizedTransportEquipmentValidationError{
					field:  "Equipment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UtilizedTransportEquipmentValidationError{
					field:  "Equipment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEquipment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UtilizedTransportEquipmentValidationError{
				field:  "Equipment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UtilizedTransportEquipmentMultiError(errors)
	}

	return nil
}

// UtilizedTransportEquipmentMultiError is an error wrapping multiple
// validation errors returned by UtilizedTransportEquipment.ValidateAll() if
// the designated constraints aren't met.
type UtilizedTransportEquipmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UtilizedTransportEquipmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UtilizedTransportEquipmentMultiError) AllErrors() []error { return m }

// UtilizedTransportEquipmentValidationError is the validation error returned
// by UtilizedTransportEquipment.Validate if the designated constraints aren't met.
type UtilizedTransportEquipmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UtilizedTransportEquipmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UtilizedTransportEquipmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UtilizedTransportEquipmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UtilizedTransportEquipmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UtilizedTransportEquipmentValidationError) ErrorName() string {
	return "UtilizedTransportEquipmentValidationError"
}

// Error satisfies the builtin error interface
func (e UtilizedTransportEquipmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUtilizedTransportEquipment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UtilizedTransportEquipmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UtilizedTransportEquipmentValidationError{}

// Validate checks the field values on UtilizedTransportEquipmentD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UtilizedTransportEquipmentD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UtilizedTransportEquipmentD with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UtilizedTransportEquipmentDMultiError, or nil if none found.
func (m *UtilizedTransportEquipmentD) ValidateAll() error {
	return m.validate(true)
}

func (m *UtilizedTransportEquipmentD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for EquipmentReference

	// no validation rules for CargoGrossWeight

	// no validation rules for CargoGrossWeightUnit

	// no validation rules for IsShipperOwned

	if len(errors) > 0 {
		return UtilizedTransportEquipmentDMultiError(errors)
	}

	return nil
}

// UtilizedTransportEquipmentDMultiError is an error wrapping multiple
// validation errors returned by UtilizedTransportEquipmentD.ValidateAll() if
// the designated constraints aren't met.
type UtilizedTransportEquipmentDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UtilizedTransportEquipmentDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UtilizedTransportEquipmentDMultiError) AllErrors() []error { return m }

// UtilizedTransportEquipmentDValidationError is the validation error returned
// by UtilizedTransportEquipmentD.Validate if the designated constraints
// aren't met.
type UtilizedTransportEquipmentDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UtilizedTransportEquipmentDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UtilizedTransportEquipmentDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UtilizedTransportEquipmentDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UtilizedTransportEquipmentDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UtilizedTransportEquipmentDValidationError) ErrorName() string {
	return "UtilizedTransportEquipmentDValidationError"
}

// Error satisfies the builtin error interface
func (e UtilizedTransportEquipmentDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUtilizedTransportEquipmentD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UtilizedTransportEquipmentDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UtilizedTransportEquipmentDValidationError{}

// Validate checks the field values on CreateUtilizedTransportEquipmentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateUtilizedTransportEquipmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateUtilizedTransportEquipmentRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateUtilizedTransportEquipmentRequestMultiError, or nil if none found.
func (m *CreateUtilizedTransportEquipmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUtilizedTransportEquipmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EquipmentReference

	// no validation rules for CargoGrossWeight

	// no validation rules for CargoGrossWeightUnit

	// no validation rules for IsShipperOwned

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetEquipment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUtilizedTransportEquipmentRequestValidationError{
					field:  "Equipment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUtilizedTransportEquipmentRequestValidationError{
					field:  "Equipment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEquipment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUtilizedTransportEquipmentRequestValidationError{
				field:  "Equipment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUtilizedTransportEquipmentRequestMultiError(errors)
	}

	return nil
}

// CreateUtilizedTransportEquipmentRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateUtilizedTransportEquipmentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUtilizedTransportEquipmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUtilizedTransportEquipmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUtilizedTransportEquipmentRequestMultiError) AllErrors() []error { return m }

// CreateUtilizedTransportEquipmentRequestValidationError is the validation
// error returned by CreateUtilizedTransportEquipmentRequest.Validate if the
// designated constraints aren't met.
type CreateUtilizedTransportEquipmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUtilizedTransportEquipmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUtilizedTransportEquipmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUtilizedTransportEquipmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUtilizedTransportEquipmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUtilizedTransportEquipmentRequestValidationError) ErrorName() string {
	return "CreateUtilizedTransportEquipmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUtilizedTransportEquipmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUtilizedTransportEquipmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUtilizedTransportEquipmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUtilizedTransportEquipmentRequestValidationError{}

// Validate checks the field values on CreateUtilizedTransportEquipmentResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateUtilizedTransportEquipmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateUtilizedTransportEquipmentResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateUtilizedTransportEquipmentResponseMultiError, or nil if none found.
func (m *CreateUtilizedTransportEquipmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUtilizedTransportEquipmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUtilizedTransportEquipment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUtilizedTransportEquipmentResponseValidationError{
					field:  "UtilizedTransportEquipment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUtilizedTransportEquipmentResponseValidationError{
					field:  "UtilizedTransportEquipment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUtilizedTransportEquipment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUtilizedTransportEquipmentResponseValidationError{
				field:  "UtilizedTransportEquipment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUtilizedTransportEquipmentResponseMultiError(errors)
	}

	return nil
}

// CreateUtilizedTransportEquipmentResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateUtilizedTransportEquipmentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateUtilizedTransportEquipmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUtilizedTransportEquipmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUtilizedTransportEquipmentResponseMultiError) AllErrors() []error { return m }

// CreateUtilizedTransportEquipmentResponseValidationError is the validation
// error returned by CreateUtilizedTransportEquipmentResponse.Validate if the
// designated constraints aren't met.
type CreateUtilizedTransportEquipmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUtilizedTransportEquipmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUtilizedTransportEquipmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUtilizedTransportEquipmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUtilizedTransportEquipmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUtilizedTransportEquipmentResponseValidationError) ErrorName() string {
	return "CreateUtilizedTransportEquipmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUtilizedTransportEquipmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUtilizedTransportEquipmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUtilizedTransportEquipmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUtilizedTransportEquipmentResponseValidationError{}

// Validate checks the field values on Equipment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Equipment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Equipment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EquipmentMultiError, or nil
// if none found.
func (m *Equipment) ValidateAll() error {
	return m.validate(true)
}

func (m *Equipment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEquipmentD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EquipmentValidationError{
					field:  "EquipmentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EquipmentValidationError{
					field:  "EquipmentD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEquipmentD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentValidationError{
				field:  "EquipmentD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EquipmentValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EquipmentValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EquipmentValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EquipmentValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EquipmentMultiError(errors)
	}

	return nil
}

// EquipmentMultiError is an error wrapping multiple validation errors returned
// by Equipment.ValidateAll() if the designated constraints aren't met.
type EquipmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EquipmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EquipmentMultiError) AllErrors() []error { return m }

// EquipmentValidationError is the validation error returned by
// Equipment.Validate if the designated constraints aren't met.
type EquipmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentValidationError) ErrorName() string { return "EquipmentValidationError" }

// Error satisfies the builtin error interface
func (e EquipmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentValidationError{}

// Validate checks the field values on EquipmentD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EquipmentD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EquipmentD with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EquipmentDMultiError, or
// nil if none found.
func (m *EquipmentD) ValidateAll() error {
	return m.validate(true)
}

func (m *EquipmentD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for EquipmentReference

	// no validation rules for IsoEquipmentCode

	// no validation rules for TareWeight

	// no validation rules for WeightUnit

	if len(errors) > 0 {
		return EquipmentDMultiError(errors)
	}

	return nil
}

// EquipmentDMultiError is an error wrapping multiple validation errors
// returned by EquipmentD.ValidateAll() if the designated constraints aren't met.
type EquipmentDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EquipmentDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EquipmentDMultiError) AllErrors() []error { return m }

// EquipmentDValidationError is the validation error returned by
// EquipmentD.Validate if the designated constraints aren't met.
type EquipmentDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentDValidationError) ErrorName() string { return "EquipmentDValidationError" }

// Error satisfies the builtin error interface
func (e EquipmentDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentDValidationError{}

// Validate checks the field values on CreateEquipmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEquipmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEquipmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEquipmentRequestMultiError, or nil if none found.
func (m *CreateEquipmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEquipmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EquipmentReference

	// no validation rules for IsoEquipmentCode

	// no validation rules for TareWeight

	// no validation rules for WeightUnit

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateEquipmentRequestMultiError(errors)
	}

	return nil
}

// CreateEquipmentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateEquipmentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEquipmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEquipmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEquipmentRequestMultiError) AllErrors() []error { return m }

// CreateEquipmentRequestValidationError is the validation error returned by
// CreateEquipmentRequest.Validate if the designated constraints aren't met.
type CreateEquipmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEquipmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEquipmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEquipmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEquipmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEquipmentRequestValidationError) ErrorName() string {
	return "CreateEquipmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEquipmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEquipmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEquipmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEquipmentRequestValidationError{}
