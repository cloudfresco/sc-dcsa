// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: eventcore/v1/charge.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateChargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentId uint32  `protobuf:"varint,1,opt,name=transport_document_id,json=transportDocumentId,proto3" json:"transport_document_id,omitempty"`
	ShipmentId          uint32  `protobuf:"varint,2,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	ChargeType          string  `protobuf:"bytes,3,opt,name=charge_type,json=chargeType,proto3" json:"charge_type,omitempty"`
	CurrencyAmount      float64 `protobuf:"fixed64,4,opt,name=currency_amount,json=currencyAmount,proto3" json:"currency_amount,omitempty"`
	CurrencyCode        string  `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	PaymentTermCode     string  `protobuf:"bytes,6,opt,name=payment_term_code,json=paymentTermCode,proto3" json:"payment_term_code,omitempty"`
	CalculationBasis    string  `protobuf:"bytes,7,opt,name=calculation_basis,json=calculationBasis,proto3" json:"calculation_basis,omitempty"`
	UnitPrice           float64 `protobuf:"fixed64,8,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	Quantity            float64 `protobuf:"fixed64,9,opt,name=quantity,proto3" json:"quantity,omitempty"`
	UserId              string  `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail           string  `protobuf:"bytes,11,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId           string  `protobuf:"bytes,12,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateChargeRequest) Reset() {
	*x = CreateChargeRequest{}
	mi := &file_eventcore_v1_charge_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChargeRequest) ProtoMessage() {}

func (x *CreateChargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_charge_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChargeRequest.ProtoReflect.Descriptor instead.
func (*CreateChargeRequest) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_charge_proto_rawDescGZIP(), []int{0}
}

func (x *CreateChargeRequest) GetTransportDocumentId() uint32 {
	if x != nil {
		return x.TransportDocumentId
	}
	return 0
}

func (x *CreateChargeRequest) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *CreateChargeRequest) GetChargeType() string {
	if x != nil {
		return x.ChargeType
	}
	return ""
}

func (x *CreateChargeRequest) GetCurrencyAmount() float64 {
	if x != nil {
		return x.CurrencyAmount
	}
	return 0
}

func (x *CreateChargeRequest) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *CreateChargeRequest) GetPaymentTermCode() string {
	if x != nil {
		return x.PaymentTermCode
	}
	return ""
}

func (x *CreateChargeRequest) GetCalculationBasis() string {
	if x != nil {
		return x.CalculationBasis
	}
	return ""
}

func (x *CreateChargeRequest) GetUnitPrice() float64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *CreateChargeRequest) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CreateChargeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateChargeRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateChargeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateChargeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charge *Charge `protobuf:"bytes,1,opt,name=charge,proto3" json:"charge,omitempty"`
}

func (x *CreateChargeResponse) Reset() {
	*x = CreateChargeResponse{}
	mi := &file_eventcore_v1_charge_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChargeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChargeResponse) ProtoMessage() {}

func (x *CreateChargeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_charge_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChargeResponse.ProtoReflect.Descriptor instead.
func (*CreateChargeResponse) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_charge_proto_rawDescGZIP(), []int{1}
}

func (x *CreateChargeResponse) GetCharge() *Charge {
	if x != nil {
		return x.Charge
	}
	return nil
}

type FetchChargesByShipmentIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentId uint32 `protobuf:"varint,1,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Limit      string `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,4,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *FetchChargesByShipmentIdRequest) Reset() {
	*x = FetchChargesByShipmentIdRequest{}
	mi := &file_eventcore_v1_charge_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchChargesByShipmentIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchChargesByShipmentIdRequest) ProtoMessage() {}

func (x *FetchChargesByShipmentIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_charge_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchChargesByShipmentIdRequest.ProtoReflect.Descriptor instead.
func (*FetchChargesByShipmentIdRequest) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_charge_proto_rawDescGZIP(), []int{2}
}

func (x *FetchChargesByShipmentIdRequest) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *FetchChargesByShipmentIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FetchChargesByShipmentIdRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *FetchChargesByShipmentIdRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *FetchChargesByShipmentIdRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *FetchChargesByShipmentIdRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type FetchChargesByShipmentIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charges    []*Charge `protobuf:"bytes,1,rep,name=charges,proto3" json:"charges,omitempty"`
	NextCursor string    `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *FetchChargesByShipmentIdResponse) Reset() {
	*x = FetchChargesByShipmentIdResponse{}
	mi := &file_eventcore_v1_charge_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchChargesByShipmentIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchChargesByShipmentIdResponse) ProtoMessage() {}

func (x *FetchChargesByShipmentIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_charge_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchChargesByShipmentIdResponse.ProtoReflect.Descriptor instead.
func (*FetchChargesByShipmentIdResponse) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_charge_proto_rawDescGZIP(), []int{3}
}

func (x *FetchChargesByShipmentIdResponse) GetCharges() []*Charge {
	if x != nil {
		return x.Charges
	}
	return nil
}

func (x *FetchChargesByShipmentIdResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type FetchChargesByTransportDocumentIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportDocumentId uint32 `protobuf:"varint,1,opt,name=transport_document_id,json=transportDocumentId,proto3" json:"transport_document_id,omitempty"`
	UserId              string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Limit               string `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor          string `protobuf:"bytes,4,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail           string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId           string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *FetchChargesByTransportDocumentIdRequest) Reset() {
	*x = FetchChargesByTransportDocumentIdRequest{}
	mi := &file_eventcore_v1_charge_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchChargesByTransportDocumentIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchChargesByTransportDocumentIdRequest) ProtoMessage() {}

func (x *FetchChargesByTransportDocumentIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_charge_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchChargesByTransportDocumentIdRequest.ProtoReflect.Descriptor instead.
func (*FetchChargesByTransportDocumentIdRequest) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_charge_proto_rawDescGZIP(), []int{4}
}

func (x *FetchChargesByTransportDocumentIdRequest) GetTransportDocumentId() uint32 {
	if x != nil {
		return x.TransportDocumentId
	}
	return 0
}

func (x *FetchChargesByTransportDocumentIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FetchChargesByTransportDocumentIdRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *FetchChargesByTransportDocumentIdRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *FetchChargesByTransportDocumentIdRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *FetchChargesByTransportDocumentIdRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type FetchChargesByTransportDocumentIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charges    []*Charge `protobuf:"bytes,1,rep,name=charges,proto3" json:"charges,omitempty"`
	NextCursor string    `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *FetchChargesByTransportDocumentIdResponse) Reset() {
	*x = FetchChargesByTransportDocumentIdResponse{}
	mi := &file_eventcore_v1_charge_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchChargesByTransportDocumentIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchChargesByTransportDocumentIdResponse) ProtoMessage() {}

func (x *FetchChargesByTransportDocumentIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_charge_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchChargesByTransportDocumentIdResponse.ProtoReflect.Descriptor instead.
func (*FetchChargesByTransportDocumentIdResponse) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_charge_proto_rawDescGZIP(), []int{5}
}

func (x *FetchChargesByTransportDocumentIdResponse) GetCharges() []*Charge {
	if x != nil {
		return x.Charges
	}
	return nil
}

func (x *FetchChargesByTransportDocumentIdResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type Charge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeD   *ChargeD      `protobuf:"bytes,1,opt,name=charge_d,json=chargeD,proto3" json:"charge_d,omitempty"`
	CrUpdUser *v1.CrUpdUser `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime *v1.CrUpdTime `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *Charge) Reset() {
	*x = Charge{}
	mi := &file_eventcore_v1_charge_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Charge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Charge) ProtoMessage() {}

func (x *Charge) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_charge_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Charge.ProtoReflect.Descriptor instead.
func (*Charge) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_charge_proto_rawDescGZIP(), []int{6}
}

func (x *Charge) GetChargeD() *ChargeD {
	if x != nil {
		return x.ChargeD
	}
	return nil
}

func (x *Charge) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Charge) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type ChargeD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4               []byte  `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                 string  `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	TransportDocumentId uint32  `protobuf:"varint,4,opt,name=transport_document_id,json=transportDocumentId,proto3" json:"transport_document_id,omitempty"`
	ShipmentId          uint32  `protobuf:"varint,5,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	ChargeType          string  `protobuf:"bytes,6,opt,name=charge_type,json=chargeType,proto3" json:"charge_type,omitempty"`
	CurrencyAmount      float64 `protobuf:"fixed64,7,opt,name=currency_amount,json=currencyAmount,proto3" json:"currency_amount,omitempty"`
	CurrencyCode        string  `protobuf:"bytes,8,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	PaymentTermCode     string  `protobuf:"bytes,9,opt,name=payment_term_code,json=paymentTermCode,proto3" json:"payment_term_code,omitempty"`
	CalculationBasis    string  `protobuf:"bytes,10,opt,name=calculation_basis,json=calculationBasis,proto3" json:"calculation_basis,omitempty"`
	UnitPrice           float64 `protobuf:"fixed64,11,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	Quantity            float64 `protobuf:"fixed64,12,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *ChargeD) Reset() {
	*x = ChargeD{}
	mi := &file_eventcore_v1_charge_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChargeD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeD) ProtoMessage() {}

func (x *ChargeD) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_charge_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeD.ProtoReflect.Descriptor instead.
func (*ChargeD) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_charge_proto_rawDescGZIP(), []int{7}
}

func (x *ChargeD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChargeD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *ChargeD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *ChargeD) GetTransportDocumentId() uint32 {
	if x != nil {
		return x.TransportDocumentId
	}
	return 0
}

func (x *ChargeD) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *ChargeD) GetChargeType() string {
	if x != nil {
		return x.ChargeType
	}
	return ""
}

func (x *ChargeD) GetCurrencyAmount() float64 {
	if x != nil {
		return x.CurrencyAmount
	}
	return 0
}

func (x *ChargeD) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *ChargeD) GetPaymentTermCode() string {
	if x != nil {
		return x.PaymentTermCode
	}
	return ""
}

func (x *ChargeD) GetCalculationBasis() string {
	if x != nil {
		return x.CalculationBasis
	}
	return ""
}

func (x *ChargeD) GetUnitPrice() float64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *ChargeD) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

var File_eventcore_v1_charge_proto protoreflect.FileDescriptor

var file_eventcore_v1_charge_proto_rawDesc = []byte{
	0x0a, 0x19, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6,
	0x03, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x18, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x34, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x61, 0x73, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x18, 0x32, 0x52, 0x10, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x73, 0x69, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22, 0xd0, 0x01,
	0x0a, 0x1f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x42, 0x79,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x73, 0x0a, 0x20, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x28, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x29, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x22, 0xa6, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9a, 0x03, 0x0a, 0x07,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a,
	0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53,
	0x12, 0x32, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x61, 0x73, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x32, 0xf8, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x94, 0x01, 0x0a, 0x21, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x42,
	0x79, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63,
	0x2d, 0x64, 0x63, 0x73, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eventcore_v1_charge_proto_rawDescOnce sync.Once
	file_eventcore_v1_charge_proto_rawDescData = file_eventcore_v1_charge_proto_rawDesc
)

func file_eventcore_v1_charge_proto_rawDescGZIP() []byte {
	file_eventcore_v1_charge_proto_rawDescOnce.Do(func() {
		file_eventcore_v1_charge_proto_rawDescData = protoimpl.X.CompressGZIP(file_eventcore_v1_charge_proto_rawDescData)
	})
	return file_eventcore_v1_charge_proto_rawDescData
}

var file_eventcore_v1_charge_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_eventcore_v1_charge_proto_goTypes = []any{
	(*CreateChargeRequest)(nil),                       // 0: eventcore.v1.CreateChargeRequest
	(*CreateChargeResponse)(nil),                      // 1: eventcore.v1.CreateChargeResponse
	(*FetchChargesByShipmentIdRequest)(nil),           // 2: eventcore.v1.FetchChargesByShipmentIdRequest
	(*FetchChargesByShipmentIdResponse)(nil),          // 3: eventcore.v1.FetchChargesByShipmentIdResponse
	(*FetchChargesByTransportDocumentIdRequest)(nil),  // 4: eventcore.v1.FetchChargesByTransportDocumentIdRequest
	(*FetchChargesByTransportDocumentIdResponse)(nil), // 5: eventcore.v1.FetchChargesByTransportDocumentIdResponse
	(*Charge)(nil),       // 6: eventcore.v1.Charge
	(*ChargeD)(nil),      // 7: eventcore.v1.ChargeD
	(*v1.CrUpdUser)(nil), // 8: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil), // 9: common.v1.CrUpdTime
}
var file_eventcore_v1_charge_proto_depIdxs = []int32{
	6, // 0: eventcore.v1.CreateChargeResponse.charge:type_name -> eventcore.v1.Charge
	6, // 1: eventcore.v1.FetchChargesByShipmentIdResponse.charges:type_name -> eventcore.v1.Charge
	6, // 2: eventcore.v1.FetchChargesByTransportDocumentIdResponse.charges:type_name -> eventcore.v1.Charge
	7, // 3: eventcore.v1.Charge.charge_d:type_name -> eventcore.v1.ChargeD
	8, // 4: eventcore.v1.Charge.cr_upd_user:type_name -> common.v1.CrUpdUser
	9, // 5: eventcore.v1.Charge.cr_upd_time:type_name -> common.v1.CrUpdTime
	0, // 6: eventcore.v1.ChargeService.CreateCharge:input_type -> eventcore.v1.CreateChargeRequest
	4, // 7: eventcore.v1.ChargeService.FetchChargesByTransportDocumentId:input_type -> eventcore.v1.FetchChargesByTransportDocumentIdRequest
	2, // 8: eventcore.v1.ChargeService.FetchChargesByShipmentId:input_type -> eventcore.v1.FetchChargesByShipmentIdRequest
	1, // 9: eventcore.v1.ChargeService.CreateCharge:output_type -> eventcore.v1.CreateChargeResponse
	5, // 10: eventcore.v1.ChargeService.FetchChargesByTransportDocumentId:output_type -> eventcore.v1.FetchChargesByTransportDocumentIdResponse
	3, // 11: eventcore.v1.ChargeService.FetchChargesByShipmentId:output_type -> eventcore.v1.FetchChargesByShipmentIdResponse
	9, // [9:12] is the sub-list for method output_type
	6, // [6:9] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_eventcore_v1_charge_proto_init() }
func file_eventcore_v1_charge_proto_init() {
	if File_eventcore_v1_charge_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eventcore_v1_charge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eventcore_v1_charge_proto_goTypes,
		DependencyIndexes: file_eventcore_v1_charge_proto_depIdxs,
		MessageInfos:      file_eventcore_v1_charge_proto_msgTypes,
	}.Build()
	File_eventcore_v1_charge_proto = out.File
	file_eventcore_v1_charge_proto_rawDesc = nil
	file_eventcore_v1_charge_proto_goTypes = nil
	file_eventcore_v1_charge_proto_depIdxs = nil
}
