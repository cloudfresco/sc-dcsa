// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: eventcore/v1/transportcall.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FindTransportCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *FindTransportCallRequest) Reset() {
	*x = FindTransportCallRequest{}
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindTransportCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTransportCallRequest) ProtoMessage() {}

func (x *FindTransportCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTransportCallRequest.ProtoReflect.Descriptor instead.
func (*FindTransportCallRequest) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_transportcall_proto_rawDescGZIP(), []int{0}
}

func (x *FindTransportCallRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type FindTransportCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportCall *TransportCall `protobuf:"bytes,1,opt,name=transport_call,json=transportCall,proto3" json:"transport_call,omitempty"`
}

func (x *FindTransportCallResponse) Reset() {
	*x = FindTransportCallResponse{}
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindTransportCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTransportCallResponse) ProtoMessage() {}

func (x *FindTransportCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTransportCallResponse.ProtoReflect.Descriptor instead.
func (*FindTransportCallResponse) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_transportcall_proto_rawDescGZIP(), []int{1}
}

func (x *FindTransportCallResponse) GetTransportCall() *TransportCall {
	if x != nil {
		return x.TransportCall
	}
	return nil
}

type GetTransportCallByPkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetByIdRequest *v1.GetByIdRequest `protobuf:"bytes,1,opt,name=get_by_id_request,json=getByIdRequest,proto3" json:"get_by_id_request,omitempty"`
}

func (x *GetTransportCallByPkRequest) Reset() {
	*x = GetTransportCallByPkRequest{}
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransportCallByPkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportCallByPkRequest) ProtoMessage() {}

func (x *GetTransportCallByPkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportCallByPkRequest.ProtoReflect.Descriptor instead.
func (*GetTransportCallByPkRequest) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_transportcall_proto_rawDescGZIP(), []int{2}
}

func (x *GetTransportCallByPkRequest) GetGetByIdRequest() *v1.GetByIdRequest {
	if x != nil {
		return x.GetByIdRequest
	}
	return nil
}

type GetTransportCallByPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportCall *TransportCall `protobuf:"bytes,1,opt,name=transport_call,json=transportCall,proto3" json:"transport_call,omitempty"`
}

func (x *GetTransportCallByPkResponse) Reset() {
	*x = GetTransportCallByPkResponse{}
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransportCallByPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportCallByPkResponse) ProtoMessage() {}

func (x *GetTransportCallByPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportCallByPkResponse.ProtoReflect.Descriptor instead.
func (*GetTransportCallByPkResponse) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_transportcall_proto_rawDescGZIP(), []int{3}
}

func (x *GetTransportCallByPkResponse) GetTransportCall() *TransportCall {
	if x != nil {
		return x.TransportCall
	}
	return nil
}

type CreateTransportCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportCallReference      string `protobuf:"bytes,1,opt,name=transport_call_reference,json=transportCallReference,proto3" json:"transport_call_reference,omitempty"`
	TransportCallSequenceNumber uint32 `protobuf:"varint,2,opt,name=transport_call_sequence_number,json=transportCallSequenceNumber,proto3" json:"transport_call_sequence_number,omitempty"`
	FacilityId                  uint32 `protobuf:"varint,3,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"`
	FacilityTypeCode            string `protobuf:"bytes,4,opt,name=facility_type_code,json=facilityTypeCode,proto3" json:"facility_type_code,omitempty"`
	OtherFacility               string `protobuf:"bytes,5,opt,name=other_facility,json=otherFacility,proto3" json:"other_facility,omitempty"`
	LocationId                  uint32 `protobuf:"varint,6,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	ModeOfTransportCode         string `protobuf:"bytes,7,opt,name=mode_of_transport_code,json=modeOfTransportCode,proto3" json:"mode_of_transport_code,omitempty"`
	VesselId                    uint32 `protobuf:"varint,8,opt,name=vessel_id,json=vesselId,proto3" json:"vessel_id,omitempty"`
	ImportVoyageId              uint32 `protobuf:"varint,9,opt,name=import_voyage_id,json=importVoyageId,proto3" json:"import_voyage_id,omitempty"`
	ExportVoyageId              uint32 `protobuf:"varint,10,opt,name=export_voyage_id,json=exportVoyageId,proto3" json:"export_voyage_id,omitempty"`
	PortCallStatusCode          string `protobuf:"bytes,11,opt,name=port_call_status_code,json=portCallStatusCode,proto3" json:"port_call_status_code,omitempty"`
	PortVisitReference          string `protobuf:"bytes,12,opt,name=port_visit_reference,json=portVisitReference,proto3" json:"port_visit_reference,omitempty"`
	UserId                      string `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                   string `protobuf:"bytes,14,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                   string `protobuf:"bytes,15,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTransportCallRequest) Reset() {
	*x = CreateTransportCallRequest{}
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransportCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransportCallRequest) ProtoMessage() {}

func (x *CreateTransportCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransportCallRequest.ProtoReflect.Descriptor instead.
func (*CreateTransportCallRequest) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_transportcall_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTransportCallRequest) GetTransportCallReference() string {
	if x != nil {
		return x.TransportCallReference
	}
	return ""
}

func (x *CreateTransportCallRequest) GetTransportCallSequenceNumber() uint32 {
	if x != nil {
		return x.TransportCallSequenceNumber
	}
	return 0
}

func (x *CreateTransportCallRequest) GetFacilityId() uint32 {
	if x != nil {
		return x.FacilityId
	}
	return 0
}

func (x *CreateTransportCallRequest) GetFacilityTypeCode() string {
	if x != nil {
		return x.FacilityTypeCode
	}
	return ""
}

func (x *CreateTransportCallRequest) GetOtherFacility() string {
	if x != nil {
		return x.OtherFacility
	}
	return ""
}

func (x *CreateTransportCallRequest) GetLocationId() uint32 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *CreateTransportCallRequest) GetModeOfTransportCode() string {
	if x != nil {
		return x.ModeOfTransportCode
	}
	return ""
}

func (x *CreateTransportCallRequest) GetVesselId() uint32 {
	if x != nil {
		return x.VesselId
	}
	return 0
}

func (x *CreateTransportCallRequest) GetImportVoyageId() uint32 {
	if x != nil {
		return x.ImportVoyageId
	}
	return 0
}

func (x *CreateTransportCallRequest) GetExportVoyageId() uint32 {
	if x != nil {
		return x.ExportVoyageId
	}
	return 0
}

func (x *CreateTransportCallRequest) GetPortCallStatusCode() string {
	if x != nil {
		return x.PortCallStatusCode
	}
	return ""
}

func (x *CreateTransportCallRequest) GetPortVisitReference() string {
	if x != nil {
		return x.PortVisitReference
	}
	return ""
}

func (x *CreateTransportCallRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTransportCallRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTransportCallRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTransportCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportCall *TransportCall `protobuf:"bytes,1,opt,name=transport_call,json=transportCall,proto3" json:"transport_call,omitempty"`
}

func (x *CreateTransportCallResponse) Reset() {
	*x = CreateTransportCallResponse{}
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransportCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransportCallResponse) ProtoMessage() {}

func (x *CreateTransportCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransportCallResponse.ProtoReflect.Descriptor instead.
func (*CreateTransportCallResponse) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_transportcall_proto_rawDescGZIP(), []int{5}
}

func (x *CreateTransportCallResponse) GetTransportCall() *TransportCall {
	if x != nil {
		return x.TransportCall
	}
	return nil
}

type GetTransportCallsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportCalls []*TransportCall `protobuf:"bytes,1,rep,name=transport_calls,json=transportCalls,proto3" json:"transport_calls,omitempty"`
	NextCursor     string           `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetTransportCallsResponse) Reset() {
	*x = GetTransportCallsResponse{}
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransportCallsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportCallsResponse) ProtoMessage() {}

func (x *GetTransportCallsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportCallsResponse.ProtoReflect.Descriptor instead.
func (*GetTransportCallsResponse) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_transportcall_proto_rawDescGZIP(), []int{6}
}

func (x *GetTransportCallsResponse) GetTransportCalls() []*TransportCall {
	if x != nil {
		return x.TransportCalls
	}
	return nil
}

func (x *GetTransportCallsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetTransportCallsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetTransportCallsRequest) Reset() {
	*x = GetTransportCallsRequest{}
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransportCallsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportCallsRequest) ProtoMessage() {}

func (x *GetTransportCallsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportCallsRequest.ProtoReflect.Descriptor instead.
func (*GetTransportCallsRequest) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_transportcall_proto_rawDescGZIP(), []int{7}
}

func (x *GetTransportCallsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetTransportCallsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetTransportCallsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetTransportCallsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type TransportCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportCallD *TransportCallD `protobuf:"bytes,1,opt,name=transport_call_d,json=transportCallD,proto3" json:"transport_call_d,omitempty"`
	CrUpdUser      *v1.CrUpdUser   `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime      *v1.CrUpdTime   `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *TransportCall) Reset() {
	*x = TransportCall{}
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportCall) ProtoMessage() {}

func (x *TransportCall) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportCall.ProtoReflect.Descriptor instead.
func (*TransportCall) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_transportcall_proto_rawDescGZIP(), []int{8}
}

func (x *TransportCall) GetTransportCallD() *TransportCallD {
	if x != nil {
		return x.TransportCallD
	}
	return nil
}

func (x *TransportCall) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *TransportCall) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type TransportCallD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                       []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                         string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	TransportCallReference      string `protobuf:"bytes,4,opt,name=transport_call_reference,json=transportCallReference,proto3" json:"transport_call_reference,omitempty"`
	TransportCallSequenceNumber uint32 `protobuf:"varint,5,opt,name=transport_call_sequence_number,json=transportCallSequenceNumber,proto3" json:"transport_call_sequence_number,omitempty"`
	FacilityId                  uint32 `protobuf:"varint,6,opt,name=facility_id,json=facilityId,proto3" json:"facility_id,omitempty"`
	FacilityTypeCode            string `protobuf:"bytes,7,opt,name=facility_type_code,json=facilityTypeCode,proto3" json:"facility_type_code,omitempty"`
	OtherFacility               string `protobuf:"bytes,8,opt,name=other_facility,json=otherFacility,proto3" json:"other_facility,omitempty"`
	LocationId                  uint32 `protobuf:"varint,9,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	ModeOfTransportCode         string `protobuf:"bytes,10,opt,name=mode_of_transport_code,json=modeOfTransportCode,proto3" json:"mode_of_transport_code,omitempty"`
	VesselId                    uint32 `protobuf:"varint,11,opt,name=vessel_id,json=vesselId,proto3" json:"vessel_id,omitempty"`
	ImportVoyageId              uint32 `protobuf:"varint,12,opt,name=import_voyage_id,json=importVoyageId,proto3" json:"import_voyage_id,omitempty"`
	ExportVoyageId              uint32 `protobuf:"varint,13,opt,name=export_voyage_id,json=exportVoyageId,proto3" json:"export_voyage_id,omitempty"`
	PortCallStatusCode          string `protobuf:"bytes,14,opt,name=port_call_status_code,json=portCallStatusCode,proto3" json:"port_call_status_code,omitempty"`
	PortVisitReference          string `protobuf:"bytes,15,opt,name=port_visit_reference,json=portVisitReference,proto3" json:"port_visit_reference,omitempty"`
}

func (x *TransportCallD) Reset() {
	*x = TransportCallD{}
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportCallD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportCallD) ProtoMessage() {}

func (x *TransportCallD) ProtoReflect() protoreflect.Message {
	mi := &file_eventcore_v1_transportcall_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportCallD.ProtoReflect.Descriptor instead.
func (*TransportCallD) Descriptor() ([]byte, []int) {
	return file_eventcore_v1_transportcall_proto_rawDescGZIP(), []int{9}
}

func (x *TransportCallD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransportCallD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *TransportCallD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *TransportCallD) GetTransportCallReference() string {
	if x != nil {
		return x.TransportCallReference
	}
	return ""
}

func (x *TransportCallD) GetTransportCallSequenceNumber() uint32 {
	if x != nil {
		return x.TransportCallSequenceNumber
	}
	return 0
}

func (x *TransportCallD) GetFacilityId() uint32 {
	if x != nil {
		return x.FacilityId
	}
	return 0
}

func (x *TransportCallD) GetFacilityTypeCode() string {
	if x != nil {
		return x.FacilityTypeCode
	}
	return ""
}

func (x *TransportCallD) GetOtherFacility() string {
	if x != nil {
		return x.OtherFacility
	}
	return ""
}

func (x *TransportCallD) GetLocationId() uint32 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *TransportCallD) GetModeOfTransportCode() string {
	if x != nil {
		return x.ModeOfTransportCode
	}
	return ""
}

func (x *TransportCallD) GetVesselId() uint32 {
	if x != nil {
		return x.VesselId
	}
	return 0
}

func (x *TransportCallD) GetImportVoyageId() uint32 {
	if x != nil {
		return x.ImportVoyageId
	}
	return 0
}

func (x *TransportCallD) GetExportVoyageId() uint32 {
	if x != nil {
		return x.ExportVoyageId
	}
	return 0
}

func (x *TransportCallD) GetPortCallStatusCode() string {
	if x != nil {
		return x.PortCallStatusCode
	}
	return ""
}

func (x *TransportCallD) GetPortVisitReference() string {
	if x != nil {
		return x.PortVisitReference
	}
	return ""
}

var File_eventcore_v1_transportcall_proto protoreflect.FileDescriptor

var file_eventcore_v1_transportcall_proto_rawDesc = []byte{
	0x0a, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x19, 0x46, 0x69, 0x6e,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x63, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x79,
	0x50, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x67, 0x65, 0x74,
	0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0e, 0x67, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x62, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x22, 0xad, 0x05, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x51, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x14, 0x72, 0x12, 0x18, 0x14, 0x32, 0x0e, 0x5e,
	0x5c, 0x53, 0x2b, 0x28, 0x5c, 0x73, 0x2b, 0x5c, 0x73, 0x2b, 0x29, 0x2a, 0x24, 0x52, 0x16, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f,
	0x79, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x6f, 0x79, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x82, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xc3, 0x01,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x46, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xea, 0x04, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04,
	0x69, 0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12,
	0x38, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x32, 0xbd, 0x03, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x28, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x26, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x46,
	0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x26, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x50, 0x6b, 0x12, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x64, 0x63,
	0x73, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eventcore_v1_transportcall_proto_rawDescOnce sync.Once
	file_eventcore_v1_transportcall_proto_rawDescData = file_eventcore_v1_transportcall_proto_rawDesc
)

func file_eventcore_v1_transportcall_proto_rawDescGZIP() []byte {
	file_eventcore_v1_transportcall_proto_rawDescOnce.Do(func() {
		file_eventcore_v1_transportcall_proto_rawDescData = protoimpl.X.CompressGZIP(file_eventcore_v1_transportcall_proto_rawDescData)
	})
	return file_eventcore_v1_transportcall_proto_rawDescData
}

var file_eventcore_v1_transportcall_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_eventcore_v1_transportcall_proto_goTypes = []any{
	(*FindTransportCallRequest)(nil),     // 0: eventcore.v1.FindTransportCallRequest
	(*FindTransportCallResponse)(nil),    // 1: eventcore.v1.FindTransportCallResponse
	(*GetTransportCallByPkRequest)(nil),  // 2: eventcore.v1.GetTransportCallByPkRequest
	(*GetTransportCallByPkResponse)(nil), // 3: eventcore.v1.GetTransportCallByPkResponse
	(*CreateTransportCallRequest)(nil),   // 4: eventcore.v1.CreateTransportCallRequest
	(*CreateTransportCallResponse)(nil),  // 5: eventcore.v1.CreateTransportCallResponse
	(*GetTransportCallsResponse)(nil),    // 6: eventcore.v1.GetTransportCallsResponse
	(*GetTransportCallsRequest)(nil),     // 7: eventcore.v1.GetTransportCallsRequest
	(*TransportCall)(nil),                // 8: eventcore.v1.TransportCall
	(*TransportCallD)(nil),               // 9: eventcore.v1.TransportCallD
	(*v1.GetRequest)(nil),                // 10: common.v1.GetRequest
	(*v1.GetByIdRequest)(nil),            // 11: common.v1.GetByIdRequest
	(*v1.CrUpdUser)(nil),                 // 12: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                 // 13: common.v1.CrUpdTime
}
var file_eventcore_v1_transportcall_proto_depIdxs = []int32{
	10, // 0: eventcore.v1.FindTransportCallRequest.get_request:type_name -> common.v1.GetRequest
	8,  // 1: eventcore.v1.FindTransportCallResponse.transport_call:type_name -> eventcore.v1.TransportCall
	11, // 2: eventcore.v1.GetTransportCallByPkRequest.get_by_id_request:type_name -> common.v1.GetByIdRequest
	8,  // 3: eventcore.v1.GetTransportCallByPkResponse.transport_call:type_name -> eventcore.v1.TransportCall
	8,  // 4: eventcore.v1.CreateTransportCallResponse.transport_call:type_name -> eventcore.v1.TransportCall
	8,  // 5: eventcore.v1.GetTransportCallsResponse.transport_calls:type_name -> eventcore.v1.TransportCall
	9,  // 6: eventcore.v1.TransportCall.transport_call_d:type_name -> eventcore.v1.TransportCallD
	12, // 7: eventcore.v1.TransportCall.cr_upd_user:type_name -> common.v1.CrUpdUser
	13, // 8: eventcore.v1.TransportCall.cr_upd_time:type_name -> common.v1.CrUpdTime
	4,  // 9: eventcore.v1.TransportCallService.CreateTransportCall:input_type -> eventcore.v1.CreateTransportCallRequest
	7,  // 10: eventcore.v1.TransportCallService.GetTransportCalls:input_type -> eventcore.v1.GetTransportCallsRequest
	0,  // 11: eventcore.v1.TransportCallService.FindTransportCall:input_type -> eventcore.v1.FindTransportCallRequest
	2,  // 12: eventcore.v1.TransportCallService.GetTransportCallByPk:input_type -> eventcore.v1.GetTransportCallByPkRequest
	5,  // 13: eventcore.v1.TransportCallService.CreateTransportCall:output_type -> eventcore.v1.CreateTransportCallResponse
	6,  // 14: eventcore.v1.TransportCallService.GetTransportCalls:output_type -> eventcore.v1.GetTransportCallsResponse
	1,  // 15: eventcore.v1.TransportCallService.FindTransportCall:output_type -> eventcore.v1.FindTransportCallResponse
	3,  // 16: eventcore.v1.TransportCallService.GetTransportCallByPk:output_type -> eventcore.v1.GetTransportCallByPkResponse
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_eventcore_v1_transportcall_proto_init() }
func file_eventcore_v1_transportcall_proto_init() {
	if File_eventcore_v1_transportcall_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eventcore_v1_transportcall_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eventcore_v1_transportcall_proto_goTypes,
		DependencyIndexes: file_eventcore_v1_transportcall_proto_depIdxs,
		MessageInfos:      file_eventcore_v1_transportcall_proto_msgTypes,
	}.Build()
	File_eventcore_v1_transportcall_proto = out.File
	file_eventcore_v1_transportcall_proto_rawDesc = nil
	file_eventcore_v1_transportcall_proto_goTypes = nil
	file_eventcore_v1_transportcall_proto_depIdxs = nil
}
