// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tnt/v3/event.proto

package v3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EquipmentEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EquipmentEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EquipmentEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EquipmentEventMultiError,
// or nil if none found.
func (m *EquipmentEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *EquipmentEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEquipmentEventD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EquipmentEventValidationError{
					field:  "EquipmentEventD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EquipmentEventValidationError{
					field:  "EquipmentEventD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEquipmentEventD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentEventValidationError{
				field:  "EquipmentEventD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEquipmentEventT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EquipmentEventValidationError{
					field:  "EquipmentEventT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EquipmentEventValidationError{
					field:  "EquipmentEventT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEquipmentEventT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentEventValidationError{
				field:  "EquipmentEventT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EquipmentEventMultiError(errors)
	}

	return nil
}

// EquipmentEventMultiError is an error wrapping multiple validation errors
// returned by EquipmentEvent.ValidateAll() if the designated constraints
// aren't met.
type EquipmentEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EquipmentEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EquipmentEventMultiError) AllErrors() []error { return m }

// EquipmentEventValidationError is the validation error returned by
// EquipmentEvent.Validate if the designated constraints aren't met.
type EquipmentEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentEventValidationError) ErrorName() string { return "EquipmentEventValidationError" }

// Error satisfies the builtin error interface
func (e EquipmentEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentEventValidationError{}

// Validate checks the field values on EquipmentEventD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EquipmentEventD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EquipmentEventD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EquipmentEventDMultiError, or nil if none found.
func (m *EquipmentEventD) ValidateAll() error {
	return m.validate(true)
}

func (m *EquipmentEventD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EventIdS

	// no validation rules for EventClassifierCode

	// no validation rules for EquipmentEventTypeCode

	// no validation rules for EquipmentReference

	// no validation rules for EmptyIndicatorCode

	// no validation rules for TransportCallId

	// no validation rules for EventLocation

	if len(errors) > 0 {
		return EquipmentEventDMultiError(errors)
	}

	return nil
}

// EquipmentEventDMultiError is an error wrapping multiple validation errors
// returned by EquipmentEventD.ValidateAll() if the designated constraints
// aren't met.
type EquipmentEventDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EquipmentEventDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EquipmentEventDMultiError) AllErrors() []error { return m }

// EquipmentEventDValidationError is the validation error returned by
// EquipmentEventD.Validate if the designated constraints aren't met.
type EquipmentEventDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentEventDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentEventDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentEventDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentEventDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentEventDValidationError) ErrorName() string { return "EquipmentEventDValidationError" }

// Error satisfies the builtin error interface
func (e EquipmentEventDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentEventD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentEventDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentEventDValidationError{}

// Validate checks the field values on EquipmentEventT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EquipmentEventT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EquipmentEventT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EquipmentEventTMultiError, or nil if none found.
func (m *EquipmentEventT) ValidateAll() error {
	return m.validate(true)
}

func (m *EquipmentEventT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEventCreatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EquipmentEventTValidationError{
					field:  "EventCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EquipmentEventTValidationError{
					field:  "EventCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventCreatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentEventTValidationError{
				field:  "EventCreatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEventDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EquipmentEventTValidationError{
					field:  "EventDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EquipmentEventTValidationError{
					field:  "EventDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentEventTValidationError{
				field:  "EventDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EquipmentEventTMultiError(errors)
	}

	return nil
}

// EquipmentEventTMultiError is an error wrapping multiple validation errors
// returned by EquipmentEventT.ValidateAll() if the designated constraints
// aren't met.
type EquipmentEventTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EquipmentEventTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EquipmentEventTMultiError) AllErrors() []error { return m }

// EquipmentEventTValidationError is the validation error returned by
// EquipmentEventT.Validate if the designated constraints aren't met.
type EquipmentEventTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentEventTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentEventTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentEventTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentEventTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentEventTValidationError) ErrorName() string { return "EquipmentEventTValidationError" }

// Error satisfies the builtin error interface
func (e EquipmentEventTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentEventT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentEventTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentEventTValidationError{}

// Validate checks the field values on CreateEquipmentEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEquipmentEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEquipmentEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEquipmentEventRequestMultiError, or nil if none found.
func (m *CreateEquipmentEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEquipmentEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEquipmentEventRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEquipmentEventRequestValidationError{
						field:  fmt.Sprintf("EquipmentEventRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEquipmentEventRequestValidationError{
						field:  fmt.Sprintf("EquipmentEventRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEquipmentEventRequestValidationError{
					field:  fmt.Sprintf("EquipmentEventRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateEquipmentEventRequestMultiError(errors)
	}

	return nil
}

// CreateEquipmentEventRequestMultiError is an error wrapping multiple
// validation errors returned by CreateEquipmentEventRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateEquipmentEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEquipmentEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEquipmentEventRequestMultiError) AllErrors() []error { return m }

// CreateEquipmentEventRequestValidationError is the validation error returned
// by CreateEquipmentEventRequest.Validate if the designated constraints
// aren't met.
type CreateEquipmentEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEquipmentEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEquipmentEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEquipmentEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEquipmentEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEquipmentEventRequestValidationError) ErrorName() string {
	return "CreateEquipmentEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEquipmentEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEquipmentEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEquipmentEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEquipmentEventRequestValidationError{}

// Validate checks the field values on EquipmentEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EquipmentEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EquipmentEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EquipmentEventRequestMultiError, or nil if none found.
func (m *EquipmentEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EquipmentEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventClassifierCode

	// no validation rules for EventCreatedDateTime

	// no validation rules for EventDateTime

	// no validation rules for EquipmentEventTypeCode

	// no validation rules for EquipmentReference

	// no validation rules for EmptyIndicatorCode

	// no validation rules for TransportCallId

	// no validation rules for EventLocation

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return EquipmentEventRequestMultiError(errors)
	}

	return nil
}

// EquipmentEventRequestMultiError is an error wrapping multiple validation
// errors returned by EquipmentEventRequest.ValidateAll() if the designated
// constraints aren't met.
type EquipmentEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EquipmentEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EquipmentEventRequestMultiError) AllErrors() []error { return m }

// EquipmentEventRequestValidationError is the validation error returned by
// EquipmentEventRequest.Validate if the designated constraints aren't met.
type EquipmentEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentEventRequestValidationError) ErrorName() string {
	return "EquipmentEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EquipmentEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentEventRequestValidationError{}

// Validate checks the field values on CreateEquipmentEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEquipmentEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEquipmentEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEquipmentEventResponseMultiError, or nil if none found.
func (m *CreateEquipmentEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEquipmentEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateEquipmentEventResponseMultiError(errors)
	}

	return nil
}

// CreateEquipmentEventResponseMultiError is an error wrapping multiple
// validation errors returned by CreateEquipmentEventResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateEquipmentEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEquipmentEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEquipmentEventResponseMultiError) AllErrors() []error { return m }

// CreateEquipmentEventResponseValidationError is the validation error returned
// by CreateEquipmentEventResponse.Validate if the designated constraints
// aren't met.
type CreateEquipmentEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEquipmentEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEquipmentEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEquipmentEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEquipmentEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEquipmentEventResponseValidationError) ErrorName() string {
	return "CreateEquipmentEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEquipmentEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEquipmentEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEquipmentEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEquipmentEventResponseValidationError{}

// Validate checks the field values on LoadEquipmentRelatedEntitiesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LoadEquipmentRelatedEntitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadEquipmentRelatedEntitiesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LoadEquipmentRelatedEntitiesResponseMultiError, or nil if none found.
func (m *LoadEquipmentRelatedEntitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadEquipmentRelatedEntitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEquipmentEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadEquipmentRelatedEntitiesResponseValidationError{
						field:  fmt.Sprintf("EquipmentEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadEquipmentRelatedEntitiesResponseValidationError{
						field:  fmt.Sprintf("EquipmentEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadEquipmentRelatedEntitiesResponseValidationError{
					field:  fmt.Sprintf("EquipmentEvents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return LoadEquipmentRelatedEntitiesResponseMultiError(errors)
	}

	return nil
}

// LoadEquipmentRelatedEntitiesResponseMultiError is an error wrapping multiple
// validation errors returned by
// LoadEquipmentRelatedEntitiesResponse.ValidateAll() if the designated
// constraints aren't met.
type LoadEquipmentRelatedEntitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadEquipmentRelatedEntitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadEquipmentRelatedEntitiesResponseMultiError) AllErrors() []error { return m }

// LoadEquipmentRelatedEntitiesResponseValidationError is the validation error
// returned by LoadEquipmentRelatedEntitiesResponse.Validate if the designated
// constraints aren't met.
type LoadEquipmentRelatedEntitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadEquipmentRelatedEntitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadEquipmentRelatedEntitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadEquipmentRelatedEntitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadEquipmentRelatedEntitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadEquipmentRelatedEntitiesResponseValidationError) ErrorName() string {
	return "LoadEquipmentRelatedEntitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoadEquipmentRelatedEntitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadEquipmentRelatedEntitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadEquipmentRelatedEntitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadEquipmentRelatedEntitiesResponseValidationError{}

// Validate checks the field values on LoadEquipmentRelatedEntitiesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LoadEquipmentRelatedEntitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadEquipmentRelatedEntitiesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LoadEquipmentRelatedEntitiesRequestMultiError, or nil if none found.
func (m *LoadEquipmentRelatedEntitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadEquipmentRelatedEntitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return LoadEquipmentRelatedEntitiesRequestMultiError(errors)
	}

	return nil
}

// LoadEquipmentRelatedEntitiesRequestMultiError is an error wrapping multiple
// validation errors returned by
// LoadEquipmentRelatedEntitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type LoadEquipmentRelatedEntitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadEquipmentRelatedEntitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadEquipmentRelatedEntitiesRequestMultiError) AllErrors() []error { return m }

// LoadEquipmentRelatedEntitiesRequestValidationError is the validation error
// returned by LoadEquipmentRelatedEntitiesRequest.Validate if the designated
// constraints aren't met.
type LoadEquipmentRelatedEntitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadEquipmentRelatedEntitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadEquipmentRelatedEntitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadEquipmentRelatedEntitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadEquipmentRelatedEntitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadEquipmentRelatedEntitiesRequestValidationError) ErrorName() string {
	return "LoadEquipmentRelatedEntitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadEquipmentRelatedEntitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadEquipmentRelatedEntitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadEquipmentRelatedEntitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadEquipmentRelatedEntitiesRequestValidationError{}

// Validate checks the field values on OperationsEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OperationsEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperationsEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperationsEventMultiError, or nil if none found.
func (m *OperationsEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *OperationsEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperationsEventD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperationsEventValidationError{
					field:  "OperationsEventD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperationsEventValidationError{
					field:  "OperationsEventD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperationsEventD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperationsEventValidationError{
				field:  "OperationsEventD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperationsEventT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperationsEventValidationError{
					field:  "OperationsEventT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperationsEventValidationError{
					field:  "OperationsEventT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperationsEventT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperationsEventValidationError{
				field:  "OperationsEventT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OperationsEventMultiError(errors)
	}

	return nil
}

// OperationsEventMultiError is an error wrapping multiple validation errors
// returned by OperationsEvent.ValidateAll() if the designated constraints
// aren't met.
type OperationsEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperationsEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperationsEventMultiError) AllErrors() []error { return m }

// OperationsEventValidationError is the validation error returned by
// OperationsEvent.Validate if the designated constraints aren't met.
type OperationsEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperationsEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperationsEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperationsEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperationsEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperationsEventValidationError) ErrorName() string { return "OperationsEventValidationError" }

// Error satisfies the builtin error interface
func (e OperationsEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperationsEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperationsEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperationsEventValidationError{}

// Validate checks the field values on OperationsEventD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OperationsEventD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperationsEventD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperationsEventDMultiError, or nil if none found.
func (m *OperationsEventD) ValidateAll() error {
	return m.validate(true)
}

func (m *OperationsEventD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EventIdS

	// no validation rules for EventClassifierCode

	// no validation rules for Publisher

	// no validation rules for PublisherRole

	// no validation rules for OperationsEventTypeCode

	// no validation rules for EventLocation

	// no validation rules for TransportCallId

	// no validation rules for PortCallServiceTypeCode

	// no validation rules for FacilityTypeCode

	// no validation rules for DelayReasonCode

	// no validation rules for VesselPosition

	// no validation rules for Remark

	// no validation rules for PortCallPhaseTypeCode

	// no validation rules for VesselDraft

	// no validation rules for VesselDraftUnit

	// no validation rules for MilesRemainingToDestination

	if len(errors) > 0 {
		return OperationsEventDMultiError(errors)
	}

	return nil
}

// OperationsEventDMultiError is an error wrapping multiple validation errors
// returned by OperationsEventD.ValidateAll() if the designated constraints
// aren't met.
type OperationsEventDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperationsEventDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperationsEventDMultiError) AllErrors() []error { return m }

// OperationsEventDValidationError is the validation error returned by
// OperationsEventD.Validate if the designated constraints aren't met.
type OperationsEventDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperationsEventDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperationsEventDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperationsEventDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperationsEventDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperationsEventDValidationError) ErrorName() string { return "OperationsEventDValidationError" }

// Error satisfies the builtin error interface
func (e OperationsEventDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperationsEventD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperationsEventDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperationsEventDValidationError{}

// Validate checks the field values on OperationsEventT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OperationsEventT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperationsEventT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperationsEventTMultiError, or nil if none found.
func (m *OperationsEventT) ValidateAll() error {
	return m.validate(true)
}

func (m *OperationsEventT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEventCreatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperationsEventTValidationError{
					field:  "EventCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperationsEventTValidationError{
					field:  "EventCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventCreatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperationsEventTValidationError{
				field:  "EventCreatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEventDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperationsEventTValidationError{
					field:  "EventDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperationsEventTValidationError{
					field:  "EventDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperationsEventTValidationError{
				field:  "EventDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OperationsEventTMultiError(errors)
	}

	return nil
}

// OperationsEventTMultiError is an error wrapping multiple validation errors
// returned by OperationsEventT.ValidateAll() if the designated constraints
// aren't met.
type OperationsEventTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperationsEventTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperationsEventTMultiError) AllErrors() []error { return m }

// OperationsEventTValidationError is the validation error returned by
// OperationsEventT.Validate if the designated constraints aren't met.
type OperationsEventTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperationsEventTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperationsEventTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperationsEventTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperationsEventTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperationsEventTValidationError) ErrorName() string { return "OperationsEventTValidationError" }

// Error satisfies the builtin error interface
func (e OperationsEventTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperationsEventT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperationsEventTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperationsEventTValidationError{}

// Validate checks the field values on CreateOperationsEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperationsEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperationsEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOperationsEventRequestMultiError, or nil if none found.
func (m *CreateOperationsEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperationsEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOperationsEventRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOperationsEventRequestValidationError{
						field:  fmt.Sprintf("OperationsEventRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOperationsEventRequestValidationError{
						field:  fmt.Sprintf("OperationsEventRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOperationsEventRequestValidationError{
					field:  fmt.Sprintf("OperationsEventRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateOperationsEventRequestMultiError(errors)
	}

	return nil
}

// CreateOperationsEventRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOperationsEventRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOperationsEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperationsEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperationsEventRequestMultiError) AllErrors() []error { return m }

// CreateOperationsEventRequestValidationError is the validation error returned
// by CreateOperationsEventRequest.Validate if the designated constraints
// aren't met.
type CreateOperationsEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperationsEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperationsEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperationsEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperationsEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperationsEventRequestValidationError) ErrorName() string {
	return "CreateOperationsEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperationsEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperationsEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperationsEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperationsEventRequestValidationError{}

// Validate checks the field values on OperationsEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OperationsEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperationsEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperationsEventRequestMultiError, or nil if none found.
func (m *OperationsEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OperationsEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventClassifierCode

	// no validation rules for EventCreatedDateTime

	// no validation rules for EventDateTime

	// no validation rules for Publisher

	// no validation rules for PublisherRole

	// no validation rules for OperationsEventTypeCode

	// no validation rules for EventLocation

	// no validation rules for TransportCallId

	// no validation rules for PortCallServiceTypeCode

	// no validation rules for FacilityTypeCode

	// no validation rules for DelayReasonCode

	// no validation rules for VesselPosition

	// no validation rules for Remark

	// no validation rules for PortCallPhaseTypeCode

	// no validation rules for VesselDraft

	// no validation rules for VesselDraftUnit

	// no validation rules for MilesRemainingToDestination

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return OperationsEventRequestMultiError(errors)
	}

	return nil
}

// OperationsEventRequestMultiError is an error wrapping multiple validation
// errors returned by OperationsEventRequest.ValidateAll() if the designated
// constraints aren't met.
type OperationsEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperationsEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperationsEventRequestMultiError) AllErrors() []error { return m }

// OperationsEventRequestValidationError is the validation error returned by
// OperationsEventRequest.Validate if the designated constraints aren't met.
type OperationsEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperationsEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperationsEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperationsEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperationsEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperationsEventRequestValidationError) ErrorName() string {
	return "OperationsEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OperationsEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperationsEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperationsEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperationsEventRequestValidationError{}

// Validate checks the field values on CreateOperationsEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperationsEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperationsEventResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOperationsEventResponseMultiError, or nil if none found.
func (m *CreateOperationsEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperationsEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOperationsEventResponseMultiError(errors)
	}

	return nil
}

// CreateOperationsEventResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOperationsEventResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateOperationsEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperationsEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperationsEventResponseMultiError) AllErrors() []error { return m }

// CreateOperationsEventResponseValidationError is the validation error
// returned by CreateOperationsEventResponse.Validate if the designated
// constraints aren't met.
type CreateOperationsEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperationsEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperationsEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperationsEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperationsEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperationsEventResponseValidationError) ErrorName() string {
	return "CreateOperationsEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperationsEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperationsEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperationsEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperationsEventResponseValidationError{}

// Validate checks the field values on LoadOperationsRelatedEntitiesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LoadOperationsRelatedEntitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadOperationsRelatedEntitiesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LoadOperationsRelatedEntitiesResponseMultiError, or nil if none found.
func (m *LoadOperationsRelatedEntitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadOperationsRelatedEntitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOperationsEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadOperationsRelatedEntitiesResponseValidationError{
						field:  fmt.Sprintf("OperationsEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadOperationsRelatedEntitiesResponseValidationError{
						field:  fmt.Sprintf("OperationsEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadOperationsRelatedEntitiesResponseValidationError{
					field:  fmt.Sprintf("OperationsEvents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return LoadOperationsRelatedEntitiesResponseMultiError(errors)
	}

	return nil
}

// LoadOperationsRelatedEntitiesResponseMultiError is an error wrapping
// multiple validation errors returned by
// LoadOperationsRelatedEntitiesResponse.ValidateAll() if the designated
// constraints aren't met.
type LoadOperationsRelatedEntitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadOperationsRelatedEntitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadOperationsRelatedEntitiesResponseMultiError) AllErrors() []error { return m }

// LoadOperationsRelatedEntitiesResponseValidationError is the validation error
// returned by LoadOperationsRelatedEntitiesResponse.Validate if the
// designated constraints aren't met.
type LoadOperationsRelatedEntitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadOperationsRelatedEntitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadOperationsRelatedEntitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadOperationsRelatedEntitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadOperationsRelatedEntitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadOperationsRelatedEntitiesResponseValidationError) ErrorName() string {
	return "LoadOperationsRelatedEntitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoadOperationsRelatedEntitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadOperationsRelatedEntitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadOperationsRelatedEntitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadOperationsRelatedEntitiesResponseValidationError{}

// Validate checks the field values on LoadOperationsRelatedEntitiesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LoadOperationsRelatedEntitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadOperationsRelatedEntitiesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LoadOperationsRelatedEntitiesRequestMultiError, or nil if none found.
func (m *LoadOperationsRelatedEntitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadOperationsRelatedEntitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return LoadOperationsRelatedEntitiesRequestMultiError(errors)
	}

	return nil
}

// LoadOperationsRelatedEntitiesRequestMultiError is an error wrapping multiple
// validation errors returned by
// LoadOperationsRelatedEntitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type LoadOperationsRelatedEntitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadOperationsRelatedEntitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadOperationsRelatedEntitiesRequestMultiError) AllErrors() []error { return m }

// LoadOperationsRelatedEntitiesRequestValidationError is the validation error
// returned by LoadOperationsRelatedEntitiesRequest.Validate if the designated
// constraints aren't met.
type LoadOperationsRelatedEntitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadOperationsRelatedEntitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadOperationsRelatedEntitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadOperationsRelatedEntitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadOperationsRelatedEntitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadOperationsRelatedEntitiesRequestValidationError) ErrorName() string {
	return "LoadOperationsRelatedEntitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadOperationsRelatedEntitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadOperationsRelatedEntitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadOperationsRelatedEntitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadOperationsRelatedEntitiesRequestValidationError{}

// Validate checks the field values on ShipmentEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShipmentEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShipmentEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShipmentEventMultiError, or
// nil if none found.
func (m *ShipmentEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *ShipmentEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShipmentEventD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentEventValidationError{
					field:  "ShipmentEventD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentEventValidationError{
					field:  "ShipmentEventD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipmentEventD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentEventValidationError{
				field:  "ShipmentEventD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShipmentEventT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentEventValidationError{
					field:  "ShipmentEventT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentEventValidationError{
					field:  "ShipmentEventT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipmentEventT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentEventValidationError{
				field:  "ShipmentEventT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShipmentEventMultiError(errors)
	}

	return nil
}

// ShipmentEventMultiError is an error wrapping multiple validation errors
// returned by ShipmentEvent.ValidateAll() if the designated constraints
// aren't met.
type ShipmentEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipmentEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipmentEventMultiError) AllErrors() []error { return m }

// ShipmentEventValidationError is the validation error returned by
// ShipmentEvent.Validate if the designated constraints aren't met.
type ShipmentEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipmentEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipmentEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipmentEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipmentEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipmentEventValidationError) ErrorName() string { return "ShipmentEventValidationError" }

// Error satisfies the builtin error interface
func (e ShipmentEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipmentEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipmentEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipmentEventValidationError{}

// Validate checks the field values on ShipmentEventD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShipmentEventD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShipmentEventD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShipmentEventDMultiError,
// or nil if none found.
func (m *ShipmentEventD) ValidateAll() error {
	return m.validate(true)
}

func (m *ShipmentEventD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EventIdS

	// no validation rules for EventClassifierCode

	// no validation rules for ShipmentEventTypeCode

	// no validation rules for DocumentTypeCode

	// no validation rules for DocumentId

	// no validation rules for DocumentReference

	// no validation rules for Reason

	if len(errors) > 0 {
		return ShipmentEventDMultiError(errors)
	}

	return nil
}

// ShipmentEventDMultiError is an error wrapping multiple validation errors
// returned by ShipmentEventD.ValidateAll() if the designated constraints
// aren't met.
type ShipmentEventDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipmentEventDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipmentEventDMultiError) AllErrors() []error { return m }

// ShipmentEventDValidationError is the validation error returned by
// ShipmentEventD.Validate if the designated constraints aren't met.
type ShipmentEventDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipmentEventDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipmentEventDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipmentEventDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipmentEventDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipmentEventDValidationError) ErrorName() string { return "ShipmentEventDValidationError" }

// Error satisfies the builtin error interface
func (e ShipmentEventDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipmentEventD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipmentEventDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipmentEventDValidationError{}

// Validate checks the field values on ShipmentEventT with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShipmentEventT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShipmentEventT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShipmentEventTMultiError,
// or nil if none found.
func (m *ShipmentEventT) ValidateAll() error {
	return m.validate(true)
}

func (m *ShipmentEventT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEventCreatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentEventTValidationError{
					field:  "EventCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentEventTValidationError{
					field:  "EventCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventCreatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentEventTValidationError{
				field:  "EventCreatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEventDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShipmentEventTValidationError{
					field:  "EventDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShipmentEventTValidationError{
					field:  "EventDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShipmentEventTValidationError{
				field:  "EventDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShipmentEventTMultiError(errors)
	}

	return nil
}

// ShipmentEventTMultiError is an error wrapping multiple validation errors
// returned by ShipmentEventT.ValidateAll() if the designated constraints
// aren't met.
type ShipmentEventTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipmentEventTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipmentEventTMultiError) AllErrors() []error { return m }

// ShipmentEventTValidationError is the validation error returned by
// ShipmentEventT.Validate if the designated constraints aren't met.
type ShipmentEventTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipmentEventTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipmentEventTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipmentEventTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipmentEventTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipmentEventTValidationError) ErrorName() string { return "ShipmentEventTValidationError" }

// Error satisfies the builtin error interface
func (e ShipmentEventTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipmentEventT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipmentEventTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipmentEventTValidationError{}

// Validate checks the field values on CreateShipmentEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShipmentEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShipmentEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShipmentEventRequestMultiError, or nil if none found.
func (m *CreateShipmentEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShipmentEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetShipmentEventRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateShipmentEventRequestValidationError{
						field:  fmt.Sprintf("ShipmentEventRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateShipmentEventRequestValidationError{
						field:  fmt.Sprintf("ShipmentEventRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateShipmentEventRequestValidationError{
					field:  fmt.Sprintf("ShipmentEventRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateShipmentEventRequestMultiError(errors)
	}

	return nil
}

// CreateShipmentEventRequestMultiError is an error wrapping multiple
// validation errors returned by CreateShipmentEventRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateShipmentEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShipmentEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShipmentEventRequestMultiError) AllErrors() []error { return m }

// CreateShipmentEventRequestValidationError is the validation error returned
// by CreateShipmentEventRequest.Validate if the designated constraints aren't met.
type CreateShipmentEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShipmentEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShipmentEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShipmentEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShipmentEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShipmentEventRequestValidationError) ErrorName() string {
	return "CreateShipmentEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShipmentEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShipmentEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShipmentEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShipmentEventRequestValidationError{}

// Validate checks the field values on ShipmentEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShipmentEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShipmentEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShipmentEventRequestMultiError, or nil if none found.
func (m *ShipmentEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShipmentEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventClassifierCode

	// no validation rules for EventCreatedDateTime

	// no validation rules for EventDateTime

	// no validation rules for ShipmentEventTypeCode

	// no validation rules for DocumentTypeCode

	// no validation rules for DocumentId

	// no validation rules for DocumentReference

	// no validation rules for Reason

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	// no validation rules for BookingId

	// no validation rules for ShippingInstructionId

	if len(errors) > 0 {
		return ShipmentEventRequestMultiError(errors)
	}

	return nil
}

// ShipmentEventRequestMultiError is an error wrapping multiple validation
// errors returned by ShipmentEventRequest.ValidateAll() if the designated
// constraints aren't met.
type ShipmentEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipmentEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipmentEventRequestMultiError) AllErrors() []error { return m }

// ShipmentEventRequestValidationError is the validation error returned by
// ShipmentEventRequest.Validate if the designated constraints aren't met.
type ShipmentEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipmentEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipmentEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipmentEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipmentEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipmentEventRequestValidationError) ErrorName() string {
	return "ShipmentEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShipmentEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipmentEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipmentEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipmentEventRequestValidationError{}

// Validate checks the field values on CreateShipmentEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShipmentEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShipmentEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShipmentEventResponseMultiError, or nil if none found.
func (m *CreateShipmentEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShipmentEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateShipmentEventResponseMultiError(errors)
	}

	return nil
}

// CreateShipmentEventResponseMultiError is an error wrapping multiple
// validation errors returned by CreateShipmentEventResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateShipmentEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShipmentEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShipmentEventResponseMultiError) AllErrors() []error { return m }

// CreateShipmentEventResponseValidationError is the validation error returned
// by CreateShipmentEventResponse.Validate if the designated constraints
// aren't met.
type CreateShipmentEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShipmentEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShipmentEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShipmentEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShipmentEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShipmentEventResponseValidationError) ErrorName() string {
	return "CreateShipmentEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShipmentEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShipmentEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShipmentEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShipmentEventResponseValidationError{}

// Validate checks the field values on CreateShipmentEventFromBookingRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateShipmentEventFromBookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShipmentEventFromBookingRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateShipmentEventFromBookingRequestMultiError, or nil if none found.
func (m *CreateShipmentEventFromBookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShipmentEventFromBookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreateShipmentEventRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShipmentEventFromBookingRequestValidationError{
					field:  "CreateShipmentEventRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShipmentEventFromBookingRequestValidationError{
					field:  "CreateShipmentEventRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateShipmentEventRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShipmentEventFromBookingRequestValidationError{
				field:  "CreateShipmentEventRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateShipmentEventFromBookingRequestMultiError(errors)
	}

	return nil
}

// CreateShipmentEventFromBookingRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateShipmentEventFromBookingRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateShipmentEventFromBookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShipmentEventFromBookingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShipmentEventFromBookingRequestMultiError) AllErrors() []error { return m }

// CreateShipmentEventFromBookingRequestValidationError is the validation error
// returned by CreateShipmentEventFromBookingRequest.Validate if the
// designated constraints aren't met.
type CreateShipmentEventFromBookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShipmentEventFromBookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShipmentEventFromBookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShipmentEventFromBookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShipmentEventFromBookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShipmentEventFromBookingRequestValidationError) ErrorName() string {
	return "CreateShipmentEventFromBookingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShipmentEventFromBookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShipmentEventFromBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShipmentEventFromBookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShipmentEventFromBookingRequestValidationError{}

// Validate checks the field values on CreateShipmentEventFromBookingResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateShipmentEventFromBookingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateShipmentEventFromBookingResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateShipmentEventFromBookingResponseMultiError, or nil if none found.
func (m *CreateShipmentEventFromBookingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShipmentEventFromBookingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShipmentEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShipmentEventFromBookingResponseValidationError{
					field:  "ShipmentEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShipmentEventFromBookingResponseValidationError{
					field:  "ShipmentEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipmentEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShipmentEventFromBookingResponseValidationError{
				field:  "ShipmentEvent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShipmentEventFromBookingResponseMultiError(errors)
	}

	return nil
}

// CreateShipmentEventFromBookingResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateShipmentEventFromBookingResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateShipmentEventFromBookingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShipmentEventFromBookingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShipmentEventFromBookingResponseMultiError) AllErrors() []error { return m }

// CreateShipmentEventFromBookingResponseValidationError is the validation
// error returned by CreateShipmentEventFromBookingResponse.Validate if the
// designated constraints aren't met.
type CreateShipmentEventFromBookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShipmentEventFromBookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShipmentEventFromBookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShipmentEventFromBookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShipmentEventFromBookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShipmentEventFromBookingResponseValidationError) ErrorName() string {
	return "CreateShipmentEventFromBookingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShipmentEventFromBookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShipmentEventFromBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShipmentEventFromBookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShipmentEventFromBookingResponseValidationError{}

// Validate checks the field values on
// CreateShipmentEventFromShippingInstructionRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateShipmentEventFromShippingInstructionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateShipmentEventFromShippingInstructionRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateShipmentEventFromShippingInstructionRequestMultiError, or nil if none found.
func (m *CreateShipmentEventFromShippingInstructionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShipmentEventFromShippingInstructionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreateShipmentEventRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShipmentEventFromShippingInstructionRequestValidationError{
					field:  "CreateShipmentEventRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShipmentEventFromShippingInstructionRequestValidationError{
					field:  "CreateShipmentEventRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateShipmentEventRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShipmentEventFromShippingInstructionRequestValidationError{
				field:  "CreateShipmentEventRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateShipmentEventFromShippingInstructionRequestMultiError(errors)
	}

	return nil
}

// CreateShipmentEventFromShippingInstructionRequestMultiError is an error
// wrapping multiple validation errors returned by
// CreateShipmentEventFromShippingInstructionRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateShipmentEventFromShippingInstructionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShipmentEventFromShippingInstructionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShipmentEventFromShippingInstructionRequestMultiError) AllErrors() []error { return m }

// CreateShipmentEventFromShippingInstructionRequestValidationError is the
// validation error returned by
// CreateShipmentEventFromShippingInstructionRequest.Validate if the
// designated constraints aren't met.
type CreateShipmentEventFromShippingInstructionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShipmentEventFromShippingInstructionRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateShipmentEventFromShippingInstructionRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateShipmentEventFromShippingInstructionRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateShipmentEventFromShippingInstructionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShipmentEventFromShippingInstructionRequestValidationError) ErrorName() string {
	return "CreateShipmentEventFromShippingInstructionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShipmentEventFromShippingInstructionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShipmentEventFromShippingInstructionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShipmentEventFromShippingInstructionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShipmentEventFromShippingInstructionRequestValidationError{}

// Validate checks the field values on
// CreateShipmentEventFromShippingInstructionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateShipmentEventFromShippingInstructionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateShipmentEventFromShippingInstructionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateShipmentEventFromShippingInstructionResponseMultiError, or nil if
// none found.
func (m *CreateShipmentEventFromShippingInstructionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShipmentEventFromShippingInstructionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShipmentEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShipmentEventFromShippingInstructionResponseValidationError{
					field:  "ShipmentEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShipmentEventFromShippingInstructionResponseValidationError{
					field:  "ShipmentEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShipmentEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShipmentEventFromShippingInstructionResponseValidationError{
				field:  "ShipmentEvent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShipmentEventFromShippingInstructionResponseMultiError(errors)
	}

	return nil
}

// CreateShipmentEventFromShippingInstructionResponseMultiError is an error
// wrapping multiple validation errors returned by
// CreateShipmentEventFromShippingInstructionResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateShipmentEventFromShippingInstructionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShipmentEventFromShippingInstructionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShipmentEventFromShippingInstructionResponseMultiError) AllErrors() []error { return m }

// CreateShipmentEventFromShippingInstructionResponseValidationError is the
// validation error returned by
// CreateShipmentEventFromShippingInstructionResponse.Validate if the
// designated constraints aren't met.
type CreateShipmentEventFromShippingInstructionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShipmentEventFromShippingInstructionResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateShipmentEventFromShippingInstructionResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateShipmentEventFromShippingInstructionResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateShipmentEventFromShippingInstructionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShipmentEventFromShippingInstructionResponseValidationError) ErrorName() string {
	return "CreateShipmentEventFromShippingInstructionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShipmentEventFromShippingInstructionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShipmentEventFromShippingInstructionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShipmentEventFromShippingInstructionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShipmentEventFromShippingInstructionResponseValidationError{}

// Validate checks the field values on LoadShipmentRelatedEntitiesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LoadShipmentRelatedEntitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadShipmentRelatedEntitiesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LoadShipmentRelatedEntitiesResponseMultiError, or nil if none found.
func (m *LoadShipmentRelatedEntitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadShipmentRelatedEntitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetShipmentEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadShipmentRelatedEntitiesResponseValidationError{
						field:  fmt.Sprintf("ShipmentEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadShipmentRelatedEntitiesResponseValidationError{
						field:  fmt.Sprintf("ShipmentEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadShipmentRelatedEntitiesResponseValidationError{
					field:  fmt.Sprintf("ShipmentEvents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return LoadShipmentRelatedEntitiesResponseMultiError(errors)
	}

	return nil
}

// LoadShipmentRelatedEntitiesResponseMultiError is an error wrapping multiple
// validation errors returned by
// LoadShipmentRelatedEntitiesResponse.ValidateAll() if the designated
// constraints aren't met.
type LoadShipmentRelatedEntitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadShipmentRelatedEntitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadShipmentRelatedEntitiesResponseMultiError) AllErrors() []error { return m }

// LoadShipmentRelatedEntitiesResponseValidationError is the validation error
// returned by LoadShipmentRelatedEntitiesResponse.Validate if the designated
// constraints aren't met.
type LoadShipmentRelatedEntitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadShipmentRelatedEntitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadShipmentRelatedEntitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadShipmentRelatedEntitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadShipmentRelatedEntitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadShipmentRelatedEntitiesResponseValidationError) ErrorName() string {
	return "LoadShipmentRelatedEntitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoadShipmentRelatedEntitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadShipmentRelatedEntitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadShipmentRelatedEntitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadShipmentRelatedEntitiesResponseValidationError{}

// Validate checks the field values on LoadShipmentRelatedEntitiesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LoadShipmentRelatedEntitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadShipmentRelatedEntitiesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LoadShipmentRelatedEntitiesRequestMultiError, or nil if none found.
func (m *LoadShipmentRelatedEntitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadShipmentRelatedEntitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return LoadShipmentRelatedEntitiesRequestMultiError(errors)
	}

	return nil
}

// LoadShipmentRelatedEntitiesRequestMultiError is an error wrapping multiple
// validation errors returned by
// LoadShipmentRelatedEntitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type LoadShipmentRelatedEntitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadShipmentRelatedEntitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadShipmentRelatedEntitiesRequestMultiError) AllErrors() []error { return m }

// LoadShipmentRelatedEntitiesRequestValidationError is the validation error
// returned by LoadShipmentRelatedEntitiesRequest.Validate if the designated
// constraints aren't met.
type LoadShipmentRelatedEntitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadShipmentRelatedEntitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadShipmentRelatedEntitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadShipmentRelatedEntitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadShipmentRelatedEntitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadShipmentRelatedEntitiesRequestValidationError) ErrorName() string {
	return "LoadShipmentRelatedEntitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadShipmentRelatedEntitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadShipmentRelatedEntitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadShipmentRelatedEntitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadShipmentRelatedEntitiesRequestValidationError{}

// Validate checks the field values on TransportEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TransportEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransportEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransportEventMultiError,
// or nil if none found.
func (m *TransportEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *TransportEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransportEventD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportEventValidationError{
					field:  "TransportEventD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportEventValidationError{
					field:  "TransportEventD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportEventD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportEventValidationError{
				field:  "TransportEventD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTransportEventT()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportEventValidationError{
					field:  "TransportEventT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportEventValidationError{
					field:  "TransportEventT",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransportEventT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportEventValidationError{
				field:  "TransportEventT",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransportEventMultiError(errors)
	}

	return nil
}

// TransportEventMultiError is an error wrapping multiple validation errors
// returned by TransportEvent.ValidateAll() if the designated constraints
// aren't met.
type TransportEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportEventMultiError) AllErrors() []error { return m }

// TransportEventValidationError is the validation error returned by
// TransportEvent.Validate if the designated constraints aren't met.
type TransportEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportEventValidationError) ErrorName() string { return "TransportEventValidationError" }

// Error satisfies the builtin error interface
func (e TransportEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransportEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportEventValidationError{}

// Validate checks the field values on TransportEventD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransportEventD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransportEventD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransportEventDMultiError, or nil if none found.
func (m *TransportEventD) ValidateAll() error {
	return m.validate(true)
}

func (m *TransportEventD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EventIdS

	// no validation rules for EventClassifierCode

	// no validation rules for TransportEventTypeCode

	// no validation rules for DelayReasonCode

	// no validation rules for ChangeRemark

	// no validation rules for TransportCallId

	if len(errors) > 0 {
		return TransportEventDMultiError(errors)
	}

	return nil
}

// TransportEventDMultiError is an error wrapping multiple validation errors
// returned by TransportEventD.ValidateAll() if the designated constraints
// aren't met.
type TransportEventDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportEventDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportEventDMultiError) AllErrors() []error { return m }

// TransportEventDValidationError is the validation error returned by
// TransportEventD.Validate if the designated constraints aren't met.
type TransportEventDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportEventDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportEventDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportEventDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportEventDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportEventDValidationError) ErrorName() string { return "TransportEventDValidationError" }

// Error satisfies the builtin error interface
func (e TransportEventDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransportEventD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportEventDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportEventDValidationError{}

// Validate checks the field values on TransportEventT with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransportEventT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransportEventT with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransportEventTMultiError, or nil if none found.
func (m *TransportEventT) ValidateAll() error {
	return m.validate(true)
}

func (m *TransportEventT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEventCreatedDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportEventTValidationError{
					field:  "EventCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportEventTValidationError{
					field:  "EventCreatedDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventCreatedDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportEventTValidationError{
				field:  "EventCreatedDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEventDateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransportEventTValidationError{
					field:  "EventDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransportEventTValidationError{
					field:  "EventDateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventDateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransportEventTValidationError{
				field:  "EventDateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransportEventTMultiError(errors)
	}

	return nil
}

// TransportEventTMultiError is an error wrapping multiple validation errors
// returned by TransportEventT.ValidateAll() if the designated constraints
// aren't met.
type TransportEventTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportEventTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportEventTMultiError) AllErrors() []error { return m }

// TransportEventTValidationError is the validation error returned by
// TransportEventT.Validate if the designated constraints aren't met.
type TransportEventTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportEventTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportEventTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportEventTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportEventTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportEventTValidationError) ErrorName() string { return "TransportEventTValidationError" }

// Error satisfies the builtin error interface
func (e TransportEventTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransportEventT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportEventTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportEventTValidationError{}

// Validate checks the field values on CreateTransportEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransportEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransportEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransportEventRequestMultiError, or nil if none found.
func (m *CreateTransportEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransportEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransportEventRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateTransportEventRequestValidationError{
						field:  fmt.Sprintf("TransportEventRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateTransportEventRequestValidationError{
						field:  fmt.Sprintf("TransportEventRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTransportEventRequestValidationError{
					field:  fmt.Sprintf("TransportEventRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateTransportEventRequestMultiError(errors)
	}

	return nil
}

// CreateTransportEventRequestMultiError is an error wrapping multiple
// validation errors returned by CreateTransportEventRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateTransportEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransportEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransportEventRequestMultiError) AllErrors() []error { return m }

// CreateTransportEventRequestValidationError is the validation error returned
// by CreateTransportEventRequest.Validate if the designated constraints
// aren't met.
type CreateTransportEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransportEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransportEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransportEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransportEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransportEventRequestValidationError) ErrorName() string {
	return "CreateTransportEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransportEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransportEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransportEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransportEventRequestValidationError{}

// Validate checks the field values on TransportEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransportEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransportEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransportEventRequestMultiError, or nil if none found.
func (m *TransportEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransportEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventClassifierCode

	// no validation rules for EventCreatedDateTime

	// no validation rules for EventDateTime

	// no validation rules for TransportEventTypeCode

	// no validation rules for DelayReasonCode

	// no validation rules for ChangeRemark

	// no validation rules for TransportCallId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return TransportEventRequestMultiError(errors)
	}

	return nil
}

// TransportEventRequestMultiError is an error wrapping multiple validation
// errors returned by TransportEventRequest.ValidateAll() if the designated
// constraints aren't met.
type TransportEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportEventRequestMultiError) AllErrors() []error { return m }

// TransportEventRequestValidationError is the validation error returned by
// TransportEventRequest.Validate if the designated constraints aren't met.
type TransportEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportEventRequestValidationError) ErrorName() string {
	return "TransportEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransportEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransportEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportEventRequestValidationError{}

// Validate checks the field values on CreateTransportEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransportEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransportEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransportEventResponseMultiError, or nil if none found.
func (m *CreateTransportEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransportEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateTransportEventResponseMultiError(errors)
	}

	return nil
}

// CreateTransportEventResponseMultiError is an error wrapping multiple
// validation errors returned by CreateTransportEventResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateTransportEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransportEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransportEventResponseMultiError) AllErrors() []error { return m }

// CreateTransportEventResponseValidationError is the validation error returned
// by CreateTransportEventResponse.Validate if the designated constraints
// aren't met.
type CreateTransportEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransportEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransportEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransportEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransportEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransportEventResponseValidationError) ErrorName() string {
	return "CreateTransportEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransportEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransportEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransportEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransportEventResponseValidationError{}

// Validate checks the field values on LoadTransportRelatedEntitiesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LoadTransportRelatedEntitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadTransportRelatedEntitiesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LoadTransportRelatedEntitiesResponseMultiError, or nil if none found.
func (m *LoadTransportRelatedEntitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadTransportRelatedEntitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransportEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadTransportRelatedEntitiesResponseValidationError{
						field:  fmt.Sprintf("TransportEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadTransportRelatedEntitiesResponseValidationError{
						field:  fmt.Sprintf("TransportEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadTransportRelatedEntitiesResponseValidationError{
					field:  fmt.Sprintf("TransportEvents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return LoadTransportRelatedEntitiesResponseMultiError(errors)
	}

	return nil
}

// LoadTransportRelatedEntitiesResponseMultiError is an error wrapping multiple
// validation errors returned by
// LoadTransportRelatedEntitiesResponse.ValidateAll() if the designated
// constraints aren't met.
type LoadTransportRelatedEntitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadTransportRelatedEntitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadTransportRelatedEntitiesResponseMultiError) AllErrors() []error { return m }

// LoadTransportRelatedEntitiesResponseValidationError is the validation error
// returned by LoadTransportRelatedEntitiesResponse.Validate if the designated
// constraints aren't met.
type LoadTransportRelatedEntitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadTransportRelatedEntitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadTransportRelatedEntitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadTransportRelatedEntitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadTransportRelatedEntitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadTransportRelatedEntitiesResponseValidationError) ErrorName() string {
	return "LoadTransportRelatedEntitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoadTransportRelatedEntitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadTransportRelatedEntitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadTransportRelatedEntitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadTransportRelatedEntitiesResponseValidationError{}

// Validate checks the field values on LoadTransportRelatedEntitiesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LoadTransportRelatedEntitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadTransportRelatedEntitiesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LoadTransportRelatedEntitiesRequestMultiError, or nil if none found.
func (m *LoadTransportRelatedEntitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadTransportRelatedEntitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return LoadTransportRelatedEntitiesRequestMultiError(errors)
	}

	return nil
}

// LoadTransportRelatedEntitiesRequestMultiError is an error wrapping multiple
// validation errors returned by
// LoadTransportRelatedEntitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type LoadTransportRelatedEntitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadTransportRelatedEntitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadTransportRelatedEntitiesRequestMultiError) AllErrors() []error { return m }

// LoadTransportRelatedEntitiesRequestValidationError is the validation error
// returned by LoadTransportRelatedEntitiesRequest.Validate if the designated
// constraints aren't met.
type LoadTransportRelatedEntitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadTransportRelatedEntitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadTransportRelatedEntitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadTransportRelatedEntitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadTransportRelatedEntitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadTransportRelatedEntitiesRequestValidationError) ErrorName() string {
	return "LoadTransportRelatedEntitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadTransportRelatedEntitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadTransportRelatedEntitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadTransportRelatedEntitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadTransportRelatedEntitiesRequestValidationError{}
