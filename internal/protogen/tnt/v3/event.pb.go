// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: tnt/v3/event.proto

package v3

import (
	_ "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EquipmentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipmentEventD *EquipmentEventD `protobuf:"bytes,1,opt,name=equipment_event_d,json=equipmentEventD,proto3" json:"equipment_event_d,omitempty"`
	EquipmentEventT *EquipmentEventT `protobuf:"bytes,2,opt,name=equipment_event_t,json=equipmentEventT,proto3" json:"equipment_event_t,omitempty"`
}

func (x *EquipmentEvent) Reset() {
	*x = EquipmentEvent{}
	mi := &file_tnt_v3_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipmentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentEvent) ProtoMessage() {}

func (x *EquipmentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentEvent.ProtoReflect.Descriptor instead.
func (*EquipmentEvent) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{0}
}

func (x *EquipmentEvent) GetEquipmentEventD() *EquipmentEventD {
	if x != nil {
		return x.EquipmentEventD
	}
	return nil
}

func (x *EquipmentEvent) GetEquipmentEventT() *EquipmentEventT {
	if x != nil {
		return x.EquipmentEventT
	}
	return nil
}

type EquipmentEventD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventIdS               []byte `protobuf:"bytes,2,opt,name=event_id_s,json=eventIdS,proto3" json:"event_id_s,omitempty"`
	EventClassifierCode    string `protobuf:"bytes,3,opt,name=event_classifier_code,json=eventClassifierCode,proto3" json:"event_classifier_code,omitempty"`
	EquipmentEventTypeCode string `protobuf:"bytes,4,opt,name=equipment_event_type_code,json=equipmentEventTypeCode,proto3" json:"equipment_event_type_code,omitempty"`
	EquipmentReference     string `protobuf:"bytes,5,opt,name=equipment_reference,json=equipmentReference,proto3" json:"equipment_reference,omitempty"`
	EmptyIndicatorCode     string `protobuf:"bytes,6,opt,name=empty_indicator_code,json=emptyIndicatorCode,proto3" json:"empty_indicator_code,omitempty"`
	TransportCallId        uint32 `protobuf:"varint,7,opt,name=transport_call_id,json=transportCallId,proto3" json:"transport_call_id,omitempty"`
	EventLocation          string `protobuf:"bytes,8,opt,name=event_location,json=eventLocation,proto3" json:"event_location,omitempty"`
}

func (x *EquipmentEventD) Reset() {
	*x = EquipmentEventD{}
	mi := &file_tnt_v3_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipmentEventD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentEventD) ProtoMessage() {}

func (x *EquipmentEventD) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentEventD.ProtoReflect.Descriptor instead.
func (*EquipmentEventD) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{1}
}

func (x *EquipmentEventD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EquipmentEventD) GetEventIdS() []byte {
	if x != nil {
		return x.EventIdS
	}
	return nil
}

func (x *EquipmentEventD) GetEventClassifierCode() string {
	if x != nil {
		return x.EventClassifierCode
	}
	return ""
}

func (x *EquipmentEventD) GetEquipmentEventTypeCode() string {
	if x != nil {
		return x.EquipmentEventTypeCode
	}
	return ""
}

func (x *EquipmentEventD) GetEquipmentReference() string {
	if x != nil {
		return x.EquipmentReference
	}
	return ""
}

func (x *EquipmentEventD) GetEmptyIndicatorCode() string {
	if x != nil {
		return x.EmptyIndicatorCode
	}
	return ""
}

func (x *EquipmentEventD) GetTransportCallId() uint32 {
	if x != nil {
		return x.TransportCallId
	}
	return 0
}

func (x *EquipmentEventD) GetEventLocation() string {
	if x != nil {
		return x.EventLocation
	}
	return ""
}

type EquipmentEventT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventCreatedDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=event_created_date_time,json=eventCreatedDateTime,proto3" json:"event_created_date_time,omitempty"`
	EventDateTime        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
}

func (x *EquipmentEventT) Reset() {
	*x = EquipmentEventT{}
	mi := &file_tnt_v3_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipmentEventT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentEventT) ProtoMessage() {}

func (x *EquipmentEventT) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentEventT.ProtoReflect.Descriptor instead.
func (*EquipmentEventT) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{2}
}

func (x *EquipmentEventT) GetEventCreatedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventCreatedDateTime
	}
	return nil
}

func (x *EquipmentEventT) GetEventDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventDateTime
	}
	return nil
}

type CreateEquipmentEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipmentEventRequests []*EquipmentEventRequest `protobuf:"bytes,1,rep,name=equipment_event_requests,json=equipmentEventRequests,proto3" json:"equipment_event_requests,omitempty"`
	UserId                 string                   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string                   `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string                   `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateEquipmentEventRequest) Reset() {
	*x = CreateEquipmentEventRequest{}
	mi := &file_tnt_v3_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEquipmentEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEquipmentEventRequest) ProtoMessage() {}

func (x *CreateEquipmentEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEquipmentEventRequest.ProtoReflect.Descriptor instead.
func (*CreateEquipmentEventRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{3}
}

func (x *CreateEquipmentEventRequest) GetEquipmentEventRequests() []*EquipmentEventRequest {
	if x != nil {
		return x.EquipmentEventRequests
	}
	return nil
}

func (x *CreateEquipmentEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateEquipmentEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateEquipmentEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type EquipmentEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventClassifierCode    string `protobuf:"bytes,1,opt,name=event_classifier_code,json=eventClassifierCode,proto3" json:"event_classifier_code,omitempty"`
	EventCreatedDateTime   string `protobuf:"bytes,2,opt,name=event_created_date_time,json=eventCreatedDateTime,proto3" json:"event_created_date_time,omitempty"`
	EventDateTime          string `protobuf:"bytes,3,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
	EquipmentEventTypeCode string `protobuf:"bytes,4,opt,name=equipment_event_type_code,json=equipmentEventTypeCode,proto3" json:"equipment_event_type_code,omitempty"`
	EquipmentReference     string `protobuf:"bytes,5,opt,name=equipment_reference,json=equipmentReference,proto3" json:"equipment_reference,omitempty"`
	EmptyIndicatorCode     string `protobuf:"bytes,6,opt,name=empty_indicator_code,json=emptyIndicatorCode,proto3" json:"empty_indicator_code,omitempty"`
	TransportCallId        uint32 `protobuf:"varint,7,opt,name=transport_call_id,json=transportCallId,proto3" json:"transport_call_id,omitempty"`
	EventLocation          string `protobuf:"bytes,8,opt,name=event_location,json=eventLocation,proto3" json:"event_location,omitempty"`
	UserId                 string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *EquipmentEventRequest) Reset() {
	*x = EquipmentEventRequest{}
	mi := &file_tnt_v3_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipmentEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentEventRequest) ProtoMessage() {}

func (x *EquipmentEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentEventRequest.ProtoReflect.Descriptor instead.
func (*EquipmentEventRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{4}
}

func (x *EquipmentEventRequest) GetEventClassifierCode() string {
	if x != nil {
		return x.EventClassifierCode
	}
	return ""
}

func (x *EquipmentEventRequest) GetEventCreatedDateTime() string {
	if x != nil {
		return x.EventCreatedDateTime
	}
	return ""
}

func (x *EquipmentEventRequest) GetEventDateTime() string {
	if x != nil {
		return x.EventDateTime
	}
	return ""
}

func (x *EquipmentEventRequest) GetEquipmentEventTypeCode() string {
	if x != nil {
		return x.EquipmentEventTypeCode
	}
	return ""
}

func (x *EquipmentEventRequest) GetEquipmentReference() string {
	if x != nil {
		return x.EquipmentReference
	}
	return ""
}

func (x *EquipmentEventRequest) GetEmptyIndicatorCode() string {
	if x != nil {
		return x.EmptyIndicatorCode
	}
	return ""
}

func (x *EquipmentEventRequest) GetTransportCallId() uint32 {
	if x != nil {
		return x.TransportCallId
	}
	return 0
}

func (x *EquipmentEventRequest) GetEventLocation() string {
	if x != nil {
		return x.EventLocation
	}
	return ""
}

func (x *EquipmentEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EquipmentEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *EquipmentEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateEquipmentEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateEquipmentEventResponse) Reset() {
	*x = CreateEquipmentEventResponse{}
	mi := &file_tnt_v3_event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEquipmentEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEquipmentEventResponse) ProtoMessage() {}

func (x *CreateEquipmentEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEquipmentEventResponse.ProtoReflect.Descriptor instead.
func (*CreateEquipmentEventResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{5}
}

type LoadEquipmentRelatedEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipmentEvents []*EquipmentEvent `protobuf:"bytes,1,rep,name=equipment_events,json=equipmentEvents,proto3" json:"equipment_events,omitempty"`
	NextCursor      string            `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *LoadEquipmentRelatedEntitiesResponse) Reset() {
	*x = LoadEquipmentRelatedEntitiesResponse{}
	mi := &file_tnt_v3_event_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadEquipmentRelatedEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadEquipmentRelatedEntitiesResponse) ProtoMessage() {}

func (x *LoadEquipmentRelatedEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadEquipmentRelatedEntitiesResponse.ProtoReflect.Descriptor instead.
func (*LoadEquipmentRelatedEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{6}
}

func (x *LoadEquipmentRelatedEntitiesResponse) GetEquipmentEvents() []*EquipmentEvent {
	if x != nil {
		return x.EquipmentEvents
	}
	return nil
}

func (x *LoadEquipmentRelatedEntitiesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type LoadEquipmentRelatedEntitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *LoadEquipmentRelatedEntitiesRequest) Reset() {
	*x = LoadEquipmentRelatedEntitiesRequest{}
	mi := &file_tnt_v3_event_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadEquipmentRelatedEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadEquipmentRelatedEntitiesRequest) ProtoMessage() {}

func (x *LoadEquipmentRelatedEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadEquipmentRelatedEntitiesRequest.ProtoReflect.Descriptor instead.
func (*LoadEquipmentRelatedEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{7}
}

func (x *LoadEquipmentRelatedEntitiesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *LoadEquipmentRelatedEntitiesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *LoadEquipmentRelatedEntitiesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *LoadEquipmentRelatedEntitiesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type OperationsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationsEventD *OperationsEventD `protobuf:"bytes,1,opt,name=operations_event_d,json=operationsEventD,proto3" json:"operations_event_d,omitempty"`
	OperationsEventT *OperationsEventT `protobuf:"bytes,2,opt,name=operations_event_t,json=operationsEventT,proto3" json:"operations_event_t,omitempty"`
}

func (x *OperationsEvent) Reset() {
	*x = OperationsEvent{}
	mi := &file_tnt_v3_event_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationsEvent) ProtoMessage() {}

func (x *OperationsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationsEvent.ProtoReflect.Descriptor instead.
func (*OperationsEvent) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{8}
}

func (x *OperationsEvent) GetOperationsEventD() *OperationsEventD {
	if x != nil {
		return x.OperationsEventD
	}
	return nil
}

func (x *OperationsEvent) GetOperationsEventT() *OperationsEventT {
	if x != nil {
		return x.OperationsEventT
	}
	return nil
}

type OperationsEventD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventIdS                    []byte  `protobuf:"bytes,2,opt,name=event_id_s,json=eventIdS,proto3" json:"event_id_s,omitempty"`
	EventClassifierCode         string  `protobuf:"bytes,3,opt,name=event_classifier_code,json=eventClassifierCode,proto3" json:"event_classifier_code,omitempty"`
	Publisher                   string  `protobuf:"bytes,4,opt,name=publisher,proto3" json:"publisher,omitempty"`
	PublisherRole               string  `protobuf:"bytes,5,opt,name=publisher_role,json=publisherRole,proto3" json:"publisher_role,omitempty"`
	OperationsEventTypeCode     string  `protobuf:"bytes,6,opt,name=operations_event_type_code,json=operationsEventTypeCode,proto3" json:"operations_event_type_code,omitempty"`
	EventLocation               string  `protobuf:"bytes,7,opt,name=event_location,json=eventLocation,proto3" json:"event_location,omitempty"`
	TransportCallId             uint32  `protobuf:"varint,8,opt,name=transport_call_id,json=transportCallId,proto3" json:"transport_call_id,omitempty"`
	PortCallServiceTypeCode     string  `protobuf:"bytes,9,opt,name=port_call_service_type_code,json=portCallServiceTypeCode,proto3" json:"port_call_service_type_code,omitempty"`
	FacilityTypeCode            string  `protobuf:"bytes,10,opt,name=facility_type_code,json=facilityTypeCode,proto3" json:"facility_type_code,omitempty"`
	DelayReasonCode             string  `protobuf:"bytes,11,opt,name=delay_reason_code,json=delayReasonCode,proto3" json:"delay_reason_code,omitempty"`
	VesselPosition              string  `protobuf:"bytes,12,opt,name=vessel_position,json=vesselPosition,proto3" json:"vessel_position,omitempty"`
	Remark                      string  `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
	PortCallPhaseTypeCode       string  `protobuf:"bytes,14,opt,name=port_call_phase_type_code,json=portCallPhaseTypeCode,proto3" json:"port_call_phase_type_code,omitempty"`
	VesselDraft                 float64 `protobuf:"fixed64,15,opt,name=vessel_draft,json=vesselDraft,proto3" json:"vessel_draft,omitempty"`
	VesselDraftUnit             string  `protobuf:"bytes,16,opt,name=vessel_draft_unit,json=vesselDraftUnit,proto3" json:"vessel_draft_unit,omitempty"`
	MilesRemainingToDestination float64 `protobuf:"fixed64,17,opt,name=miles_remaining_to_destination,json=milesRemainingToDestination,proto3" json:"miles_remaining_to_destination,omitempty"`
}

func (x *OperationsEventD) Reset() {
	*x = OperationsEventD{}
	mi := &file_tnt_v3_event_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationsEventD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationsEventD) ProtoMessage() {}

func (x *OperationsEventD) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationsEventD.ProtoReflect.Descriptor instead.
func (*OperationsEventD) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{9}
}

func (x *OperationsEventD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OperationsEventD) GetEventIdS() []byte {
	if x != nil {
		return x.EventIdS
	}
	return nil
}

func (x *OperationsEventD) GetEventClassifierCode() string {
	if x != nil {
		return x.EventClassifierCode
	}
	return ""
}

func (x *OperationsEventD) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *OperationsEventD) GetPublisherRole() string {
	if x != nil {
		return x.PublisherRole
	}
	return ""
}

func (x *OperationsEventD) GetOperationsEventTypeCode() string {
	if x != nil {
		return x.OperationsEventTypeCode
	}
	return ""
}

func (x *OperationsEventD) GetEventLocation() string {
	if x != nil {
		return x.EventLocation
	}
	return ""
}

func (x *OperationsEventD) GetTransportCallId() uint32 {
	if x != nil {
		return x.TransportCallId
	}
	return 0
}

func (x *OperationsEventD) GetPortCallServiceTypeCode() string {
	if x != nil {
		return x.PortCallServiceTypeCode
	}
	return ""
}

func (x *OperationsEventD) GetFacilityTypeCode() string {
	if x != nil {
		return x.FacilityTypeCode
	}
	return ""
}

func (x *OperationsEventD) GetDelayReasonCode() string {
	if x != nil {
		return x.DelayReasonCode
	}
	return ""
}

func (x *OperationsEventD) GetVesselPosition() string {
	if x != nil {
		return x.VesselPosition
	}
	return ""
}

func (x *OperationsEventD) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *OperationsEventD) GetPortCallPhaseTypeCode() string {
	if x != nil {
		return x.PortCallPhaseTypeCode
	}
	return ""
}

func (x *OperationsEventD) GetVesselDraft() float64 {
	if x != nil {
		return x.VesselDraft
	}
	return 0
}

func (x *OperationsEventD) GetVesselDraftUnit() string {
	if x != nil {
		return x.VesselDraftUnit
	}
	return ""
}

func (x *OperationsEventD) GetMilesRemainingToDestination() float64 {
	if x != nil {
		return x.MilesRemainingToDestination
	}
	return 0
}

type OperationsEventT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventCreatedDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=event_created_date_time,json=eventCreatedDateTime,proto3" json:"event_created_date_time,omitempty"`
	EventDateTime        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
}

func (x *OperationsEventT) Reset() {
	*x = OperationsEventT{}
	mi := &file_tnt_v3_event_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationsEventT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationsEventT) ProtoMessage() {}

func (x *OperationsEventT) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationsEventT.ProtoReflect.Descriptor instead.
func (*OperationsEventT) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{10}
}

func (x *OperationsEventT) GetEventCreatedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventCreatedDateTime
	}
	return nil
}

func (x *OperationsEventT) GetEventDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventDateTime
	}
	return nil
}

type CreateOperationsEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationsEventRequests []*OperationsEventRequest `protobuf:"bytes,1,rep,name=operations_event_requests,json=operationsEventRequests,proto3" json:"operations_event_requests,omitempty"`
	UserId                  string                    `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail               string                    `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId               string                    `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateOperationsEventRequest) Reset() {
	*x = CreateOperationsEventRequest{}
	mi := &file_tnt_v3_event_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOperationsEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOperationsEventRequest) ProtoMessage() {}

func (x *CreateOperationsEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOperationsEventRequest.ProtoReflect.Descriptor instead.
func (*CreateOperationsEventRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{11}
}

func (x *CreateOperationsEventRequest) GetOperationsEventRequests() []*OperationsEventRequest {
	if x != nil {
		return x.OperationsEventRequests
	}
	return nil
}

func (x *CreateOperationsEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateOperationsEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateOperationsEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type OperationsEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventClassifierCode         string  `protobuf:"bytes,1,opt,name=event_classifier_code,json=eventClassifierCode,proto3" json:"event_classifier_code,omitempty"`
	EventCreatedDateTime        string  `protobuf:"bytes,2,opt,name=event_created_date_time,json=eventCreatedDateTime,proto3" json:"event_created_date_time,omitempty"`
	EventDateTime               string  `protobuf:"bytes,3,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
	Publisher                   string  `protobuf:"bytes,4,opt,name=publisher,proto3" json:"publisher,omitempty"`
	PublisherRole               string  `protobuf:"bytes,5,opt,name=publisher_role,json=publisherRole,proto3" json:"publisher_role,omitempty"`
	OperationsEventTypeCode     string  `protobuf:"bytes,6,opt,name=operations_event_type_code,json=operationsEventTypeCode,proto3" json:"operations_event_type_code,omitempty"`
	EventLocation               string  `protobuf:"bytes,7,opt,name=event_location,json=eventLocation,proto3" json:"event_location,omitempty"`
	TransportCallId             uint32  `protobuf:"varint,8,opt,name=transport_call_id,json=transportCallId,proto3" json:"transport_call_id,omitempty"`
	PortCallServiceTypeCode     string  `protobuf:"bytes,9,opt,name=port_call_service_type_code,json=portCallServiceTypeCode,proto3" json:"port_call_service_type_code,omitempty"`
	FacilityTypeCode            string  `protobuf:"bytes,10,opt,name=facility_type_code,json=facilityTypeCode,proto3" json:"facility_type_code,omitempty"`
	DelayReasonCode             string  `protobuf:"bytes,11,opt,name=delay_reason_code,json=delayReasonCode,proto3" json:"delay_reason_code,omitempty"`
	VesselPosition              string  `protobuf:"bytes,12,opt,name=vessel_position,json=vesselPosition,proto3" json:"vessel_position,omitempty"`
	Remark                      string  `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
	PortCallPhaseTypeCode       string  `protobuf:"bytes,14,opt,name=port_call_phase_type_code,json=portCallPhaseTypeCode,proto3" json:"port_call_phase_type_code,omitempty"`
	VesselDraft                 float64 `protobuf:"fixed64,15,opt,name=vessel_draft,json=vesselDraft,proto3" json:"vessel_draft,omitempty"`
	VesselDraftUnit             string  `protobuf:"bytes,16,opt,name=vessel_draft_unit,json=vesselDraftUnit,proto3" json:"vessel_draft_unit,omitempty"`
	MilesRemainingToDestination float64 `protobuf:"fixed64,17,opt,name=miles_remaining_to_destination,json=milesRemainingToDestination,proto3" json:"miles_remaining_to_destination,omitempty"`
	UserId                      string  `protobuf:"bytes,18,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                   string  `protobuf:"bytes,19,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                   string  `protobuf:"bytes,20,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *OperationsEventRequest) Reset() {
	*x = OperationsEventRequest{}
	mi := &file_tnt_v3_event_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationsEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationsEventRequest) ProtoMessage() {}

func (x *OperationsEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationsEventRequest.ProtoReflect.Descriptor instead.
func (*OperationsEventRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{12}
}

func (x *OperationsEventRequest) GetEventClassifierCode() string {
	if x != nil {
		return x.EventClassifierCode
	}
	return ""
}

func (x *OperationsEventRequest) GetEventCreatedDateTime() string {
	if x != nil {
		return x.EventCreatedDateTime
	}
	return ""
}

func (x *OperationsEventRequest) GetEventDateTime() string {
	if x != nil {
		return x.EventDateTime
	}
	return ""
}

func (x *OperationsEventRequest) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *OperationsEventRequest) GetPublisherRole() string {
	if x != nil {
		return x.PublisherRole
	}
	return ""
}

func (x *OperationsEventRequest) GetOperationsEventTypeCode() string {
	if x != nil {
		return x.OperationsEventTypeCode
	}
	return ""
}

func (x *OperationsEventRequest) GetEventLocation() string {
	if x != nil {
		return x.EventLocation
	}
	return ""
}

func (x *OperationsEventRequest) GetTransportCallId() uint32 {
	if x != nil {
		return x.TransportCallId
	}
	return 0
}

func (x *OperationsEventRequest) GetPortCallServiceTypeCode() string {
	if x != nil {
		return x.PortCallServiceTypeCode
	}
	return ""
}

func (x *OperationsEventRequest) GetFacilityTypeCode() string {
	if x != nil {
		return x.FacilityTypeCode
	}
	return ""
}

func (x *OperationsEventRequest) GetDelayReasonCode() string {
	if x != nil {
		return x.DelayReasonCode
	}
	return ""
}

func (x *OperationsEventRequest) GetVesselPosition() string {
	if x != nil {
		return x.VesselPosition
	}
	return ""
}

func (x *OperationsEventRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *OperationsEventRequest) GetPortCallPhaseTypeCode() string {
	if x != nil {
		return x.PortCallPhaseTypeCode
	}
	return ""
}

func (x *OperationsEventRequest) GetVesselDraft() float64 {
	if x != nil {
		return x.VesselDraft
	}
	return 0
}

func (x *OperationsEventRequest) GetVesselDraftUnit() string {
	if x != nil {
		return x.VesselDraftUnit
	}
	return ""
}

func (x *OperationsEventRequest) GetMilesRemainingToDestination() float64 {
	if x != nil {
		return x.MilesRemainingToDestination
	}
	return 0
}

func (x *OperationsEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OperationsEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *OperationsEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateOperationsEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateOperationsEventResponse) Reset() {
	*x = CreateOperationsEventResponse{}
	mi := &file_tnt_v3_event_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOperationsEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOperationsEventResponse) ProtoMessage() {}

func (x *CreateOperationsEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOperationsEventResponse.ProtoReflect.Descriptor instead.
func (*CreateOperationsEventResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{13}
}

type LoadOperationsRelatedEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationsEvents []*OperationsEvent `protobuf:"bytes,1,rep,name=operations_events,json=operationsEvents,proto3" json:"operations_events,omitempty"`
	NextCursor       string             `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *LoadOperationsRelatedEntitiesResponse) Reset() {
	*x = LoadOperationsRelatedEntitiesResponse{}
	mi := &file_tnt_v3_event_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadOperationsRelatedEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadOperationsRelatedEntitiesResponse) ProtoMessage() {}

func (x *LoadOperationsRelatedEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadOperationsRelatedEntitiesResponse.ProtoReflect.Descriptor instead.
func (*LoadOperationsRelatedEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{14}
}

func (x *LoadOperationsRelatedEntitiesResponse) GetOperationsEvents() []*OperationsEvent {
	if x != nil {
		return x.OperationsEvents
	}
	return nil
}

func (x *LoadOperationsRelatedEntitiesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type LoadOperationsRelatedEntitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *LoadOperationsRelatedEntitiesRequest) Reset() {
	*x = LoadOperationsRelatedEntitiesRequest{}
	mi := &file_tnt_v3_event_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadOperationsRelatedEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadOperationsRelatedEntitiesRequest) ProtoMessage() {}

func (x *LoadOperationsRelatedEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadOperationsRelatedEntitiesRequest.ProtoReflect.Descriptor instead.
func (*LoadOperationsRelatedEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{15}
}

func (x *LoadOperationsRelatedEntitiesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *LoadOperationsRelatedEntitiesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *LoadOperationsRelatedEntitiesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *LoadOperationsRelatedEntitiesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ShipmentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentEventD *ShipmentEventD `protobuf:"bytes,1,opt,name=shipment_event_d,json=shipmentEventD,proto3" json:"shipment_event_d,omitempty"`
	ShipmentEventT *ShipmentEventT `protobuf:"bytes,2,opt,name=shipment_event_t,json=shipmentEventT,proto3" json:"shipment_event_t,omitempty"`
}

func (x *ShipmentEvent) Reset() {
	*x = ShipmentEvent{}
	mi := &file_tnt_v3_event_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShipmentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentEvent) ProtoMessage() {}

func (x *ShipmentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentEvent.ProtoReflect.Descriptor instead.
func (*ShipmentEvent) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{16}
}

func (x *ShipmentEvent) GetShipmentEventD() *ShipmentEventD {
	if x != nil {
		return x.ShipmentEventD
	}
	return nil
}

func (x *ShipmentEvent) GetShipmentEventT() *ShipmentEventT {
	if x != nil {
		return x.ShipmentEventT
	}
	return nil
}

type ShipmentEventD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventIdS              []byte `protobuf:"bytes,2,opt,name=event_id_s,json=eventIdS,proto3" json:"event_id_s,omitempty"`
	EventClassifierCode   string `protobuf:"bytes,3,opt,name=event_classifier_code,json=eventClassifierCode,proto3" json:"event_classifier_code,omitempty"`
	ShipmentEventTypeCode string `protobuf:"bytes,4,opt,name=shipment_event_type_code,json=shipmentEventTypeCode,proto3" json:"shipment_event_type_code,omitempty"`
	DocumentTypeCode      string `protobuf:"bytes,5,opt,name=document_type_code,json=documentTypeCode,proto3" json:"document_type_code,omitempty"`
	DocumentId            uint32 `protobuf:"varint,6,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	DocumentReference     string `protobuf:"bytes,7,opt,name=document_reference,json=documentReference,proto3" json:"document_reference,omitempty"`
	Reason                string `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ShipmentEventD) Reset() {
	*x = ShipmentEventD{}
	mi := &file_tnt_v3_event_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShipmentEventD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentEventD) ProtoMessage() {}

func (x *ShipmentEventD) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentEventD.ProtoReflect.Descriptor instead.
func (*ShipmentEventD) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{17}
}

func (x *ShipmentEventD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShipmentEventD) GetEventIdS() []byte {
	if x != nil {
		return x.EventIdS
	}
	return nil
}

func (x *ShipmentEventD) GetEventClassifierCode() string {
	if x != nil {
		return x.EventClassifierCode
	}
	return ""
}

func (x *ShipmentEventD) GetShipmentEventTypeCode() string {
	if x != nil {
		return x.ShipmentEventTypeCode
	}
	return ""
}

func (x *ShipmentEventD) GetDocumentTypeCode() string {
	if x != nil {
		return x.DocumentTypeCode
	}
	return ""
}

func (x *ShipmentEventD) GetDocumentId() uint32 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *ShipmentEventD) GetDocumentReference() string {
	if x != nil {
		return x.DocumentReference
	}
	return ""
}

func (x *ShipmentEventD) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ShipmentEventT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventCreatedDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=event_created_date_time,json=eventCreatedDateTime,proto3" json:"event_created_date_time,omitempty"`
	EventDateTime        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
}

func (x *ShipmentEventT) Reset() {
	*x = ShipmentEventT{}
	mi := &file_tnt_v3_event_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShipmentEventT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentEventT) ProtoMessage() {}

func (x *ShipmentEventT) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentEventT.ProtoReflect.Descriptor instead.
func (*ShipmentEventT) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{18}
}

func (x *ShipmentEventT) GetEventCreatedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventCreatedDateTime
	}
	return nil
}

func (x *ShipmentEventT) GetEventDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventDateTime
	}
	return nil
}

type CreateShipmentEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentEventRequests []*ShipmentEventRequest `protobuf:"bytes,1,rep,name=shipment_event_requests,json=shipmentEventRequests,proto3" json:"shipment_event_requests,omitempty"`
	UserId                string                  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail             string                  `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId             string                  `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateShipmentEventRequest) Reset() {
	*x = CreateShipmentEventRequest{}
	mi := &file_tnt_v3_event_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShipmentEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentEventRequest) ProtoMessage() {}

func (x *CreateShipmentEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentEventRequest.ProtoReflect.Descriptor instead.
func (*CreateShipmentEventRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{19}
}

func (x *CreateShipmentEventRequest) GetShipmentEventRequests() []*ShipmentEventRequest {
	if x != nil {
		return x.ShipmentEventRequests
	}
	return nil
}

func (x *CreateShipmentEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateShipmentEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateShipmentEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ShipmentEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventClassifierCode   string `protobuf:"bytes,1,opt,name=event_classifier_code,json=eventClassifierCode,proto3" json:"event_classifier_code,omitempty"`
	EventCreatedDateTime  string `protobuf:"bytes,2,opt,name=event_created_date_time,json=eventCreatedDateTime,proto3" json:"event_created_date_time,omitempty"`
	EventDateTime         string `protobuf:"bytes,3,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
	ShipmentEventTypeCode string `protobuf:"bytes,4,opt,name=shipment_event_type_code,json=shipmentEventTypeCode,proto3" json:"shipment_event_type_code,omitempty"`
	DocumentTypeCode      string `protobuf:"bytes,5,opt,name=document_type_code,json=documentTypeCode,proto3" json:"document_type_code,omitempty"`
	DocumentId            uint32 `protobuf:"varint,6,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	DocumentReference     string `protobuf:"bytes,7,opt,name=document_reference,json=documentReference,proto3" json:"document_reference,omitempty"`
	Reason                string `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
	UserId                string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail             string `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId             string `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	BookingId             uint32 `protobuf:"varint,12,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	ShippingInstructionId uint32 `protobuf:"varint,13,opt,name=shipping_instruction_id,json=shippingInstructionId,proto3" json:"shipping_instruction_id,omitempty"`
}

func (x *ShipmentEventRequest) Reset() {
	*x = ShipmentEventRequest{}
	mi := &file_tnt_v3_event_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShipmentEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentEventRequest) ProtoMessage() {}

func (x *ShipmentEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentEventRequest.ProtoReflect.Descriptor instead.
func (*ShipmentEventRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{20}
}

func (x *ShipmentEventRequest) GetEventClassifierCode() string {
	if x != nil {
		return x.EventClassifierCode
	}
	return ""
}

func (x *ShipmentEventRequest) GetEventCreatedDateTime() string {
	if x != nil {
		return x.EventCreatedDateTime
	}
	return ""
}

func (x *ShipmentEventRequest) GetEventDateTime() string {
	if x != nil {
		return x.EventDateTime
	}
	return ""
}

func (x *ShipmentEventRequest) GetShipmentEventTypeCode() string {
	if x != nil {
		return x.ShipmentEventTypeCode
	}
	return ""
}

func (x *ShipmentEventRequest) GetDocumentTypeCode() string {
	if x != nil {
		return x.DocumentTypeCode
	}
	return ""
}

func (x *ShipmentEventRequest) GetDocumentId() uint32 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *ShipmentEventRequest) GetDocumentReference() string {
	if x != nil {
		return x.DocumentReference
	}
	return ""
}

func (x *ShipmentEventRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ShipmentEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShipmentEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *ShipmentEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ShipmentEventRequest) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

func (x *ShipmentEventRequest) GetShippingInstructionId() uint32 {
	if x != nil {
		return x.ShippingInstructionId
	}
	return 0
}

type CreateShipmentEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateShipmentEventResponse) Reset() {
	*x = CreateShipmentEventResponse{}
	mi := &file_tnt_v3_event_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShipmentEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentEventResponse) ProtoMessage() {}

func (x *CreateShipmentEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentEventResponse.ProtoReflect.Descriptor instead.
func (*CreateShipmentEventResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{21}
}

type CreateShipmentEventFromBookingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateShipmentEventRequest *ShipmentEventRequest `protobuf:"bytes,1,opt,name=create_shipment_event_request,json=createShipmentEventRequest,proto3" json:"create_shipment_event_request,omitempty"`
	UserId                     string                `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                  string                `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                  string                `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateShipmentEventFromBookingRequest) Reset() {
	*x = CreateShipmentEventFromBookingRequest{}
	mi := &file_tnt_v3_event_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShipmentEventFromBookingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentEventFromBookingRequest) ProtoMessage() {}

func (x *CreateShipmentEventFromBookingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentEventFromBookingRequest.ProtoReflect.Descriptor instead.
func (*CreateShipmentEventFromBookingRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{22}
}

func (x *CreateShipmentEventFromBookingRequest) GetCreateShipmentEventRequest() *ShipmentEventRequest {
	if x != nil {
		return x.CreateShipmentEventRequest
	}
	return nil
}

func (x *CreateShipmentEventFromBookingRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateShipmentEventFromBookingRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateShipmentEventFromBookingRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateShipmentEventFromBookingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentEvent *ShipmentEvent `protobuf:"bytes,1,opt,name=shipment_event,json=shipmentEvent,proto3" json:"shipment_event,omitempty"`
}

func (x *CreateShipmentEventFromBookingResponse) Reset() {
	*x = CreateShipmentEventFromBookingResponse{}
	mi := &file_tnt_v3_event_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShipmentEventFromBookingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentEventFromBookingResponse) ProtoMessage() {}

func (x *CreateShipmentEventFromBookingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentEventFromBookingResponse.ProtoReflect.Descriptor instead.
func (*CreateShipmentEventFromBookingResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{23}
}

func (x *CreateShipmentEventFromBookingResponse) GetShipmentEvent() *ShipmentEvent {
	if x != nil {
		return x.ShipmentEvent
	}
	return nil
}

type CreateShipmentEventFromShippingInstructionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateShipmentEventRequest *ShipmentEventRequest `protobuf:"bytes,1,opt,name=create_shipment_event_request,json=createShipmentEventRequest,proto3" json:"create_shipment_event_request,omitempty"`
	UserId                     string                `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                  string                `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                  string                `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateShipmentEventFromShippingInstructionRequest) Reset() {
	*x = CreateShipmentEventFromShippingInstructionRequest{}
	mi := &file_tnt_v3_event_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShipmentEventFromShippingInstructionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentEventFromShippingInstructionRequest) ProtoMessage() {}

func (x *CreateShipmentEventFromShippingInstructionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentEventFromShippingInstructionRequest.ProtoReflect.Descriptor instead.
func (*CreateShipmentEventFromShippingInstructionRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{24}
}

func (x *CreateShipmentEventFromShippingInstructionRequest) GetCreateShipmentEventRequest() *ShipmentEventRequest {
	if x != nil {
		return x.CreateShipmentEventRequest
	}
	return nil
}

func (x *CreateShipmentEventFromShippingInstructionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateShipmentEventFromShippingInstructionRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateShipmentEventFromShippingInstructionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateShipmentEventFromShippingInstructionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentEvent *ShipmentEvent `protobuf:"bytes,1,opt,name=shipment_event,json=shipmentEvent,proto3" json:"shipment_event,omitempty"`
}

func (x *CreateShipmentEventFromShippingInstructionResponse) Reset() {
	*x = CreateShipmentEventFromShippingInstructionResponse{}
	mi := &file_tnt_v3_event_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShipmentEventFromShippingInstructionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentEventFromShippingInstructionResponse) ProtoMessage() {}

func (x *CreateShipmentEventFromShippingInstructionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentEventFromShippingInstructionResponse.ProtoReflect.Descriptor instead.
func (*CreateShipmentEventFromShippingInstructionResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{25}
}

func (x *CreateShipmentEventFromShippingInstructionResponse) GetShipmentEvent() *ShipmentEvent {
	if x != nil {
		return x.ShipmentEvent
	}
	return nil
}

type LoadShipmentRelatedEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentEvents []*ShipmentEvent `protobuf:"bytes,1,rep,name=shipment_events,json=shipmentEvents,proto3" json:"shipment_events,omitempty"`
	NextCursor     string           `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *LoadShipmentRelatedEntitiesResponse) Reset() {
	*x = LoadShipmentRelatedEntitiesResponse{}
	mi := &file_tnt_v3_event_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadShipmentRelatedEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadShipmentRelatedEntitiesResponse) ProtoMessage() {}

func (x *LoadShipmentRelatedEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadShipmentRelatedEntitiesResponse.ProtoReflect.Descriptor instead.
func (*LoadShipmentRelatedEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{26}
}

func (x *LoadShipmentRelatedEntitiesResponse) GetShipmentEvents() []*ShipmentEvent {
	if x != nil {
		return x.ShipmentEvents
	}
	return nil
}

func (x *LoadShipmentRelatedEntitiesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type LoadShipmentRelatedEntitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *LoadShipmentRelatedEntitiesRequest) Reset() {
	*x = LoadShipmentRelatedEntitiesRequest{}
	mi := &file_tnt_v3_event_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadShipmentRelatedEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadShipmentRelatedEntitiesRequest) ProtoMessage() {}

func (x *LoadShipmentRelatedEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadShipmentRelatedEntitiesRequest.ProtoReflect.Descriptor instead.
func (*LoadShipmentRelatedEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{27}
}

func (x *LoadShipmentRelatedEntitiesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *LoadShipmentRelatedEntitiesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *LoadShipmentRelatedEntitiesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *LoadShipmentRelatedEntitiesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type TransportEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportEventD *TransportEventD `protobuf:"bytes,1,opt,name=transport_event_d,json=transportEventD,proto3" json:"transport_event_d,omitempty"`
	TransportEventT *TransportEventT `protobuf:"bytes,2,opt,name=transport_event_t,json=transportEventT,proto3" json:"transport_event_t,omitempty"`
}

func (x *TransportEvent) Reset() {
	*x = TransportEvent{}
	mi := &file_tnt_v3_event_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportEvent) ProtoMessage() {}

func (x *TransportEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportEvent.ProtoReflect.Descriptor instead.
func (*TransportEvent) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{28}
}

func (x *TransportEvent) GetTransportEventD() *TransportEventD {
	if x != nil {
		return x.TransportEventD
	}
	return nil
}

func (x *TransportEvent) GetTransportEventT() *TransportEventT {
	if x != nil {
		return x.TransportEventT
	}
	return nil
}

type TransportEventD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventIdS               []byte `protobuf:"bytes,2,opt,name=event_id_s,json=eventIdS,proto3" json:"event_id_s,omitempty"`
	EventClassifierCode    string `protobuf:"bytes,3,opt,name=event_classifier_code,json=eventClassifierCode,proto3" json:"event_classifier_code,omitempty"`
	TransportEventTypeCode string `protobuf:"bytes,4,opt,name=transport_event_type_code,json=transportEventTypeCode,proto3" json:"transport_event_type_code,omitempty"`
	DelayReasonCode        string `protobuf:"bytes,5,opt,name=delay_reason_code,json=delayReasonCode,proto3" json:"delay_reason_code,omitempty"`
	ChangeRemark           string `protobuf:"bytes,6,opt,name=change_remark,json=changeRemark,proto3" json:"change_remark,omitempty"`
	TransportCallId        uint32 `protobuf:"varint,7,opt,name=transport_call_id,json=transportCallId,proto3" json:"transport_call_id,omitempty"`
}

func (x *TransportEventD) Reset() {
	*x = TransportEventD{}
	mi := &file_tnt_v3_event_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportEventD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportEventD) ProtoMessage() {}

func (x *TransportEventD) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportEventD.ProtoReflect.Descriptor instead.
func (*TransportEventD) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{29}
}

func (x *TransportEventD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransportEventD) GetEventIdS() []byte {
	if x != nil {
		return x.EventIdS
	}
	return nil
}

func (x *TransportEventD) GetEventClassifierCode() string {
	if x != nil {
		return x.EventClassifierCode
	}
	return ""
}

func (x *TransportEventD) GetTransportEventTypeCode() string {
	if x != nil {
		return x.TransportEventTypeCode
	}
	return ""
}

func (x *TransportEventD) GetDelayReasonCode() string {
	if x != nil {
		return x.DelayReasonCode
	}
	return ""
}

func (x *TransportEventD) GetChangeRemark() string {
	if x != nil {
		return x.ChangeRemark
	}
	return ""
}

func (x *TransportEventD) GetTransportCallId() uint32 {
	if x != nil {
		return x.TransportCallId
	}
	return 0
}

type TransportEventT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventCreatedDateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=event_created_date_time,json=eventCreatedDateTime,proto3" json:"event_created_date_time,omitempty"`
	EventDateTime        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
}

func (x *TransportEventT) Reset() {
	*x = TransportEventT{}
	mi := &file_tnt_v3_event_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportEventT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportEventT) ProtoMessage() {}

func (x *TransportEventT) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportEventT.ProtoReflect.Descriptor instead.
func (*TransportEventT) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{30}
}

func (x *TransportEventT) GetEventCreatedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventCreatedDateTime
	}
	return nil
}

func (x *TransportEventT) GetEventDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventDateTime
	}
	return nil
}

type CreateTransportEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportEventRequests []*TransportEventRequest `protobuf:"bytes,1,rep,name=transport_event_requests,json=transportEventRequests,proto3" json:"transport_event_requests,omitempty"`
	UserId                 string                   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string                   `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string                   `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTransportEventRequest) Reset() {
	*x = CreateTransportEventRequest{}
	mi := &file_tnt_v3_event_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransportEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransportEventRequest) ProtoMessage() {}

func (x *CreateTransportEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransportEventRequest.ProtoReflect.Descriptor instead.
func (*CreateTransportEventRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{31}
}

func (x *CreateTransportEventRequest) GetTransportEventRequests() []*TransportEventRequest {
	if x != nil {
		return x.TransportEventRequests
	}
	return nil
}

func (x *CreateTransportEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTransportEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateTransportEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type TransportEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventClassifierCode    string `protobuf:"bytes,1,opt,name=event_classifier_code,json=eventClassifierCode,proto3" json:"event_classifier_code,omitempty"`
	EventCreatedDateTime   string `protobuf:"bytes,2,opt,name=event_created_date_time,json=eventCreatedDateTime,proto3" json:"event_created_date_time,omitempty"`
	EventDateTime          string `protobuf:"bytes,3,opt,name=event_date_time,json=eventDateTime,proto3" json:"event_date_time,omitempty"`
	TransportEventTypeCode string `protobuf:"bytes,4,opt,name=transport_event_type_code,json=transportEventTypeCode,proto3" json:"transport_event_type_code,omitempty"`
	DelayReasonCode        string `protobuf:"bytes,5,opt,name=delay_reason_code,json=delayReasonCode,proto3" json:"delay_reason_code,omitempty"`
	ChangeRemark           string `protobuf:"bytes,6,opt,name=change_remark,json=changeRemark,proto3" json:"change_remark,omitempty"`
	TransportCallId        uint32 `protobuf:"varint,7,opt,name=transport_call_id,json=transportCallId,proto3" json:"transport_call_id,omitempty"`
	UserId                 string `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string `protobuf:"bytes,9,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId              string `protobuf:"bytes,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *TransportEventRequest) Reset() {
	*x = TransportEventRequest{}
	mi := &file_tnt_v3_event_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportEventRequest) ProtoMessage() {}

func (x *TransportEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportEventRequest.ProtoReflect.Descriptor instead.
func (*TransportEventRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{32}
}

func (x *TransportEventRequest) GetEventClassifierCode() string {
	if x != nil {
		return x.EventClassifierCode
	}
	return ""
}

func (x *TransportEventRequest) GetEventCreatedDateTime() string {
	if x != nil {
		return x.EventCreatedDateTime
	}
	return ""
}

func (x *TransportEventRequest) GetEventDateTime() string {
	if x != nil {
		return x.EventDateTime
	}
	return ""
}

func (x *TransportEventRequest) GetTransportEventTypeCode() string {
	if x != nil {
		return x.TransportEventTypeCode
	}
	return ""
}

func (x *TransportEventRequest) GetDelayReasonCode() string {
	if x != nil {
		return x.DelayReasonCode
	}
	return ""
}

func (x *TransportEventRequest) GetChangeRemark() string {
	if x != nil {
		return x.ChangeRemark
	}
	return ""
}

func (x *TransportEventRequest) GetTransportCallId() uint32 {
	if x != nil {
		return x.TransportCallId
	}
	return 0
}

func (x *TransportEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TransportEventRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *TransportEventRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateTransportEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTransportEventResponse) Reset() {
	*x = CreateTransportEventResponse{}
	mi := &file_tnt_v3_event_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransportEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransportEventResponse) ProtoMessage() {}

func (x *CreateTransportEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransportEventResponse.ProtoReflect.Descriptor instead.
func (*CreateTransportEventResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{33}
}

type LoadTransportRelatedEntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportEvents []*TransportEvent `protobuf:"bytes,1,rep,name=transport_events,json=transportEvents,proto3" json:"transport_events,omitempty"`
	NextCursor      string            `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *LoadTransportRelatedEntitiesResponse) Reset() {
	*x = LoadTransportRelatedEntitiesResponse{}
	mi := &file_tnt_v3_event_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadTransportRelatedEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadTransportRelatedEntitiesResponse) ProtoMessage() {}

func (x *LoadTransportRelatedEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadTransportRelatedEntitiesResponse.ProtoReflect.Descriptor instead.
func (*LoadTransportRelatedEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{34}
}

func (x *LoadTransportRelatedEntitiesResponse) GetTransportEvents() []*TransportEvent {
	if x != nil {
		return x.TransportEvents
	}
	return nil
}

func (x *LoadTransportRelatedEntitiesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type LoadTransportRelatedEntitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *LoadTransportRelatedEntitiesRequest) Reset() {
	*x = LoadTransportRelatedEntitiesRequest{}
	mi := &file_tnt_v3_event_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadTransportRelatedEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadTransportRelatedEntitiesRequest) ProtoMessage() {}

func (x *LoadTransportRelatedEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_event_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadTransportRelatedEntitiesRequest.ProtoReflect.Descriptor instead.
func (*LoadTransportRelatedEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_event_proto_rawDescGZIP(), []int{35}
}

func (x *LoadTransportRelatedEntitiesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *LoadTransportRelatedEntitiesRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *LoadTransportRelatedEntitiesRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *LoadTransportRelatedEntitiesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

var File_tnt_v3_event_proto protoreflect.FileDescriptor

var file_tnt_v3_event_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x0f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x43, 0x0a,
	0x11, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76,
	0x33, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x52, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x22, 0xe4, 0x02, 0x0a, 0x0f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x53, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x0f, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x12, 0x51, 0x0a,
	0x17, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x42, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x18, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x16, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0xf2, 0x03, 0x0a, 0x15, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x24, 0x4c, 0x6f,
	0x61, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74,
	0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x23, 0x4c, 0x6f, 0x61, 0x64, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x10, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12,
	0x46, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6e,
	0x74, 0x2e, 0x76, 0x33, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x22, 0xf0, 0x05, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x38, 0x0a, 0x19,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x6d,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x10, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x12,
	0x51, 0x0a, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x19, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x6e, 0x74,
	0x2e, 0x76, 0x33, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xfe, 0x06, 0x0a, 0x16, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x3b, 0x0a,
	0x1a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x1b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x38, 0x0a, 0x19, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x43, 0x0a, 0x1e, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x0a,
	0x25, 0x4c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x9b, 0x01,
	0x0a, 0x24, 0x4c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x0d,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x10, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33,
	0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x52,
	0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12,
	0x40, 0x0a, 0x10, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6e, 0x74, 0x2e,
	0x76, 0x33, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x22, 0xc1, 0x02, 0x0a, 0x0e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x53, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x0e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x12, 0x51, 0x0a, 0x17, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xc9, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x15, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xa6, 0x04, 0x0a, 0x14,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a,
	0x1d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33,
	0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xeb, 0x01,
	0x0a, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x1d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6e, 0x74,
	0x2e, 0x76, 0x33, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x32, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6e, 0x74, 0x2e,
	0x76, 0x33, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x86, 0x01, 0x0a, 0x23, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x99, 0x01, 0x0a, 0x22, 0x4c, 0x6f, 0x61,
	0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x43, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x22, 0xab, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x53, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x22,
	0xa8, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x12, 0x51, 0x0a, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x18, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74,
	0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x16, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xb9, 0x03, 0x0a, 0x15, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x24, 0x4c, 0x6f, 0x61, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6e, 0x74, 0x2e,
	0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x23, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x32, 0xad, 0x09, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x61, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x74, 0x6e, 0x74, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x1c, 0x4c, 0x6f, 0x61, 0x64, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x64, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76,
	0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1d, 0x4c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x74, 0x6e,
	0x74, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x1c, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x61,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5e, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76,
	0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74,
	0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7f, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x2a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x74,
	0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x1b, 0x4c, 0x6f, 0x61, 0x64,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x61,
	0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x64, 0x63,
	0x73, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_tnt_v3_event_proto_rawDescOnce sync.Once
	file_tnt_v3_event_proto_rawDescData = file_tnt_v3_event_proto_rawDesc
)

func file_tnt_v3_event_proto_rawDescGZIP() []byte {
	file_tnt_v3_event_proto_rawDescOnce.Do(func() {
		file_tnt_v3_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_tnt_v3_event_proto_rawDescData)
	})
	return file_tnt_v3_event_proto_rawDescData
}

var file_tnt_v3_event_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_tnt_v3_event_proto_goTypes = []any{
	(*EquipmentEvent)(nil),                                     // 0: tnt.v3.EquipmentEvent
	(*EquipmentEventD)(nil),                                    // 1: tnt.v3.EquipmentEventD
	(*EquipmentEventT)(nil),                                    // 2: tnt.v3.EquipmentEventT
	(*CreateEquipmentEventRequest)(nil),                        // 3: tnt.v3.CreateEquipmentEventRequest
	(*EquipmentEventRequest)(nil),                              // 4: tnt.v3.EquipmentEventRequest
	(*CreateEquipmentEventResponse)(nil),                       // 5: tnt.v3.CreateEquipmentEventResponse
	(*LoadEquipmentRelatedEntitiesResponse)(nil),               // 6: tnt.v3.LoadEquipmentRelatedEntitiesResponse
	(*LoadEquipmentRelatedEntitiesRequest)(nil),                // 7: tnt.v3.LoadEquipmentRelatedEntitiesRequest
	(*OperationsEvent)(nil),                                    // 8: tnt.v3.OperationsEvent
	(*OperationsEventD)(nil),                                   // 9: tnt.v3.OperationsEventD
	(*OperationsEventT)(nil),                                   // 10: tnt.v3.OperationsEventT
	(*CreateOperationsEventRequest)(nil),                       // 11: tnt.v3.CreateOperationsEventRequest
	(*OperationsEventRequest)(nil),                             // 12: tnt.v3.OperationsEventRequest
	(*CreateOperationsEventResponse)(nil),                      // 13: tnt.v3.CreateOperationsEventResponse
	(*LoadOperationsRelatedEntitiesResponse)(nil),              // 14: tnt.v3.LoadOperationsRelatedEntitiesResponse
	(*LoadOperationsRelatedEntitiesRequest)(nil),               // 15: tnt.v3.LoadOperationsRelatedEntitiesRequest
	(*ShipmentEvent)(nil),                                      // 16: tnt.v3.ShipmentEvent
	(*ShipmentEventD)(nil),                                     // 17: tnt.v3.ShipmentEventD
	(*ShipmentEventT)(nil),                                     // 18: tnt.v3.ShipmentEventT
	(*CreateShipmentEventRequest)(nil),                         // 19: tnt.v3.CreateShipmentEventRequest
	(*ShipmentEventRequest)(nil),                               // 20: tnt.v3.ShipmentEventRequest
	(*CreateShipmentEventResponse)(nil),                        // 21: tnt.v3.CreateShipmentEventResponse
	(*CreateShipmentEventFromBookingRequest)(nil),              // 22: tnt.v3.CreateShipmentEventFromBookingRequest
	(*CreateShipmentEventFromBookingResponse)(nil),             // 23: tnt.v3.CreateShipmentEventFromBookingResponse
	(*CreateShipmentEventFromShippingInstructionRequest)(nil),  // 24: tnt.v3.CreateShipmentEventFromShippingInstructionRequest
	(*CreateShipmentEventFromShippingInstructionResponse)(nil), // 25: tnt.v3.CreateShipmentEventFromShippingInstructionResponse
	(*LoadShipmentRelatedEntitiesResponse)(nil),                // 26: tnt.v3.LoadShipmentRelatedEntitiesResponse
	(*LoadShipmentRelatedEntitiesRequest)(nil),                 // 27: tnt.v3.LoadShipmentRelatedEntitiesRequest
	(*TransportEvent)(nil),                                     // 28: tnt.v3.TransportEvent
	(*TransportEventD)(nil),                                    // 29: tnt.v3.TransportEventD
	(*TransportEventT)(nil),                                    // 30: tnt.v3.TransportEventT
	(*CreateTransportEventRequest)(nil),                        // 31: tnt.v3.CreateTransportEventRequest
	(*TransportEventRequest)(nil),                              // 32: tnt.v3.TransportEventRequest
	(*CreateTransportEventResponse)(nil),                       // 33: tnt.v3.CreateTransportEventResponse
	(*LoadTransportRelatedEntitiesResponse)(nil),               // 34: tnt.v3.LoadTransportRelatedEntitiesResponse
	(*LoadTransportRelatedEntitiesRequest)(nil),                // 35: tnt.v3.LoadTransportRelatedEntitiesRequest
	(*timestamppb.Timestamp)(nil),                              // 36: google.protobuf.Timestamp
}
var file_tnt_v3_event_proto_depIdxs = []int32{
	1,  // 0: tnt.v3.EquipmentEvent.equipment_event_d:type_name -> tnt.v3.EquipmentEventD
	2,  // 1: tnt.v3.EquipmentEvent.equipment_event_t:type_name -> tnt.v3.EquipmentEventT
	36, // 2: tnt.v3.EquipmentEventT.event_created_date_time:type_name -> google.protobuf.Timestamp
	36, // 3: tnt.v3.EquipmentEventT.event_date_time:type_name -> google.protobuf.Timestamp
	4,  // 4: tnt.v3.CreateEquipmentEventRequest.equipment_event_requests:type_name -> tnt.v3.EquipmentEventRequest
	0,  // 5: tnt.v3.LoadEquipmentRelatedEntitiesResponse.equipment_events:type_name -> tnt.v3.EquipmentEvent
	9,  // 6: tnt.v3.OperationsEvent.operations_event_d:type_name -> tnt.v3.OperationsEventD
	10, // 7: tnt.v3.OperationsEvent.operations_event_t:type_name -> tnt.v3.OperationsEventT
	36, // 8: tnt.v3.OperationsEventT.event_created_date_time:type_name -> google.protobuf.Timestamp
	36, // 9: tnt.v3.OperationsEventT.event_date_time:type_name -> google.protobuf.Timestamp
	12, // 10: tnt.v3.CreateOperationsEventRequest.operations_event_requests:type_name -> tnt.v3.OperationsEventRequest
	8,  // 11: tnt.v3.LoadOperationsRelatedEntitiesResponse.operations_events:type_name -> tnt.v3.OperationsEvent
	17, // 12: tnt.v3.ShipmentEvent.shipment_event_d:type_name -> tnt.v3.ShipmentEventD
	18, // 13: tnt.v3.ShipmentEvent.shipment_event_t:type_name -> tnt.v3.ShipmentEventT
	36, // 14: tnt.v3.ShipmentEventT.event_created_date_time:type_name -> google.protobuf.Timestamp
	36, // 15: tnt.v3.ShipmentEventT.event_date_time:type_name -> google.protobuf.Timestamp
	20, // 16: tnt.v3.CreateShipmentEventRequest.shipment_event_requests:type_name -> tnt.v3.ShipmentEventRequest
	20, // 17: tnt.v3.CreateShipmentEventFromBookingRequest.create_shipment_event_request:type_name -> tnt.v3.ShipmentEventRequest
	16, // 18: tnt.v3.CreateShipmentEventFromBookingResponse.shipment_event:type_name -> tnt.v3.ShipmentEvent
	20, // 19: tnt.v3.CreateShipmentEventFromShippingInstructionRequest.create_shipment_event_request:type_name -> tnt.v3.ShipmentEventRequest
	16, // 20: tnt.v3.CreateShipmentEventFromShippingInstructionResponse.shipment_event:type_name -> tnt.v3.ShipmentEvent
	16, // 21: tnt.v3.LoadShipmentRelatedEntitiesResponse.shipment_events:type_name -> tnt.v3.ShipmentEvent
	29, // 22: tnt.v3.TransportEvent.transport_event_d:type_name -> tnt.v3.TransportEventD
	30, // 23: tnt.v3.TransportEvent.transport_event_t:type_name -> tnt.v3.TransportEventT
	36, // 24: tnt.v3.TransportEventT.event_created_date_time:type_name -> google.protobuf.Timestamp
	36, // 25: tnt.v3.TransportEventT.event_date_time:type_name -> google.protobuf.Timestamp
	32, // 26: tnt.v3.CreateTransportEventRequest.transport_event_requests:type_name -> tnt.v3.TransportEventRequest
	28, // 27: tnt.v3.LoadTransportRelatedEntitiesResponse.transport_events:type_name -> tnt.v3.TransportEvent
	3,  // 28: tnt.v3.EventService.CreateEquipmentEvent:input_type -> tnt.v3.CreateEquipmentEventRequest
	7,  // 29: tnt.v3.EventService.LoadEquipmentRelatedEntities:input_type -> tnt.v3.LoadEquipmentRelatedEntitiesRequest
	11, // 30: tnt.v3.EventService.CreateOperationsEvent:input_type -> tnt.v3.CreateOperationsEventRequest
	15, // 31: tnt.v3.EventService.LoadOperationsRelatedEntities:input_type -> tnt.v3.LoadOperationsRelatedEntitiesRequest
	31, // 32: tnt.v3.EventService.CreateTransportEvent:input_type -> tnt.v3.CreateTransportEventRequest
	35, // 33: tnt.v3.EventService.LoadTransportRelatedEntities:input_type -> tnt.v3.LoadTransportRelatedEntitiesRequest
	19, // 34: tnt.v3.EventService.CreateShipmentEvent:input_type -> tnt.v3.CreateShipmentEventRequest
	22, // 35: tnt.v3.EventService.CreateShipmentEventFromBooking:input_type -> tnt.v3.CreateShipmentEventFromBookingRequest
	24, // 36: tnt.v3.EventService.CreateShipmentEventFromShippingInstruction:input_type -> tnt.v3.CreateShipmentEventFromShippingInstructionRequest
	27, // 37: tnt.v3.EventService.LoadShipmentRelatedEntities:input_type -> tnt.v3.LoadShipmentRelatedEntitiesRequest
	5,  // 38: tnt.v3.EventService.CreateEquipmentEvent:output_type -> tnt.v3.CreateEquipmentEventResponse
	6,  // 39: tnt.v3.EventService.LoadEquipmentRelatedEntities:output_type -> tnt.v3.LoadEquipmentRelatedEntitiesResponse
	13, // 40: tnt.v3.EventService.CreateOperationsEvent:output_type -> tnt.v3.CreateOperationsEventResponse
	14, // 41: tnt.v3.EventService.LoadOperationsRelatedEntities:output_type -> tnt.v3.LoadOperationsRelatedEntitiesResponse
	33, // 42: tnt.v3.EventService.CreateTransportEvent:output_type -> tnt.v3.CreateTransportEventResponse
	34, // 43: tnt.v3.EventService.LoadTransportRelatedEntities:output_type -> tnt.v3.LoadTransportRelatedEntitiesResponse
	21, // 44: tnt.v3.EventService.CreateShipmentEvent:output_type -> tnt.v3.CreateShipmentEventResponse
	23, // 45: tnt.v3.EventService.CreateShipmentEventFromBooking:output_type -> tnt.v3.CreateShipmentEventFromBookingResponse
	25, // 46: tnt.v3.EventService.CreateShipmentEventFromShippingInstruction:output_type -> tnt.v3.CreateShipmentEventFromShippingInstructionResponse
	26, // 47: tnt.v3.EventService.LoadShipmentRelatedEntities:output_type -> tnt.v3.LoadShipmentRelatedEntitiesResponse
	38, // [38:48] is the sub-list for method output_type
	28, // [28:38] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_tnt_v3_event_proto_init() }
func file_tnt_v3_event_proto_init() {
	if File_tnt_v3_event_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tnt_v3_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tnt_v3_event_proto_goTypes,
		DependencyIndexes: file_tnt_v3_event_proto_depIdxs,
		MessageInfos:      file_tnt_v3_event_proto_msgTypes,
	}.Build()
	File_tnt_v3_event_proto = out.File
	file_tnt_v3_event_proto_rawDesc = nil
	file_tnt_v3_event_proto_goTypes = nil
	file_tnt_v3_event_proto_depIdxs = nil
}
