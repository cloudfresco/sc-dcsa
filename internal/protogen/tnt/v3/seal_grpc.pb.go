// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: tnt/v3/seal.proto

package v3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SealService_CreateSeal_FullMethodName = "/tnt.v3.SealService/CreateSeal"
	SealService_GetSeals_FullMethodName   = "/tnt.v3.SealService/GetSeals"
)

// SealServiceClient is the client API for SealService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The SealService service definition.
type SealServiceClient interface {
	CreateSeal(ctx context.Context, in *CreateSealRequest, opts ...grpc.CallOption) (*CreateSealResponse, error)
	GetSeals(ctx context.Context, in *GetSealsRequest, opts ...grpc.CallOption) (*GetSealsResponse, error)
}

type sealServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSealServiceClient(cc grpc.ClientConnInterface) SealServiceClient {
	return &sealServiceClient{cc}
}

func (c *sealServiceClient) CreateSeal(ctx context.Context, in *CreateSealRequest, opts ...grpc.CallOption) (*CreateSealResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSealResponse)
	err := c.cc.Invoke(ctx, SealService_CreateSeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sealServiceClient) GetSeals(ctx context.Context, in *GetSealsRequest, opts ...grpc.CallOption) (*GetSealsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSealsResponse)
	err := c.cc.Invoke(ctx, SealService_GetSeals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SealServiceServer is the server API for SealService service.
// All implementations must embed UnimplementedSealServiceServer
// for forward compatibility.
//
// The SealService service definition.
type SealServiceServer interface {
	CreateSeal(context.Context, *CreateSealRequest) (*CreateSealResponse, error)
	GetSeals(context.Context, *GetSealsRequest) (*GetSealsResponse, error)
	mustEmbedUnimplementedSealServiceServer()
}

// UnimplementedSealServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSealServiceServer struct{}

func (UnimplementedSealServiceServer) CreateSeal(context.Context, *CreateSealRequest) (*CreateSealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeal not implemented")
}
func (UnimplementedSealServiceServer) GetSeals(context.Context, *GetSealsRequest) (*GetSealsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeals not implemented")
}
func (UnimplementedSealServiceServer) mustEmbedUnimplementedSealServiceServer() {}
func (UnimplementedSealServiceServer) testEmbeddedByValue()                     {}

// UnsafeSealServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SealServiceServer will
// result in compilation errors.
type UnsafeSealServiceServer interface {
	mustEmbedUnimplementedSealServiceServer()
}

func RegisterSealServiceServer(s grpc.ServiceRegistrar, srv SealServiceServer) {
	// If the following call pancis, it indicates UnimplementedSealServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SealService_ServiceDesc, srv)
}

func _SealService_CreateSeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SealServiceServer).CreateSeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SealService_CreateSeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SealServiceServer).CreateSeal(ctx, req.(*CreateSealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SealService_GetSeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SealServiceServer).GetSeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SealService_GetSeals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SealServiceServer).GetSeals(ctx, req.(*GetSealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SealService_ServiceDesc is the grpc.ServiceDesc for SealService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SealService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tnt.v3.SealService",
	HandlerType: (*SealServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSeal",
			Handler:    _SealService_CreateSeal_Handler,
		},
		{
			MethodName: "GetSeals",
			Handler:    _SealService_GetSeals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tnt/v3/seal.proto",
}
