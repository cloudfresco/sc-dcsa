// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tnt/v3/eventsubscription.proto

package v3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EventSubscription with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EventSubscription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventSubscription with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventSubscriptionMultiError, or nil if none found.
func (m *EventSubscription) ValidateAll() error {
	return m.validate(true)
}

func (m *EventSubscription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEventSubscriptionD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventSubscriptionValidationError{
					field:  "EventSubscriptionD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventSubscriptionValidationError{
					field:  "EventSubscriptionD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventSubscriptionD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSubscriptionValidationError{
				field:  "EventSubscriptionD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventSubscriptionValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventSubscriptionValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSubscriptionValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventSubscriptionValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventSubscriptionValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSubscriptionValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventSubscriptionMultiError(errors)
	}

	return nil
}

// EventSubscriptionMultiError is an error wrapping multiple validation errors
// returned by EventSubscription.ValidateAll() if the designated constraints
// aren't met.
type EventSubscriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventSubscriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventSubscriptionMultiError) AllErrors() []error { return m }

// EventSubscriptionValidationError is the validation error returned by
// EventSubscription.Validate if the designated constraints aren't met.
type EventSubscriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSubscriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSubscriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSubscriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSubscriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSubscriptionValidationError) ErrorName() string {
	return "EventSubscriptionValidationError"
}

// Error satisfies the builtin error interface
func (e EventSubscriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSubscription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSubscriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSubscriptionValidationError{}

// Validate checks the field values on EventSubscriptionD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventSubscriptionD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventSubscriptionD with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventSubscriptionDMultiError, or nil if none found.
func (m *EventSubscriptionD) ValidateAll() error {
	return m.validate(true)
}

func (m *EventSubscriptionD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SubscriptionId

	// no validation rules for CallbackUrl

	// no validation rules for DocumentReference

	// no validation rules for EquipmentReference

	// no validation rules for TransportCallReference

	// no validation rules for VesselImoNumber

	// no validation rules for CarrierExportVoyageNumber

	// no validation rules for UniversalExportVoyageReference

	// no validation rules for CarrierServiceCode

	// no validation rules for UniversalServiceReference

	// no validation rules for UnLocationCode

	// no validation rules for Secret

	if len(errors) > 0 {
		return EventSubscriptionDMultiError(errors)
	}

	return nil
}

// EventSubscriptionDMultiError is an error wrapping multiple validation errors
// returned by EventSubscriptionD.ValidateAll() if the designated constraints
// aren't met.
type EventSubscriptionDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventSubscriptionDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventSubscriptionDMultiError) AllErrors() []error { return m }

// EventSubscriptionDValidationError is the validation error returned by
// EventSubscriptionD.Validate if the designated constraints aren't met.
type EventSubscriptionDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSubscriptionDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSubscriptionDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSubscriptionDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSubscriptionDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSubscriptionDValidationError) ErrorName() string {
	return "EventSubscriptionDValidationError"
}

// Error satisfies the builtin error interface
func (e EventSubscriptionDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSubscriptionD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSubscriptionDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSubscriptionDValidationError{}

// Validate checks the field values on CreateEventSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEventSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventSubscriptionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateEventSubscriptionResponseMultiError, or nil if none found.
func (m *CreateEventSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEventSubscription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEventSubscriptionResponseValidationError{
					field:  "EventSubscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEventSubscriptionResponseValidationError{
					field:  "EventSubscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEventSubscriptionResponseValidationError{
				field:  "EventSubscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEventSubscriptionResponseMultiError(errors)
	}

	return nil
}

// CreateEventSubscriptionResponseMultiError is an error wrapping multiple
// validation errors returned by CreateEventSubscriptionResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateEventSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventSubscriptionResponseMultiError) AllErrors() []error { return m }

// CreateEventSubscriptionResponseValidationError is the validation error
// returned by CreateEventSubscriptionResponse.Validate if the designated
// constraints aren't met.
type CreateEventSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventSubscriptionResponseValidationError) ErrorName() string {
	return "CreateEventSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventSubscriptionResponseValidationError{}

// Validate checks the field values on CreateEventSubscriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEventSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventSubscriptionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateEventSubscriptionRequestMultiError, or nil if none found.
func (m *CreateEventSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallbackUrl

	// no validation rules for DocumentReference

	// no validation rules for EquipmentReference

	// no validation rules for TransportCallReference

	// no validation rules for VesselImoNumber

	// no validation rules for CarrierExportVoyageNumber

	// no validation rules for UniversalExportVoyageReference

	// no validation rules for CarrierServiceCode

	// no validation rules for UniversalServiceReference

	// no validation rules for UnLocationCode

	// no validation rules for Secret

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateEventSubscriptionRequestMultiError(errors)
	}

	return nil
}

// CreateEventSubscriptionRequestMultiError is an error wrapping multiple
// validation errors returned by CreateEventSubscriptionRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateEventSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventSubscriptionRequestMultiError) AllErrors() []error { return m }

// CreateEventSubscriptionRequestValidationError is the validation error
// returned by CreateEventSubscriptionRequest.Validate if the designated
// constraints aren't met.
type CreateEventSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventSubscriptionRequestValidationError) ErrorName() string {
	return "CreateEventSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventSubscriptionRequestValidationError{}

// Validate checks the field values on GetEventSubscriptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEventSubscriptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventSubscriptionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetEventSubscriptionsResponseMultiError, or nil if none found.
func (m *GetEventSubscriptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventSubscriptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEventSubscriptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEventSubscriptionsResponseValidationError{
						field:  fmt.Sprintf("EventSubscriptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEventSubscriptionsResponseValidationError{
						field:  fmt.Sprintf("EventSubscriptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventSubscriptionsResponseValidationError{
					field:  fmt.Sprintf("EventSubscriptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetEventSubscriptionsResponseMultiError(errors)
	}

	return nil
}

// GetEventSubscriptionsResponseMultiError is an error wrapping multiple
// validation errors returned by GetEventSubscriptionsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetEventSubscriptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventSubscriptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventSubscriptionsResponseMultiError) AllErrors() []error { return m }

// GetEventSubscriptionsResponseValidationError is the validation error
// returned by GetEventSubscriptionsResponse.Validate if the designated
// constraints aren't met.
type GetEventSubscriptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventSubscriptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventSubscriptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventSubscriptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventSubscriptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventSubscriptionsResponseValidationError) ErrorName() string {
	return "GetEventSubscriptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventSubscriptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventSubscriptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventSubscriptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventSubscriptionsResponseValidationError{}

// Validate checks the field values on GetEventSubscriptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEventSubscriptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventSubscriptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEventSubscriptionsRequestMultiError, or nil if none found.
func (m *GetEventSubscriptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventSubscriptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetEventSubscriptionsRequestMultiError(errors)
	}

	return nil
}

// GetEventSubscriptionsRequestMultiError is an error wrapping multiple
// validation errors returned by GetEventSubscriptionsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetEventSubscriptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventSubscriptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventSubscriptionsRequestMultiError) AllErrors() []error { return m }

// GetEventSubscriptionsRequestValidationError is the validation error returned
// by GetEventSubscriptionsRequest.Validate if the designated constraints
// aren't met.
type GetEventSubscriptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventSubscriptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventSubscriptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventSubscriptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventSubscriptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventSubscriptionsRequestValidationError) ErrorName() string {
	return "GetEventSubscriptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventSubscriptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventSubscriptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventSubscriptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventSubscriptionsRequestValidationError{}

// Validate checks the field values on FindEventSubscriptionByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindEventSubscriptionByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindEventSubscriptionByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FindEventSubscriptionByIDRequestMultiError, or nil if none found.
func (m *FindEventSubscriptionByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindEventSubscriptionByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindEventSubscriptionByIDRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindEventSubscriptionByIDRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindEventSubscriptionByIDRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindEventSubscriptionByIDRequestMultiError(errors)
	}

	return nil
}

// FindEventSubscriptionByIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// FindEventSubscriptionByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type FindEventSubscriptionByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindEventSubscriptionByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindEventSubscriptionByIDRequestMultiError) AllErrors() []error { return m }

// FindEventSubscriptionByIDRequestValidationError is the validation error
// returned by FindEventSubscriptionByIDRequest.Validate if the designated
// constraints aren't met.
type FindEventSubscriptionByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindEventSubscriptionByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindEventSubscriptionByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindEventSubscriptionByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindEventSubscriptionByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindEventSubscriptionByIDRequestValidationError) ErrorName() string {
	return "FindEventSubscriptionByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindEventSubscriptionByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindEventSubscriptionByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindEventSubscriptionByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindEventSubscriptionByIDRequestValidationError{}

// Validate checks the field values on FindEventSubscriptionByIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindEventSubscriptionByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindEventSubscriptionByIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindEventSubscriptionByIDResponseMultiError, or nil if none found.
func (m *FindEventSubscriptionByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindEventSubscriptionByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEventSubscription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindEventSubscriptionByIDResponseValidationError{
					field:  "EventSubscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindEventSubscriptionByIDResponseValidationError{
					field:  "EventSubscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindEventSubscriptionByIDResponseValidationError{
				field:  "EventSubscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindEventSubscriptionByIDResponseMultiError(errors)
	}

	return nil
}

// FindEventSubscriptionByIDResponseMultiError is an error wrapping multiple
// validation errors returned by
// FindEventSubscriptionByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type FindEventSubscriptionByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindEventSubscriptionByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindEventSubscriptionByIDResponseMultiError) AllErrors() []error { return m }

// FindEventSubscriptionByIDResponseValidationError is the validation error
// returned by FindEventSubscriptionByIDResponse.Validate if the designated
// constraints aren't met.
type FindEventSubscriptionByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindEventSubscriptionByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindEventSubscriptionByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindEventSubscriptionByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindEventSubscriptionByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindEventSubscriptionByIDResponseValidationError) ErrorName() string {
	return "FindEventSubscriptionByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindEventSubscriptionByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindEventSubscriptionByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindEventSubscriptionByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindEventSubscriptionByIDResponseValidationError{}

// Validate checks the field values on UpdateEventSubscriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEventSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEventSubscriptionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateEventSubscriptionRequestMultiError, or nil if none found.
func (m *UpdateEventSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEventSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallbackUrl

	// no validation rules for DocumentReference

	// no validation rules for EquipmentReference

	// no validation rules for TransportCallReference

	// no validation rules for VesselImoNumber

	// no validation rules for CarrierExportVoyageNumber

	// no validation rules for UniversalExportVoyageReference

	// no validation rules for CarrierServiceCode

	// no validation rules for UniversalServiceReference

	// no validation rules for SubscriptionId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateEventSubscriptionRequestMultiError(errors)
	}

	return nil
}

// UpdateEventSubscriptionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateEventSubscriptionRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateEventSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEventSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEventSubscriptionRequestMultiError) AllErrors() []error { return m }

// UpdateEventSubscriptionRequestValidationError is the validation error
// returned by UpdateEventSubscriptionRequest.Validate if the designated
// constraints aren't met.
type UpdateEventSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEventSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEventSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEventSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEventSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEventSubscriptionRequestValidationError) ErrorName() string {
	return "UpdateEventSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEventSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEventSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEventSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEventSubscriptionRequestValidationError{}

// Validate checks the field values on UpdateEventSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEventSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEventSubscriptionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateEventSubscriptionResponseMultiError, or nil if none found.
func (m *UpdateEventSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEventSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateEventSubscriptionResponseMultiError(errors)
	}

	return nil
}

// UpdateEventSubscriptionResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateEventSubscriptionResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateEventSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEventSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEventSubscriptionResponseMultiError) AllErrors() []error { return m }

// UpdateEventSubscriptionResponseValidationError is the validation error
// returned by UpdateEventSubscriptionResponse.Validate if the designated
// constraints aren't met.
type UpdateEventSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEventSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEventSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEventSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEventSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEventSubscriptionResponseValidationError) ErrorName() string {
	return "UpdateEventSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEventSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEventSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEventSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEventSubscriptionResponseValidationError{}

// Validate checks the field values on DeleteEventSubscriptionByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteEventSubscriptionByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEventSubscriptionByIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteEventSubscriptionByIDRequestMultiError, or nil if none found.
func (m *DeleteEventSubscriptionByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEventSubscriptionByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteEventSubscriptionByIDRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteEventSubscriptionByIDRequestValidationError{
					field:  "GetRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteEventSubscriptionByIDRequestValidationError{
				field:  "GetRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteEventSubscriptionByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteEventSubscriptionByIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteEventSubscriptionByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEventSubscriptionByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEventSubscriptionByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEventSubscriptionByIDRequestMultiError) AllErrors() []error { return m }

// DeleteEventSubscriptionByIDRequestValidationError is the validation error
// returned by DeleteEventSubscriptionByIDRequest.Validate if the designated
// constraints aren't met.
type DeleteEventSubscriptionByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEventSubscriptionByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEventSubscriptionByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEventSubscriptionByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEventSubscriptionByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEventSubscriptionByIDRequestValidationError) ErrorName() string {
	return "DeleteEventSubscriptionByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEventSubscriptionByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEventSubscriptionByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEventSubscriptionByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEventSubscriptionByIDRequestValidationError{}

// Validate checks the field values on DeleteEventSubscriptionByIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteEventSubscriptionByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEventSubscriptionByIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteEventSubscriptionByIDResponseMultiError, or nil if none found.
func (m *DeleteEventSubscriptionByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEventSubscriptionByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteEventSubscriptionByIDResponseMultiError(errors)
	}

	return nil
}

// DeleteEventSubscriptionByIDResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteEventSubscriptionByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteEventSubscriptionByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEventSubscriptionByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEventSubscriptionByIDResponseMultiError) AllErrors() []error { return m }

// DeleteEventSubscriptionByIDResponseValidationError is the validation error
// returned by DeleteEventSubscriptionByIDResponse.Validate if the designated
// constraints aren't met.
type DeleteEventSubscriptionByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEventSubscriptionByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEventSubscriptionByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEventSubscriptionByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEventSubscriptionByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEventSubscriptionByIDResponseValidationError) ErrorName() string {
	return "DeleteEventSubscriptionByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEventSubscriptionByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEventSubscriptionByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEventSubscriptionByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEventSubscriptionByIDResponseValidationError{}
