// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: tnt/v3/eventsubscription.proto

package v3

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventSubscriptionD *EventSubscriptionD `protobuf:"bytes,1,opt,name=event_subscription_d,json=eventSubscriptionD,proto3" json:"event_subscription_d,omitempty"`
	CrUpdUser          *v1.CrUpdUser       `protobuf:"bytes,3,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime          *v1.CrUpdTime       `protobuf:"bytes,4,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *EventSubscription) Reset() {
	*x = EventSubscription{}
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSubscription) ProtoMessage() {}

func (x *EventSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSubscription.ProtoReflect.Descriptor instead.
func (*EventSubscription) Descriptor() ([]byte, []int) {
	return file_tnt_v3_eventsubscription_proto_rawDescGZIP(), []int{0}
}

func (x *EventSubscription) GetEventSubscriptionD() *EventSubscriptionD {
	if x != nil {
		return x.EventSubscriptionD
	}
	return nil
}

func (x *EventSubscription) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *EventSubscription) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type EventSubscriptionD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SubscriptionId                 []byte `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	CallbackUrl                    string `protobuf:"bytes,3,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`
	DocumentReference              string `protobuf:"bytes,4,opt,name=document_reference,json=documentReference,proto3" json:"document_reference,omitempty"`
	EquipmentReference             string `protobuf:"bytes,5,opt,name=equipment_reference,json=equipmentReference,proto3" json:"equipment_reference,omitempty"`
	TransportCallReference         string `protobuf:"bytes,6,opt,name=transport_call_reference,json=transportCallReference,proto3" json:"transport_call_reference,omitempty"`
	VesselImoNumber                string `protobuf:"bytes,7,opt,name=vessel_imo_number,json=vesselImoNumber,proto3" json:"vessel_imo_number,omitempty"`
	CarrierExportVoyageNumber      string `protobuf:"bytes,8,opt,name=carrier_export_voyage_number,json=carrierExportVoyageNumber,proto3" json:"carrier_export_voyage_number,omitempty"`
	UniversalExportVoyageReference string `protobuf:"bytes,9,opt,name=universal_export_voyage_reference,json=universalExportVoyageReference,proto3" json:"universal_export_voyage_reference,omitempty"`
	CarrierServiceCode             string `protobuf:"bytes,10,opt,name=carrier_service_code,json=carrierServiceCode,proto3" json:"carrier_service_code,omitempty"`
	UniversalServiceReference      string `protobuf:"bytes,11,opt,name=universal_service_reference,json=universalServiceReference,proto3" json:"universal_service_reference,omitempty"`
	UnLocationCode                 string `protobuf:"bytes,12,opt,name=un_location_code,json=unLocationCode,proto3" json:"un_location_code,omitempty"`
	Secret                         []byte `protobuf:"bytes,13,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *EventSubscriptionD) Reset() {
	*x = EventSubscriptionD{}
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventSubscriptionD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSubscriptionD) ProtoMessage() {}

func (x *EventSubscriptionD) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSubscriptionD.ProtoReflect.Descriptor instead.
func (*EventSubscriptionD) Descriptor() ([]byte, []int) {
	return file_tnt_v3_eventsubscription_proto_rawDescGZIP(), []int{1}
}

func (x *EventSubscriptionD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EventSubscriptionD) GetSubscriptionId() []byte {
	if x != nil {
		return x.SubscriptionId
	}
	return nil
}

func (x *EventSubscriptionD) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

func (x *EventSubscriptionD) GetDocumentReference() string {
	if x != nil {
		return x.DocumentReference
	}
	return ""
}

func (x *EventSubscriptionD) GetEquipmentReference() string {
	if x != nil {
		return x.EquipmentReference
	}
	return ""
}

func (x *EventSubscriptionD) GetTransportCallReference() string {
	if x != nil {
		return x.TransportCallReference
	}
	return ""
}

func (x *EventSubscriptionD) GetVesselImoNumber() string {
	if x != nil {
		return x.VesselImoNumber
	}
	return ""
}

func (x *EventSubscriptionD) GetCarrierExportVoyageNumber() string {
	if x != nil {
		return x.CarrierExportVoyageNumber
	}
	return ""
}

func (x *EventSubscriptionD) GetUniversalExportVoyageReference() string {
	if x != nil {
		return x.UniversalExportVoyageReference
	}
	return ""
}

func (x *EventSubscriptionD) GetCarrierServiceCode() string {
	if x != nil {
		return x.CarrierServiceCode
	}
	return ""
}

func (x *EventSubscriptionD) GetUniversalServiceReference() string {
	if x != nil {
		return x.UniversalServiceReference
	}
	return ""
}

func (x *EventSubscriptionD) GetUnLocationCode() string {
	if x != nil {
		return x.UnLocationCode
	}
	return ""
}

func (x *EventSubscriptionD) GetSecret() []byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

type CreateEventSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventSubscription *EventSubscription `protobuf:"bytes,1,opt,name=event_subscription,json=eventSubscription,proto3" json:"event_subscription,omitempty"`
}

func (x *CreateEventSubscriptionResponse) Reset() {
	*x = CreateEventSubscriptionResponse{}
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEventSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventSubscriptionResponse) ProtoMessage() {}

func (x *CreateEventSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*CreateEventSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_eventsubscription_proto_rawDescGZIP(), []int{2}
}

func (x *CreateEventSubscriptionResponse) GetEventSubscription() *EventSubscription {
	if x != nil {
		return x.EventSubscription
	}
	return nil
}

type CreateEventSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallbackUrl                    string `protobuf:"bytes,1,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`
	DocumentReference              string `protobuf:"bytes,2,opt,name=document_reference,json=documentReference,proto3" json:"document_reference,omitempty"`
	EquipmentReference             string `protobuf:"bytes,3,opt,name=equipment_reference,json=equipmentReference,proto3" json:"equipment_reference,omitempty"`
	TransportCallReference         string `protobuf:"bytes,4,opt,name=transport_call_reference,json=transportCallReference,proto3" json:"transport_call_reference,omitempty"`
	VesselImoNumber                string `protobuf:"bytes,5,opt,name=vessel_imo_number,json=vesselImoNumber,proto3" json:"vessel_imo_number,omitempty"`
	CarrierExportVoyageNumber      string `protobuf:"bytes,6,opt,name=carrier_export_voyage_number,json=carrierExportVoyageNumber,proto3" json:"carrier_export_voyage_number,omitempty"`
	UniversalExportVoyageReference string `protobuf:"bytes,7,opt,name=universal_export_voyage_reference,json=universalExportVoyageReference,proto3" json:"universal_export_voyage_reference,omitempty"`
	CarrierServiceCode             string `protobuf:"bytes,8,opt,name=carrier_service_code,json=carrierServiceCode,proto3" json:"carrier_service_code,omitempty"`
	UniversalServiceReference      string `protobuf:"bytes,9,opt,name=universal_service_reference,json=universalServiceReference,proto3" json:"universal_service_reference,omitempty"`
	UnLocationCode                 string `protobuf:"bytes,10,opt,name=un_location_code,json=unLocationCode,proto3" json:"un_location_code,omitempty"`
	Secret                         []byte `protobuf:"bytes,11,opt,name=secret,proto3" json:"secret,omitempty"`
	UserId                         string `protobuf:"bytes,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                      string `protobuf:"bytes,13,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                      string `protobuf:"bytes,14,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateEventSubscriptionRequest) Reset() {
	*x = CreateEventSubscriptionRequest{}
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEventSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventSubscriptionRequest) ProtoMessage() {}

func (x *CreateEventSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateEventSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_eventsubscription_proto_rawDescGZIP(), []int{3}
}

func (x *CreateEventSubscriptionRequest) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

func (x *CreateEventSubscriptionRequest) GetDocumentReference() string {
	if x != nil {
		return x.DocumentReference
	}
	return ""
}

func (x *CreateEventSubscriptionRequest) GetEquipmentReference() string {
	if x != nil {
		return x.EquipmentReference
	}
	return ""
}

func (x *CreateEventSubscriptionRequest) GetTransportCallReference() string {
	if x != nil {
		return x.TransportCallReference
	}
	return ""
}

func (x *CreateEventSubscriptionRequest) GetVesselImoNumber() string {
	if x != nil {
		return x.VesselImoNumber
	}
	return ""
}

func (x *CreateEventSubscriptionRequest) GetCarrierExportVoyageNumber() string {
	if x != nil {
		return x.CarrierExportVoyageNumber
	}
	return ""
}

func (x *CreateEventSubscriptionRequest) GetUniversalExportVoyageReference() string {
	if x != nil {
		return x.UniversalExportVoyageReference
	}
	return ""
}

func (x *CreateEventSubscriptionRequest) GetCarrierServiceCode() string {
	if x != nil {
		return x.CarrierServiceCode
	}
	return ""
}

func (x *CreateEventSubscriptionRequest) GetUniversalServiceReference() string {
	if x != nil {
		return x.UniversalServiceReference
	}
	return ""
}

func (x *CreateEventSubscriptionRequest) GetUnLocationCode() string {
	if x != nil {
		return x.UnLocationCode
	}
	return ""
}

func (x *CreateEventSubscriptionRequest) GetSecret() []byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *CreateEventSubscriptionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateEventSubscriptionRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateEventSubscriptionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetEventSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventSubscriptions []*EventSubscription `protobuf:"bytes,1,rep,name=event_subscriptions,json=eventSubscriptions,proto3" json:"event_subscriptions,omitempty"`
	NextCursor         string               `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetEventSubscriptionsResponse) Reset() {
	*x = GetEventSubscriptionsResponse{}
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEventSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventSubscriptionsResponse) ProtoMessage() {}

func (x *GetEventSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*GetEventSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_eventsubscription_proto_rawDescGZIP(), []int{4}
}

func (x *GetEventSubscriptionsResponse) GetEventSubscriptions() []*EventSubscription {
	if x != nil {
		return x.EventSubscriptions
	}
	return nil
}

func (x *GetEventSubscriptionsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetEventSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetEventSubscriptionsRequest) Reset() {
	*x = GetEventSubscriptionsRequest{}
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEventSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventSubscriptionsRequest) ProtoMessage() {}

func (x *GetEventSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*GetEventSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_eventsubscription_proto_rawDescGZIP(), []int{5}
}

func (x *GetEventSubscriptionsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetEventSubscriptionsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetEventSubscriptionsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetEventSubscriptionsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type FindEventSubscriptionByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *FindEventSubscriptionByIDRequest) Reset() {
	*x = FindEventSubscriptionByIDRequest{}
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindEventSubscriptionByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventSubscriptionByIDRequest) ProtoMessage() {}

func (x *FindEventSubscriptionByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventSubscriptionByIDRequest.ProtoReflect.Descriptor instead.
func (*FindEventSubscriptionByIDRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_eventsubscription_proto_rawDescGZIP(), []int{6}
}

func (x *FindEventSubscriptionByIDRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type FindEventSubscriptionByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventSubscription *EventSubscription `protobuf:"bytes,1,opt,name=event_subscription,json=eventSubscription,proto3" json:"event_subscription,omitempty"`
}

func (x *FindEventSubscriptionByIDResponse) Reset() {
	*x = FindEventSubscriptionByIDResponse{}
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindEventSubscriptionByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventSubscriptionByIDResponse) ProtoMessage() {}

func (x *FindEventSubscriptionByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventSubscriptionByIDResponse.ProtoReflect.Descriptor instead.
func (*FindEventSubscriptionByIDResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_eventsubscription_proto_rawDescGZIP(), []int{7}
}

func (x *FindEventSubscriptionByIDResponse) GetEventSubscription() *EventSubscription {
	if x != nil {
		return x.EventSubscription
	}
	return nil
}

type UpdateEventSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallbackUrl                    string `protobuf:"bytes,1,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`
	DocumentReference              string `protobuf:"bytes,2,opt,name=document_reference,json=documentReference,proto3" json:"document_reference,omitempty"`
	EquipmentReference             string `protobuf:"bytes,3,opt,name=equipment_reference,json=equipmentReference,proto3" json:"equipment_reference,omitempty"`
	TransportCallReference         string `protobuf:"bytes,4,opt,name=transport_call_reference,json=transportCallReference,proto3" json:"transport_call_reference,omitempty"`
	VesselImoNumber                string `protobuf:"bytes,5,opt,name=vessel_imo_number,json=vesselImoNumber,proto3" json:"vessel_imo_number,omitempty"`
	CarrierExportVoyageNumber      string `protobuf:"bytes,6,opt,name=carrier_export_voyage_number,json=carrierExportVoyageNumber,proto3" json:"carrier_export_voyage_number,omitempty"`
	UniversalExportVoyageReference string `protobuf:"bytes,7,opt,name=universal_export_voyage_reference,json=universalExportVoyageReference,proto3" json:"universal_export_voyage_reference,omitempty"`
	CarrierServiceCode             string `protobuf:"bytes,8,opt,name=carrier_service_code,json=carrierServiceCode,proto3" json:"carrier_service_code,omitempty"`
	UniversalServiceReference      string `protobuf:"bytes,9,opt,name=universal_service_reference,json=universalServiceReference,proto3" json:"universal_service_reference,omitempty"`
	SubscriptionId                 string `protobuf:"bytes,10,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	UserId                         string `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                      string `protobuf:"bytes,12,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                      string `protobuf:"bytes,13,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateEventSubscriptionRequest) Reset() {
	*x = UpdateEventSubscriptionRequest{}
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEventSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventSubscriptionRequest) ProtoMessage() {}

func (x *UpdateEventSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateEventSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_eventsubscription_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateEventSubscriptionRequest) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

func (x *UpdateEventSubscriptionRequest) GetDocumentReference() string {
	if x != nil {
		return x.DocumentReference
	}
	return ""
}

func (x *UpdateEventSubscriptionRequest) GetEquipmentReference() string {
	if x != nil {
		return x.EquipmentReference
	}
	return ""
}

func (x *UpdateEventSubscriptionRequest) GetTransportCallReference() string {
	if x != nil {
		return x.TransportCallReference
	}
	return ""
}

func (x *UpdateEventSubscriptionRequest) GetVesselImoNumber() string {
	if x != nil {
		return x.VesselImoNumber
	}
	return ""
}

func (x *UpdateEventSubscriptionRequest) GetCarrierExportVoyageNumber() string {
	if x != nil {
		return x.CarrierExportVoyageNumber
	}
	return ""
}

func (x *UpdateEventSubscriptionRequest) GetUniversalExportVoyageReference() string {
	if x != nil {
		return x.UniversalExportVoyageReference
	}
	return ""
}

func (x *UpdateEventSubscriptionRequest) GetCarrierServiceCode() string {
	if x != nil {
		return x.CarrierServiceCode
	}
	return ""
}

func (x *UpdateEventSubscriptionRequest) GetUniversalServiceReference() string {
	if x != nil {
		return x.UniversalServiceReference
	}
	return ""
}

func (x *UpdateEventSubscriptionRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *UpdateEventSubscriptionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateEventSubscriptionRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateEventSubscriptionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateEventSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateEventSubscriptionResponse) Reset() {
	*x = UpdateEventSubscriptionResponse{}
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEventSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventSubscriptionResponse) ProtoMessage() {}

func (x *UpdateEventSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*UpdateEventSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_eventsubscription_proto_rawDescGZIP(), []int{9}
}

type DeleteEventSubscriptionByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetRequest *v1.GetRequest `protobuf:"bytes,1,opt,name=get_request,json=getRequest,proto3" json:"get_request,omitempty"`
}

func (x *DeleteEventSubscriptionByIDRequest) Reset() {
	*x = DeleteEventSubscriptionByIDRequest{}
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEventSubscriptionByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEventSubscriptionByIDRequest) ProtoMessage() {}

func (x *DeleteEventSubscriptionByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEventSubscriptionByIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteEventSubscriptionByIDRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_eventsubscription_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteEventSubscriptionByIDRequest) GetGetRequest() *v1.GetRequest {
	if x != nil {
		return x.GetRequest
	}
	return nil
}

type DeleteEventSubscriptionByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteEventSubscriptionByIDResponse) Reset() {
	*x = DeleteEventSubscriptionByIDResponse{}
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEventSubscriptionByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEventSubscriptionByIDResponse) ProtoMessage() {}

func (x *DeleteEventSubscriptionByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_eventsubscription_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEventSubscriptionByIDResponse.ProtoReflect.Descriptor instead.
func (*DeleteEventSubscriptionByIDResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_eventsubscription_proto_rawDescGZIP(), []int{11}
}

var File_tnt_v3_eventsubscription_proto protoreflect.FileDescriptor

var file_tnt_v3_eventsubscription_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x74, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x01,
	0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x52, 0x12, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf6, 0x04,
	0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c,
	0x12, 0x2d, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6d, 0x6f,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x21, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x75, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x6b, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xe5, 0x05, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x12, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x11,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x13, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x12, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x18, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x6f, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x49, 0x6d, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x6f, 0x79, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x21, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x48, 0x1c, 0x72, 0x1a, 0x18, 0x64, 0x32,
	0x16, 0x5c, 0x64, 0x7b, 0x32, 0x7d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x32,
	0x7d, 0x5b, 0x4e, 0x45, 0x57, 0x53, 0x5d, 0x52, 0x1e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x12,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6e, 0x74,
	0x2e, 0x76, 0x33, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x5a, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x21,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x05, 0x0a, 0x1e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72,
	0x6c, 0x12, 0x36, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x13, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52,
	0x12, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x16,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x5f, 0x69, 0x6d, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6d, 0x6f, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x21, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6f, 0x79, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x6f, 0x79, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39,
	0x0a, 0x14, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x18, 0x32, 0x52, 0x12, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x22,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xc2, 0x04, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x74, 0x6e, 0x74, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x6e, 0x74, 0x2e,
	0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x70, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12, 0x28, 0x2e,
	0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x76, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x2a, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x2f, 0x73, 0x63, 0x2d, 0x64, 0x63, 0x73, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x6e, 0x74, 0x2f, 0x76,
	0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tnt_v3_eventsubscription_proto_rawDescOnce sync.Once
	file_tnt_v3_eventsubscription_proto_rawDescData = file_tnt_v3_eventsubscription_proto_rawDesc
)

func file_tnt_v3_eventsubscription_proto_rawDescGZIP() []byte {
	file_tnt_v3_eventsubscription_proto_rawDescOnce.Do(func() {
		file_tnt_v3_eventsubscription_proto_rawDescData = protoimpl.X.CompressGZIP(file_tnt_v3_eventsubscription_proto_rawDescData)
	})
	return file_tnt_v3_eventsubscription_proto_rawDescData
}

var file_tnt_v3_eventsubscription_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_tnt_v3_eventsubscription_proto_goTypes = []any{
	(*EventSubscription)(nil),                   // 0: tnt.v3.EventSubscription
	(*EventSubscriptionD)(nil),                  // 1: tnt.v3.EventSubscriptionD
	(*CreateEventSubscriptionResponse)(nil),     // 2: tnt.v3.CreateEventSubscriptionResponse
	(*CreateEventSubscriptionRequest)(nil),      // 3: tnt.v3.CreateEventSubscriptionRequest
	(*GetEventSubscriptionsResponse)(nil),       // 4: tnt.v3.GetEventSubscriptionsResponse
	(*GetEventSubscriptionsRequest)(nil),        // 5: tnt.v3.GetEventSubscriptionsRequest
	(*FindEventSubscriptionByIDRequest)(nil),    // 6: tnt.v3.FindEventSubscriptionByIDRequest
	(*FindEventSubscriptionByIDResponse)(nil),   // 7: tnt.v3.FindEventSubscriptionByIDResponse
	(*UpdateEventSubscriptionRequest)(nil),      // 8: tnt.v3.UpdateEventSubscriptionRequest
	(*UpdateEventSubscriptionResponse)(nil),     // 9: tnt.v3.UpdateEventSubscriptionResponse
	(*DeleteEventSubscriptionByIDRequest)(nil),  // 10: tnt.v3.DeleteEventSubscriptionByIDRequest
	(*DeleteEventSubscriptionByIDResponse)(nil), // 11: tnt.v3.DeleteEventSubscriptionByIDResponse
	(*v1.CrUpdUser)(nil),                        // 12: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                        // 13: common.v1.CrUpdTime
	(*v1.GetRequest)(nil),                       // 14: common.v1.GetRequest
}
var file_tnt_v3_eventsubscription_proto_depIdxs = []int32{
	1,  // 0: tnt.v3.EventSubscription.event_subscription_d:type_name -> tnt.v3.EventSubscriptionD
	12, // 1: tnt.v3.EventSubscription.cr_upd_user:type_name -> common.v1.CrUpdUser
	13, // 2: tnt.v3.EventSubscription.cr_upd_time:type_name -> common.v1.CrUpdTime
	0,  // 3: tnt.v3.CreateEventSubscriptionResponse.event_subscription:type_name -> tnt.v3.EventSubscription
	0,  // 4: tnt.v3.GetEventSubscriptionsResponse.event_subscriptions:type_name -> tnt.v3.EventSubscription
	14, // 5: tnt.v3.FindEventSubscriptionByIDRequest.get_request:type_name -> common.v1.GetRequest
	0,  // 6: tnt.v3.FindEventSubscriptionByIDResponse.event_subscription:type_name -> tnt.v3.EventSubscription
	14, // 7: tnt.v3.DeleteEventSubscriptionByIDRequest.get_request:type_name -> common.v1.GetRequest
	3,  // 8: tnt.v3.EventSubscriptionService.CreateEventSubscription:input_type -> tnt.v3.CreateEventSubscriptionRequest
	5,  // 9: tnt.v3.EventSubscriptionService.GetEventSubscriptions:input_type -> tnt.v3.GetEventSubscriptionsRequest
	6,  // 10: tnt.v3.EventSubscriptionService.FindEventSubscriptionByID:input_type -> tnt.v3.FindEventSubscriptionByIDRequest
	10, // 11: tnt.v3.EventSubscriptionService.DeleteEventSubscriptionByID:input_type -> tnt.v3.DeleteEventSubscriptionByIDRequest
	8,  // 12: tnt.v3.EventSubscriptionService.UpdateEventSubscription:input_type -> tnt.v3.UpdateEventSubscriptionRequest
	2,  // 13: tnt.v3.EventSubscriptionService.CreateEventSubscription:output_type -> tnt.v3.CreateEventSubscriptionResponse
	4,  // 14: tnt.v3.EventSubscriptionService.GetEventSubscriptions:output_type -> tnt.v3.GetEventSubscriptionsResponse
	7,  // 15: tnt.v3.EventSubscriptionService.FindEventSubscriptionByID:output_type -> tnt.v3.FindEventSubscriptionByIDResponse
	11, // 16: tnt.v3.EventSubscriptionService.DeleteEventSubscriptionByID:output_type -> tnt.v3.DeleteEventSubscriptionByIDResponse
	9,  // 17: tnt.v3.EventSubscriptionService.UpdateEventSubscription:output_type -> tnt.v3.UpdateEventSubscriptionResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_tnt_v3_eventsubscription_proto_init() }
func file_tnt_v3_eventsubscription_proto_init() {
	if File_tnt_v3_eventsubscription_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tnt_v3_eventsubscription_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tnt_v3_eventsubscription_proto_goTypes,
		DependencyIndexes: file_tnt_v3_eventsubscription_proto_depIdxs,
		MessageInfos:      file_tnt_v3_eventsubscription_proto_msgTypes,
	}.Build()
	File_tnt_v3_eventsubscription_proto = out.File
	file_tnt_v3_eventsubscription_proto_rawDesc = nil
	file_tnt_v3_eventsubscription_proto_goTypes = nil
	file_tnt_v3_eventsubscription_proto_depIdxs = nil
}
