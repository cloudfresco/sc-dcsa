// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tnt/v3/seal.proto

package v3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Seal with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Seal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Seal with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SealMultiError, or nil if none found.
func (m *Seal) ValidateAll() error {
	return m.validate(true)
}

func (m *Seal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSealD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SealValidationError{
					field:  "SealD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SealValidationError{
					field:  "SealD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSealD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SealValidationError{
				field:  "SealD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SealValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SealValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SealValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SealValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SealValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SealValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SealMultiError(errors)
	}

	return nil
}

// SealMultiError is an error wrapping multiple validation errors returned by
// Seal.ValidateAll() if the designated constraints aren't met.
type SealMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SealMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SealMultiError) AllErrors() []error { return m }

// SealValidationError is the validation error returned by Seal.Validate if the
// designated constraints aren't met.
type SealValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SealValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SealValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SealValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SealValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SealValidationError) ErrorName() string { return "SealValidationError" }

// Error satisfies the builtin error interface
func (e SealValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSeal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SealValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SealValidationError{}

// Validate checks the field values on SealD with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SealD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SealD with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SealDMultiError, or nil if none found.
func (m *SealD) ValidateAll() error {
	return m.validate(true)
}

func (m *SealD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for UtilizedTransportEquipmentId

	// no validation rules for SealNumber

	// no validation rules for SealSourceCode

	// no validation rules for SealTypeCode

	if len(errors) > 0 {
		return SealDMultiError(errors)
	}

	return nil
}

// SealDMultiError is an error wrapping multiple validation errors returned by
// SealD.ValidateAll() if the designated constraints aren't met.
type SealDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SealDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SealDMultiError) AllErrors() []error { return m }

// SealDValidationError is the validation error returned by SealD.Validate if
// the designated constraints aren't met.
type SealDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SealDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SealDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SealDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SealDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SealDValidationError) ErrorName() string { return "SealDValidationError" }

// Error satisfies the builtin error interface
func (e SealDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSealD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SealDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SealDValidationError{}

// Validate checks the field values on CreateSealRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSealRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSealRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSealRequestMultiError, or nil if none found.
func (m *CreateSealRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSealRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UtilizedTransportEquipmentId

	// no validation rules for SealNumber

	// no validation rules for SealSourceCode

	// no validation rules for SealTypeCode

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateSealRequestMultiError(errors)
	}

	return nil
}

// CreateSealRequestMultiError is an error wrapping multiple validation errors
// returned by CreateSealRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateSealRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSealRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSealRequestMultiError) AllErrors() []error { return m }

// CreateSealRequestValidationError is the validation error returned by
// CreateSealRequest.Validate if the designated constraints aren't met.
type CreateSealRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSealRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSealRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSealRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSealRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSealRequestValidationError) ErrorName() string {
	return "CreateSealRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSealRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSealRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSealRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSealRequestValidationError{}

// Validate checks the field values on CreateSealResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSealResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSealResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSealResponseMultiError, or nil if none found.
func (m *CreateSealResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSealResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSeal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSealResponseValidationError{
					field:  "Seal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSealResponseValidationError{
					field:  "Seal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSeal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSealResponseValidationError{
				field:  "Seal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSealResponseMultiError(errors)
	}

	return nil
}

// CreateSealResponseMultiError is an error wrapping multiple validation errors
// returned by CreateSealResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateSealResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSealResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSealResponseMultiError) AllErrors() []error { return m }

// CreateSealResponseValidationError is the validation error returned by
// CreateSealResponse.Validate if the designated constraints aren't met.
type CreateSealResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSealResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSealResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSealResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSealResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSealResponseValidationError) ErrorName() string {
	return "CreateSealResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSealResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSealResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSealResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSealResponseValidationError{}

// Validate checks the field values on GetSealsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSealsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSealsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSealsResponseMultiError, or nil if none found.
func (m *GetSealsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSealsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSeals() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSealsResponseValidationError{
						field:  fmt.Sprintf("Seals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSealsResponseValidationError{
						field:  fmt.Sprintf("Seals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSealsResponseValidationError{
					field:  fmt.Sprintf("Seals[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetSealsResponseMultiError(errors)
	}

	return nil
}

// GetSealsResponseMultiError is an error wrapping multiple validation errors
// returned by GetSealsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSealsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSealsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSealsResponseMultiError) AllErrors() []error { return m }

// GetSealsResponseValidationError is the validation error returned by
// GetSealsResponse.Validate if the designated constraints aren't met.
type GetSealsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSealsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSealsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSealsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSealsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSealsResponseValidationError) ErrorName() string { return "GetSealsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSealsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSealsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSealsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSealsResponseValidationError{}

// Validate checks the field values on GetSealsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSealsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSealsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSealsRequestMultiError, or nil if none found.
func (m *GetSealsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSealsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GetSealsRequestMultiError(errors)
	}

	return nil
}

// GetSealsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSealsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSealsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSealsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSealsRequestMultiError) AllErrors() []error { return m }

// GetSealsRequestValidationError is the validation error returned by
// GetSealsRequest.Validate if the designated constraints aren't met.
type GetSealsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSealsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSealsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSealsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSealsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSealsRequestValidationError) ErrorName() string { return "GetSealsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSealsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSealsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSealsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSealsRequestValidationError{}
