// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: tnt/v3/seal.proto

package v3

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Seal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SealD     *SealD        `protobuf:"bytes,1,opt,name=seal_d,json=sealD,proto3" json:"seal_d,omitempty"`
	CrUpdUser *v1.CrUpdUser `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime *v1.CrUpdTime `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *Seal) Reset() {
	*x = Seal{}
	mi := &file_tnt_v3_seal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Seal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Seal) ProtoMessage() {}

func (x *Seal) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_seal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Seal.ProtoReflect.Descriptor instead.
func (*Seal) Descriptor() ([]byte, []int) {
	return file_tnt_v3_seal_proto_rawDescGZIP(), []int{0}
}

func (x *Seal) GetSealD() *SealD {
	if x != nil {
		return x.SealD
	}
	return nil
}

func (x *Seal) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *Seal) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type SealD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                        []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                          string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	UtilizedTransportEquipmentId uint32 `protobuf:"varint,4,opt,name=utilized_transport_equipment_id,json=utilizedTransportEquipmentId,proto3" json:"utilized_transport_equipment_id,omitempty"`
	SealNumber                   string `protobuf:"bytes,5,opt,name=seal_number,json=sealNumber,proto3" json:"seal_number,omitempty"`
	SealSourceCode               string `protobuf:"bytes,6,opt,name=seal_source_code,json=sealSourceCode,proto3" json:"seal_source_code,omitempty"`
	SealTypeCode                 string `protobuf:"bytes,7,opt,name=seal_type_code,json=sealTypeCode,proto3" json:"seal_type_code,omitempty"`
}

func (x *SealD) Reset() {
	*x = SealD{}
	mi := &file_tnt_v3_seal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SealD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealD) ProtoMessage() {}

func (x *SealD) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_seal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealD.ProtoReflect.Descriptor instead.
func (*SealD) Descriptor() ([]byte, []int) {
	return file_tnt_v3_seal_proto_rawDescGZIP(), []int{1}
}

func (x *SealD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SealD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *SealD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *SealD) GetUtilizedTransportEquipmentId() uint32 {
	if x != nil {
		return x.UtilizedTransportEquipmentId
	}
	return 0
}

func (x *SealD) GetSealNumber() string {
	if x != nil {
		return x.SealNumber
	}
	return ""
}

func (x *SealD) GetSealSourceCode() string {
	if x != nil {
		return x.SealSourceCode
	}
	return ""
}

func (x *SealD) GetSealTypeCode() string {
	if x != nil {
		return x.SealTypeCode
	}
	return ""
}

type CreateSealRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UtilizedTransportEquipmentId uint32 `protobuf:"varint,1,opt,name=utilized_transport_equipment_id,json=utilizedTransportEquipmentId,proto3" json:"utilized_transport_equipment_id,omitempty"`
	SealNumber                   string `protobuf:"bytes,2,opt,name=seal_number,json=sealNumber,proto3" json:"seal_number,omitempty"`
	SealSourceCode               string `protobuf:"bytes,3,opt,name=seal_source_code,json=sealSourceCode,proto3" json:"seal_source_code,omitempty"`
	SealTypeCode                 string `protobuf:"bytes,4,opt,name=seal_type_code,json=sealTypeCode,proto3" json:"seal_type_code,omitempty"`
	UserId                       string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail                    string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId                    string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateSealRequest) Reset() {
	*x = CreateSealRequest{}
	mi := &file_tnt_v3_seal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSealRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSealRequest) ProtoMessage() {}

func (x *CreateSealRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_seal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSealRequest.ProtoReflect.Descriptor instead.
func (*CreateSealRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_seal_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSealRequest) GetUtilizedTransportEquipmentId() uint32 {
	if x != nil {
		return x.UtilizedTransportEquipmentId
	}
	return 0
}

func (x *CreateSealRequest) GetSealNumber() string {
	if x != nil {
		return x.SealNumber
	}
	return ""
}

func (x *CreateSealRequest) GetSealSourceCode() string {
	if x != nil {
		return x.SealSourceCode
	}
	return ""
}

func (x *CreateSealRequest) GetSealTypeCode() string {
	if x != nil {
		return x.SealTypeCode
	}
	return ""
}

func (x *CreateSealRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateSealRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateSealRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateSealResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seal *Seal `protobuf:"bytes,1,opt,name=seal,proto3" json:"seal,omitempty"`
}

func (x *CreateSealResponse) Reset() {
	*x = CreateSealResponse{}
	mi := &file_tnt_v3_seal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSealResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSealResponse) ProtoMessage() {}

func (x *CreateSealResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_seal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSealResponse.ProtoReflect.Descriptor instead.
func (*CreateSealResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_seal_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSealResponse) GetSeal() *Seal {
	if x != nil {
		return x.Seal
	}
	return nil
}

type GetSealsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seals      []*Seal `protobuf:"bytes,1,rep,name=seals,proto3" json:"seals,omitempty"`
	NextCursor string  `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *GetSealsResponse) Reset() {
	*x = GetSealsResponse{}
	mi := &file_tnt_v3_seal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSealsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSealsResponse) ProtoMessage() {}

func (x *GetSealsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_seal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSealsResponse.ProtoReflect.Descriptor instead.
func (*GetSealsResponse) Descriptor() ([]byte, []int) {
	return file_tnt_v3_seal_proto_rawDescGZIP(), []int{4}
}

func (x *GetSealsResponse) GetSeals() []*Seal {
	if x != nil {
		return x.Seals
	}
	return nil
}

func (x *GetSealsResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type GetSealsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserEmail  string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetSealsRequest) Reset() {
	*x = GetSealsRequest{}
	mi := &file_tnt_v3_seal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSealsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSealsRequest) ProtoMessage() {}

func (x *GetSealsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tnt_v3_seal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSealsRequest.ProtoReflect.Descriptor instead.
func (*GetSealsRequest) Descriptor() ([]byte, []int) {
	return file_tnt_v3_seal_proto_rawDescGZIP(), []int{5}
}

func (x *GetSealsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetSealsRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetSealsRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetSealsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

var File_tnt_v3_seal_proto protoreflect.FileDescriptor

var file_tnt_v3_seal_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x65, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x98, 0x01, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x6c, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x6e, 0x74, 0x2e,
	0x76, 0x33, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x44, 0x52, 0x05, 0x73, 0x65, 0x61, 0x6c, 0x44, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x05,
	0x53, 0x65, 0x61, 0x6c, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69,
	0x64, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x45,
	0x0a, 0x1f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x6c, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x1f,
	0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18,
	0x0f, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a,
	0x10, 0x73, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x05,
	0x52, 0x0e, 0x73, 0x65, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2d, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18,
	0x05, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04,
	0x73, 0x65, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x6e, 0x74,
	0x2e, 0x76, 0x33, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x52, 0x04, 0x73, 0x65, 0x61, 0x6c, 0x22, 0x57,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x52,
	0x05, 0x73, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x32, 0x91, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x43, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x6c, 0x12, 0x19,
	0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x6e, 0x74, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x6c,
	0x73, 0x12, 0x17, 0x2e, 0x74, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x6e, 0x74,
	0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x2f, 0x73,
	0x63, 0x2d, 0x64, 0x63, 0x73, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tnt_v3_seal_proto_rawDescOnce sync.Once
	file_tnt_v3_seal_proto_rawDescData = file_tnt_v3_seal_proto_rawDesc
)

func file_tnt_v3_seal_proto_rawDescGZIP() []byte {
	file_tnt_v3_seal_proto_rawDescOnce.Do(func() {
		file_tnt_v3_seal_proto_rawDescData = protoimpl.X.CompressGZIP(file_tnt_v3_seal_proto_rawDescData)
	})
	return file_tnt_v3_seal_proto_rawDescData
}

var file_tnt_v3_seal_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_tnt_v3_seal_proto_goTypes = []any{
	(*Seal)(nil),               // 0: tnt.v3.Seal
	(*SealD)(nil),              // 1: tnt.v3.SealD
	(*CreateSealRequest)(nil),  // 2: tnt.v3.CreateSealRequest
	(*CreateSealResponse)(nil), // 3: tnt.v3.CreateSealResponse
	(*GetSealsResponse)(nil),   // 4: tnt.v3.GetSealsResponse
	(*GetSealsRequest)(nil),    // 5: tnt.v3.GetSealsRequest
	(*v1.CrUpdUser)(nil),       // 6: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),       // 7: common.v1.CrUpdTime
}
var file_tnt_v3_seal_proto_depIdxs = []int32{
	1, // 0: tnt.v3.Seal.seal_d:type_name -> tnt.v3.SealD
	6, // 1: tnt.v3.Seal.cr_upd_user:type_name -> common.v1.CrUpdUser
	7, // 2: tnt.v3.Seal.cr_upd_time:type_name -> common.v1.CrUpdTime
	0, // 3: tnt.v3.CreateSealResponse.seal:type_name -> tnt.v3.Seal
	0, // 4: tnt.v3.GetSealsResponse.seals:type_name -> tnt.v3.Seal
	2, // 5: tnt.v3.SealService.CreateSeal:input_type -> tnt.v3.CreateSealRequest
	5, // 6: tnt.v3.SealService.GetSeals:input_type -> tnt.v3.GetSealsRequest
	3, // 7: tnt.v3.SealService.CreateSeal:output_type -> tnt.v3.CreateSealResponse
	4, // 8: tnt.v3.SealService.GetSeals:output_type -> tnt.v3.GetSealsResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_tnt_v3_seal_proto_init() }
func file_tnt_v3_seal_proto_init() {
	if File_tnt_v3_seal_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tnt_v3_seal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tnt_v3_seal_proto_goTypes,
		DependencyIndexes: file_tnt_v3_seal_proto_depIdxs,
		MessageInfos:      file_tnt_v3_seal_proto_msgTypes,
	}.Build()
	File_tnt_v3_seal_proto = out.File
	file_tnt_v3_seal_proto_rawDesc = nil
	file_tnt_v3_seal_proto_goTypes = nil
	file_tnt_v3_seal_proto_depIdxs = nil
}
