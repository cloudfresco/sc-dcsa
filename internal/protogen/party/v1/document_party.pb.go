// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: party/v1/document_party.proto

package v1

import (
	v1 "github.com/cloudfresco/sc-dcsa/internal/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateDocumentPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId               uint32 `protobuf:"varint,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	ShippingInstructionId uint32 `protobuf:"varint,2,opt,name=shipping_instruction_id,json=shippingInstructionId,proto3" json:"shipping_instruction_id,omitempty"`
	ShipmentId            uint32 `protobuf:"varint,3,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	PartyFunction         string `protobuf:"bytes,4,opt,name=party_function,json=partyFunction,proto3" json:"party_function,omitempty"`
	IsToBeNotified        bool   `protobuf:"varint,5,opt,name=is_to_be_notified,json=isToBeNotified,proto3" json:"is_to_be_notified,omitempty"`
	BookingId             uint32 `protobuf:"varint,6,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	UserId                string `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail             string `protobuf:"bytes,8,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId             string `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDocumentPartyRequest) Reset() {
	*x = CreateDocumentPartyRequest{}
	mi := &file_party_v1_document_party_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDocumentPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDocumentPartyRequest) ProtoMessage() {}

func (x *CreateDocumentPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_document_party_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDocumentPartyRequest.ProtoReflect.Descriptor instead.
func (*CreateDocumentPartyRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_document_party_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDocumentPartyRequest) GetPartyId() uint32 {
	if x != nil {
		return x.PartyId
	}
	return 0
}

func (x *CreateDocumentPartyRequest) GetShippingInstructionId() uint32 {
	if x != nil {
		return x.ShippingInstructionId
	}
	return 0
}

func (x *CreateDocumentPartyRequest) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *CreateDocumentPartyRequest) GetPartyFunction() string {
	if x != nil {
		return x.PartyFunction
	}
	return ""
}

func (x *CreateDocumentPartyRequest) GetIsToBeNotified() bool {
	if x != nil {
		return x.IsToBeNotified
	}
	return false
}

func (x *CreateDocumentPartyRequest) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

func (x *CreateDocumentPartyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateDocumentPartyRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *CreateDocumentPartyRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type CreateDocumentPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentParty *DocumentParty `protobuf:"bytes,1,opt,name=document_party,json=documentParty,proto3" json:"document_party,omitempty"`
}

func (x *CreateDocumentPartyResponse) Reset() {
	*x = CreateDocumentPartyResponse{}
	mi := &file_party_v1_document_party_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDocumentPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDocumentPartyResponse) ProtoMessage() {}

func (x *CreateDocumentPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_document_party_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDocumentPartyResponse.ProtoReflect.Descriptor instead.
func (*CreateDocumentPartyResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_document_party_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDocumentPartyResponse) GetDocumentParty() *DocumentParty {
	if x != nil {
		return x.DocumentParty
	}
	return nil
}

type CreateDocumentPartiesByBookingIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateDocumentPartyRequest *CreateDocumentPartyRequest `protobuf:"bytes,1,opt,name=create_document_party_request,json=createDocumentPartyRequest,proto3" json:"create_document_party_request,omitempty"`
}

func (x *CreateDocumentPartiesByBookingIDRequest) Reset() {
	*x = CreateDocumentPartiesByBookingIDRequest{}
	mi := &file_party_v1_document_party_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDocumentPartiesByBookingIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDocumentPartiesByBookingIDRequest) ProtoMessage() {}

func (x *CreateDocumentPartiesByBookingIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_document_party_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDocumentPartiesByBookingIDRequest.ProtoReflect.Descriptor instead.
func (*CreateDocumentPartiesByBookingIDRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_document_party_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDocumentPartiesByBookingIDRequest) GetCreateDocumentPartyRequest() *CreateDocumentPartyRequest {
	if x != nil {
		return x.CreateDocumentPartyRequest
	}
	return nil
}

type CreateDocumentPartiesByBookingIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentParty *DocumentParty `protobuf:"bytes,1,opt,name=document_party,json=documentParty,proto3" json:"document_party,omitempty"`
}

func (x *CreateDocumentPartiesByBookingIDResponse) Reset() {
	*x = CreateDocumentPartiesByBookingIDResponse{}
	mi := &file_party_v1_document_party_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDocumentPartiesByBookingIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDocumentPartiesByBookingIDResponse) ProtoMessage() {}

func (x *CreateDocumentPartiesByBookingIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_document_party_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDocumentPartiesByBookingIDResponse.ProtoReflect.Descriptor instead.
func (*CreateDocumentPartiesByBookingIDResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_document_party_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDocumentPartiesByBookingIDResponse) GetDocumentParty() *DocumentParty {
	if x != nil {
		return x.DocumentParty
	}
	return nil
}

type CreateDocumentPartiesByShippingInstructionIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateDocumentPartyRequest *CreateDocumentPartyRequest `protobuf:"bytes,1,opt,name=create_document_party_request,json=createDocumentPartyRequest,proto3" json:"create_document_party_request,omitempty"`
}

func (x *CreateDocumentPartiesByShippingInstructionIDRequest) Reset() {
	*x = CreateDocumentPartiesByShippingInstructionIDRequest{}
	mi := &file_party_v1_document_party_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDocumentPartiesByShippingInstructionIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDocumentPartiesByShippingInstructionIDRequest) ProtoMessage() {}

func (x *CreateDocumentPartiesByShippingInstructionIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_document_party_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDocumentPartiesByShippingInstructionIDRequest.ProtoReflect.Descriptor instead.
func (*CreateDocumentPartiesByShippingInstructionIDRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_document_party_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDocumentPartiesByShippingInstructionIDRequest) GetCreateDocumentPartyRequest() *CreateDocumentPartyRequest {
	if x != nil {
		return x.CreateDocumentPartyRequest
	}
	return nil
}

type CreateDocumentPartiesByShippingInstructionIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentParty *DocumentParty `protobuf:"bytes,1,opt,name=document_party,json=documentParty,proto3" json:"document_party,omitempty"`
}

func (x *CreateDocumentPartiesByShippingInstructionIDResponse) Reset() {
	*x = CreateDocumentPartiesByShippingInstructionIDResponse{}
	mi := &file_party_v1_document_party_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDocumentPartiesByShippingInstructionIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDocumentPartiesByShippingInstructionIDResponse) ProtoMessage() {}

func (x *CreateDocumentPartiesByShippingInstructionIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_document_party_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDocumentPartiesByShippingInstructionIDResponse.ProtoReflect.Descriptor instead.
func (*CreateDocumentPartiesByShippingInstructionIDResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_document_party_proto_rawDescGZIP(), []int{5}
}

func (x *CreateDocumentPartiesByShippingInstructionIDResponse) GetDocumentParty() *DocumentParty {
	if x != nil {
		return x.DocumentParty
	}
	return nil
}

type FetchDocumentPartiesByBookingIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId  uint32 `protobuf:"varint,1,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	Limit      string `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor string `protobuf:"bytes,3,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserId     string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail  string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId  string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *FetchDocumentPartiesByBookingIDRequest) Reset() {
	*x = FetchDocumentPartiesByBookingIDRequest{}
	mi := &file_party_v1_document_party_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchDocumentPartiesByBookingIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDocumentPartiesByBookingIDRequest) ProtoMessage() {}

func (x *FetchDocumentPartiesByBookingIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_document_party_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDocumentPartiesByBookingIDRequest.ProtoReflect.Descriptor instead.
func (*FetchDocumentPartiesByBookingIDRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_document_party_proto_rawDescGZIP(), []int{6}
}

func (x *FetchDocumentPartiesByBookingIDRequest) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

func (x *FetchDocumentPartiesByBookingIDRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *FetchDocumentPartiesByBookingIDRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *FetchDocumentPartiesByBookingIDRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FetchDocumentPartiesByBookingIDRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *FetchDocumentPartiesByBookingIDRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type FetchDocumentPartiesByBookingIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentParties []*DocumentParty `protobuf:"bytes,1,rep,name=document_parties,json=documentParties,proto3" json:"document_parties,omitempty"`
	NextCursor      string           `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *FetchDocumentPartiesByBookingIDResponse) Reset() {
	*x = FetchDocumentPartiesByBookingIDResponse{}
	mi := &file_party_v1_document_party_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchDocumentPartiesByBookingIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDocumentPartiesByBookingIDResponse) ProtoMessage() {}

func (x *FetchDocumentPartiesByBookingIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_document_party_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDocumentPartiesByBookingIDResponse.ProtoReflect.Descriptor instead.
func (*FetchDocumentPartiesByBookingIDResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_document_party_proto_rawDescGZIP(), []int{7}
}

func (x *FetchDocumentPartiesByBookingIDResponse) GetDocumentParties() []*DocumentParty {
	if x != nil {
		return x.DocumentParties
	}
	return nil
}

func (x *FetchDocumentPartiesByBookingIDResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type FetchDocumentPartiesByByShippingInstructionIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShippingInstructionId uint32 `protobuf:"varint,1,opt,name=shipping_instruction_id,json=shippingInstructionId,proto3" json:"shipping_instruction_id,omitempty"`
	Limit                 string `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	NextCursor            string `protobuf:"bytes,3,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	UserId                string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail             string `protobuf:"bytes,5,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId             string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *FetchDocumentPartiesByByShippingInstructionIDRequest) Reset() {
	*x = FetchDocumentPartiesByByShippingInstructionIDRequest{}
	mi := &file_party_v1_document_party_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchDocumentPartiesByByShippingInstructionIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDocumentPartiesByByShippingInstructionIDRequest) ProtoMessage() {}

func (x *FetchDocumentPartiesByByShippingInstructionIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_document_party_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDocumentPartiesByByShippingInstructionIDRequest.ProtoReflect.Descriptor instead.
func (*FetchDocumentPartiesByByShippingInstructionIDRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_document_party_proto_rawDescGZIP(), []int{8}
}

func (x *FetchDocumentPartiesByByShippingInstructionIDRequest) GetShippingInstructionId() uint32 {
	if x != nil {
		return x.ShippingInstructionId
	}
	return 0
}

func (x *FetchDocumentPartiesByByShippingInstructionIDRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *FetchDocumentPartiesByByShippingInstructionIDRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *FetchDocumentPartiesByByShippingInstructionIDRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FetchDocumentPartiesByByShippingInstructionIDRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *FetchDocumentPartiesByByShippingInstructionIDRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type FetchDocumentPartiesByByShippingInstructionIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentParties []*DocumentParty `protobuf:"bytes,1,rep,name=document_parties,json=documentParties,proto3" json:"document_parties,omitempty"`
	NextCursor      string           `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *FetchDocumentPartiesByByShippingInstructionIDResponse) Reset() {
	*x = FetchDocumentPartiesByByShippingInstructionIDResponse{}
	mi := &file_party_v1_document_party_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchDocumentPartiesByByShippingInstructionIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDocumentPartiesByByShippingInstructionIDResponse) ProtoMessage() {}

func (x *FetchDocumentPartiesByByShippingInstructionIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_document_party_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDocumentPartiesByByShippingInstructionIDResponse.ProtoReflect.Descriptor instead.
func (*FetchDocumentPartiesByByShippingInstructionIDResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_document_party_proto_rawDescGZIP(), []int{9}
}

func (x *FetchDocumentPartiesByByShippingInstructionIDResponse) GetDocumentParties() []*DocumentParty {
	if x != nil {
		return x.DocumentParties
	}
	return nil
}

func (x *FetchDocumentPartiesByByShippingInstructionIDResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type ResolveDocumentPartiesForShippingInstructionIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShippingInstructionId uint32 `protobuf:"varint,1,opt,name=shipping_instruction_id,json=shippingInstructionId,proto3" json:"shipping_instruction_id,omitempty"`
	DocumentPartyId       uint32 `protobuf:"varint,2,opt,name=document_party_id,json=documentPartyId,proto3" json:"document_party_id,omitempty"`
	UserId                string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail             string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	RequestId             string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *ResolveDocumentPartiesForShippingInstructionIDRequest) Reset() {
	*x = ResolveDocumentPartiesForShippingInstructionIDRequest{}
	mi := &file_party_v1_document_party_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveDocumentPartiesForShippingInstructionIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveDocumentPartiesForShippingInstructionIDRequest) ProtoMessage() {}

func (x *ResolveDocumentPartiesForShippingInstructionIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_document_party_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveDocumentPartiesForShippingInstructionIDRequest.ProtoReflect.Descriptor instead.
func (*ResolveDocumentPartiesForShippingInstructionIDRequest) Descriptor() ([]byte, []int) {
	return file_party_v1_document_party_proto_rawDescGZIP(), []int{10}
}

func (x *ResolveDocumentPartiesForShippingInstructionIDRequest) GetShippingInstructionId() uint32 {
	if x != nil {
		return x.ShippingInstructionId
	}
	return 0
}

func (x *ResolveDocumentPartiesForShippingInstructionIDRequest) GetDocumentPartyId() uint32 {
	if x != nil {
		return x.DocumentPartyId
	}
	return 0
}

func (x *ResolveDocumentPartiesForShippingInstructionIDRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ResolveDocumentPartiesForShippingInstructionIDRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *ResolveDocumentPartiesForShippingInstructionIDRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ResolveDocumentPartiesForShippingInstructionIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResolveDocumentPartiesForShippingInstructionIDResponse) Reset() {
	*x = ResolveDocumentPartiesForShippingInstructionIDResponse{}
	mi := &file_party_v1_document_party_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveDocumentPartiesForShippingInstructionIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveDocumentPartiesForShippingInstructionIDResponse) ProtoMessage() {}

func (x *ResolveDocumentPartiesForShippingInstructionIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_document_party_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveDocumentPartiesForShippingInstructionIDResponse.ProtoReflect.Descriptor instead.
func (*ResolveDocumentPartiesForShippingInstructionIDResponse) Descriptor() ([]byte, []int) {
	return file_party_v1_document_party_proto_rawDescGZIP(), []int{11}
}

type DocumentParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentPartyD *DocumentPartyD `protobuf:"bytes,1,opt,name=document_party_d,json=documentPartyD,proto3" json:"document_party_d,omitempty"`
	CrUpdUser      *v1.CrUpdUser   `protobuf:"bytes,2,opt,name=cr_upd_user,json=crUpdUser,proto3" json:"cr_upd_user,omitempty"`
	CrUpdTime      *v1.CrUpdTime   `protobuf:"bytes,3,opt,name=cr_upd_time,json=crUpdTime,proto3" json:"cr_upd_time,omitempty"`
}

func (x *DocumentParty) Reset() {
	*x = DocumentParty{}
	mi := &file_party_v1_document_party_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentParty) ProtoMessage() {}

func (x *DocumentParty) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_document_party_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentParty.ProtoReflect.Descriptor instead.
func (*DocumentParty) Descriptor() ([]byte, []int) {
	return file_party_v1_document_party_proto_rawDescGZIP(), []int{12}
}

func (x *DocumentParty) GetDocumentPartyD() *DocumentPartyD {
	if x != nil {
		return x.DocumentPartyD
	}
	return nil
}

func (x *DocumentParty) GetCrUpdUser() *v1.CrUpdUser {
	if x != nil {
		return x.CrUpdUser
	}
	return nil
}

func (x *DocumentParty) GetCrUpdTime() *v1.CrUpdTime {
	if x != nil {
		return x.CrUpdTime
	}
	return nil
}

type DocumentPartyD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid4                 []byte `protobuf:"bytes,2,opt,name=uuid4,proto3" json:"uuid4,omitempty"`
	IdS                   string `protobuf:"bytes,3,opt,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
	PartyId               uint32 `protobuf:"varint,4,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	ShippingInstructionId uint32 `protobuf:"varint,5,opt,name=shipping_instruction_id,json=shippingInstructionId,proto3" json:"shipping_instruction_id,omitempty"`
	ShipmentId            uint32 `protobuf:"varint,6,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id,omitempty"`
	PartyFunction         string `protobuf:"bytes,7,opt,name=party_function,json=partyFunction,proto3" json:"party_function,omitempty"`
	IsToBeNotified        bool   `protobuf:"varint,8,opt,name=is_to_be_notified,json=isToBeNotified,proto3" json:"is_to_be_notified,omitempty"`
	BookingId             uint32 `protobuf:"varint,9,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
}

func (x *DocumentPartyD) Reset() {
	*x = DocumentPartyD{}
	mi := &file_party_v1_document_party_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentPartyD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentPartyD) ProtoMessage() {}

func (x *DocumentPartyD) ProtoReflect() protoreflect.Message {
	mi := &file_party_v1_document_party_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentPartyD.ProtoReflect.Descriptor instead.
func (*DocumentPartyD) Descriptor() ([]byte, []int) {
	return file_party_v1_document_party_proto_rawDescGZIP(), []int{13}
}

func (x *DocumentPartyD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DocumentPartyD) GetUuid4() []byte {
	if x != nil {
		return x.Uuid4
	}
	return nil
}

func (x *DocumentPartyD) GetIdS() string {
	if x != nil {
		return x.IdS
	}
	return ""
}

func (x *DocumentPartyD) GetPartyId() uint32 {
	if x != nil {
		return x.PartyId
	}
	return 0
}

func (x *DocumentPartyD) GetShippingInstructionId() uint32 {
	if x != nil {
		return x.ShippingInstructionId
	}
	return 0
}

func (x *DocumentPartyD) GetShipmentId() uint32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *DocumentPartyD) GetPartyFunction() string {
	if x != nil {
		return x.PartyFunction
	}
	return ""
}

func (x *DocumentPartyD) GetIsToBeNotified() bool {
	if x != nil {
		return x.IsToBeNotified
	}
	return false
}

func (x *DocumentPartyD) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

var File_party_v1_document_party_proto protoreflect.FileDescriptor

var file_party_v1_document_party_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd8, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x11, 0x69,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0d, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x27,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x6a, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0e,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0x9e, 0x01, 0x0a,
	0x33, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x76, 0x0a,
	0x34, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0xd5, 0x01, 0x0a, 0x26, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x8e, 0x01,
	0x0a, 0x27, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xfc,
	0x01, 0x0a, 0x34, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x9c, 0x01,
	0x0a, 0x35, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xf2, 0x01, 0x0a,
	0x35, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x38, 0x0a, 0x36, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0d,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x42, 0x0a,
	0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x44, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x44, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72,
	0x55, 0x70, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x09, 0x63, 0x72, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xae, 0x02,
	0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x34, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x53, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x69, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x32, 0xa8,
	0x07, 0x0a, 0x14, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x24,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x20,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44,
	0x12, 0x31, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3d, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x1f, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x30, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0xb0, 0x01, 0x0a, 0x2d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x42, 0x79, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x3e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x42, 0x79, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x42, 0x79, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xb3, 0x01, 0x0a, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3f, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x2f, 0x73, 0x63, 0x2d, 0x64, 0x63, 0x73, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_party_v1_document_party_proto_rawDescOnce sync.Once
	file_party_v1_document_party_proto_rawDescData = file_party_v1_document_party_proto_rawDesc
)

func file_party_v1_document_party_proto_rawDescGZIP() []byte {
	file_party_v1_document_party_proto_rawDescOnce.Do(func() {
		file_party_v1_document_party_proto_rawDescData = protoimpl.X.CompressGZIP(file_party_v1_document_party_proto_rawDescData)
	})
	return file_party_v1_document_party_proto_rawDescData
}

var file_party_v1_document_party_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_party_v1_document_party_proto_goTypes = []any{
	(*CreateDocumentPartyRequest)(nil),                             // 0: party.v1.CreateDocumentPartyRequest
	(*CreateDocumentPartyResponse)(nil),                            // 1: party.v1.CreateDocumentPartyResponse
	(*CreateDocumentPartiesByBookingIDRequest)(nil),                // 2: party.v1.CreateDocumentPartiesByBookingIDRequest
	(*CreateDocumentPartiesByBookingIDResponse)(nil),               // 3: party.v1.CreateDocumentPartiesByBookingIDResponse
	(*CreateDocumentPartiesByShippingInstructionIDRequest)(nil),    // 4: party.v1.CreateDocumentPartiesByShippingInstructionIDRequest
	(*CreateDocumentPartiesByShippingInstructionIDResponse)(nil),   // 5: party.v1.CreateDocumentPartiesByShippingInstructionIDResponse
	(*FetchDocumentPartiesByBookingIDRequest)(nil),                 // 6: party.v1.FetchDocumentPartiesByBookingIDRequest
	(*FetchDocumentPartiesByBookingIDResponse)(nil),                // 7: party.v1.FetchDocumentPartiesByBookingIDResponse
	(*FetchDocumentPartiesByByShippingInstructionIDRequest)(nil),   // 8: party.v1.FetchDocumentPartiesByByShippingInstructionIDRequest
	(*FetchDocumentPartiesByByShippingInstructionIDResponse)(nil),  // 9: party.v1.FetchDocumentPartiesByByShippingInstructionIDResponse
	(*ResolveDocumentPartiesForShippingInstructionIDRequest)(nil),  // 10: party.v1.ResolveDocumentPartiesForShippingInstructionIDRequest
	(*ResolveDocumentPartiesForShippingInstructionIDResponse)(nil), // 11: party.v1.ResolveDocumentPartiesForShippingInstructionIDResponse
	(*DocumentParty)(nil),                                          // 12: party.v1.DocumentParty
	(*DocumentPartyD)(nil),                                         // 13: party.v1.DocumentPartyD
	(*v1.CrUpdUser)(nil),                                           // 14: common.v1.CrUpdUser
	(*v1.CrUpdTime)(nil),                                           // 15: common.v1.CrUpdTime
}
var file_party_v1_document_party_proto_depIdxs = []int32{
	12, // 0: party.v1.CreateDocumentPartyResponse.document_party:type_name -> party.v1.DocumentParty
	0,  // 1: party.v1.CreateDocumentPartiesByBookingIDRequest.create_document_party_request:type_name -> party.v1.CreateDocumentPartyRequest
	12, // 2: party.v1.CreateDocumentPartiesByBookingIDResponse.document_party:type_name -> party.v1.DocumentParty
	0,  // 3: party.v1.CreateDocumentPartiesByShippingInstructionIDRequest.create_document_party_request:type_name -> party.v1.CreateDocumentPartyRequest
	12, // 4: party.v1.CreateDocumentPartiesByShippingInstructionIDResponse.document_party:type_name -> party.v1.DocumentParty
	12, // 5: party.v1.FetchDocumentPartiesByBookingIDResponse.document_parties:type_name -> party.v1.DocumentParty
	12, // 6: party.v1.FetchDocumentPartiesByByShippingInstructionIDResponse.document_parties:type_name -> party.v1.DocumentParty
	13, // 7: party.v1.DocumentParty.document_party_d:type_name -> party.v1.DocumentPartyD
	14, // 8: party.v1.DocumentParty.cr_upd_user:type_name -> common.v1.CrUpdUser
	15, // 9: party.v1.DocumentParty.cr_upd_time:type_name -> common.v1.CrUpdTime
	0,  // 10: party.v1.DocumentPartyService.CreateDocumentParty:input_type -> party.v1.CreateDocumentPartyRequest
	2,  // 11: party.v1.DocumentPartyService.CreateDocumentPartiesByBookingID:input_type -> party.v1.CreateDocumentPartiesByBookingIDRequest
	4,  // 12: party.v1.DocumentPartyService.CreateDocumentPartiesByShippingInstructionID:input_type -> party.v1.CreateDocumentPartiesByShippingInstructionIDRequest
	6,  // 13: party.v1.DocumentPartyService.FetchDocumentPartiesByBookingID:input_type -> party.v1.FetchDocumentPartiesByBookingIDRequest
	8,  // 14: party.v1.DocumentPartyService.FetchDocumentPartiesByByShippingInstructionID:input_type -> party.v1.FetchDocumentPartiesByByShippingInstructionIDRequest
	10, // 15: party.v1.DocumentPartyService.ResolveDocumentPartiesForShippingInstructionID:input_type -> party.v1.ResolveDocumentPartiesForShippingInstructionIDRequest
	1,  // 16: party.v1.DocumentPartyService.CreateDocumentParty:output_type -> party.v1.CreateDocumentPartyResponse
	3,  // 17: party.v1.DocumentPartyService.CreateDocumentPartiesByBookingID:output_type -> party.v1.CreateDocumentPartiesByBookingIDResponse
	5,  // 18: party.v1.DocumentPartyService.CreateDocumentPartiesByShippingInstructionID:output_type -> party.v1.CreateDocumentPartiesByShippingInstructionIDResponse
	7,  // 19: party.v1.DocumentPartyService.FetchDocumentPartiesByBookingID:output_type -> party.v1.FetchDocumentPartiesByBookingIDResponse
	9,  // 20: party.v1.DocumentPartyService.FetchDocumentPartiesByByShippingInstructionID:output_type -> party.v1.FetchDocumentPartiesByByShippingInstructionIDResponse
	11, // 21: party.v1.DocumentPartyService.ResolveDocumentPartiesForShippingInstructionID:output_type -> party.v1.ResolveDocumentPartiesForShippingInstructionIDResponse
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_party_v1_document_party_proto_init() }
func file_party_v1_document_party_proto_init() {
	if File_party_v1_document_party_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_party_v1_document_party_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_party_v1_document_party_proto_goTypes,
		DependencyIndexes: file_party_v1_document_party_proto_depIdxs,
		MessageInfos:      file_party_v1_document_party_proto_msgTypes,
	}.Build()
	File_party_v1_document_party_proto = out.File
	file_party_v1_document_party_proto_rawDesc = nil
	file_party_v1_document_party_proto_goTypes = nil
	file_party_v1_document_party_proto_depIdxs = nil
}
