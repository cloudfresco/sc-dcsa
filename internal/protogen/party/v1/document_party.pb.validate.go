// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: party/v1/document_party.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateDocumentPartyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentPartyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDocumentPartyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDocumentPartyRequestMultiError, or nil if none found.
func (m *CreateDocumentPartyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentPartyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartyId

	// no validation rules for ShippingInstructionId

	// no validation rules for ShipmentId

	// no validation rules for PartyFunction

	// no validation rules for IsToBeNotified

	// no validation rules for BookingId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateDocumentPartyRequestMultiError(errors)
	}

	return nil
}

// CreateDocumentPartyRequestMultiError is an error wrapping multiple
// validation errors returned by CreateDocumentPartyRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateDocumentPartyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentPartyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentPartyRequestMultiError) AllErrors() []error { return m }

// CreateDocumentPartyRequestValidationError is the validation error returned
// by CreateDocumentPartyRequest.Validate if the designated constraints aren't met.
type CreateDocumentPartyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentPartyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentPartyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentPartyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentPartyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentPartyRequestValidationError) ErrorName() string {
	return "CreateDocumentPartyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentPartyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentPartyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentPartyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentPartyRequestValidationError{}

// Validate checks the field values on CreateDocumentPartyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentPartyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDocumentPartyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDocumentPartyResponseMultiError, or nil if none found.
func (m *CreateDocumentPartyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentPartyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDocumentParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDocumentPartyResponseValidationError{
					field:  "DocumentParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDocumentPartyResponseValidationError{
					field:  "DocumentParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDocumentParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDocumentPartyResponseValidationError{
				field:  "DocumentParty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDocumentPartyResponseMultiError(errors)
	}

	return nil
}

// CreateDocumentPartyResponseMultiError is an error wrapping multiple
// validation errors returned by CreateDocumentPartyResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateDocumentPartyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentPartyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentPartyResponseMultiError) AllErrors() []error { return m }

// CreateDocumentPartyResponseValidationError is the validation error returned
// by CreateDocumentPartyResponse.Validate if the designated constraints
// aren't met.
type CreateDocumentPartyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentPartyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentPartyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentPartyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentPartyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentPartyResponseValidationError) ErrorName() string {
	return "CreateDocumentPartyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentPartyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentPartyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentPartyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentPartyResponseValidationError{}

// Validate checks the field values on CreateDocumentPartiesByBookingIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateDocumentPartiesByBookingIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDocumentPartiesByBookingIDRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateDocumentPartiesByBookingIDRequestMultiError, or nil if none found.
func (m *CreateDocumentPartiesByBookingIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentPartiesByBookingIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreateDocumentPartyRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDocumentPartiesByBookingIDRequestValidationError{
					field:  "CreateDocumentPartyRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDocumentPartiesByBookingIDRequestValidationError{
					field:  "CreateDocumentPartyRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateDocumentPartyRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDocumentPartiesByBookingIDRequestValidationError{
				field:  "CreateDocumentPartyRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDocumentPartiesByBookingIDRequestMultiError(errors)
	}

	return nil
}

// CreateDocumentPartiesByBookingIDRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateDocumentPartiesByBookingIDRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDocumentPartiesByBookingIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentPartiesByBookingIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentPartiesByBookingIDRequestMultiError) AllErrors() []error { return m }

// CreateDocumentPartiesByBookingIDRequestValidationError is the validation
// error returned by CreateDocumentPartiesByBookingIDRequest.Validate if the
// designated constraints aren't met.
type CreateDocumentPartiesByBookingIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentPartiesByBookingIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentPartiesByBookingIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentPartiesByBookingIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentPartiesByBookingIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentPartiesByBookingIDRequestValidationError) ErrorName() string {
	return "CreateDocumentPartiesByBookingIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentPartiesByBookingIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentPartiesByBookingIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentPartiesByBookingIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentPartiesByBookingIDRequestValidationError{}

// Validate checks the field values on CreateDocumentPartiesByBookingIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateDocumentPartiesByBookingIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDocumentPartiesByBookingIDResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateDocumentPartiesByBookingIDResponseMultiError, or nil if none found.
func (m *CreateDocumentPartiesByBookingIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentPartiesByBookingIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDocumentParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDocumentPartiesByBookingIDResponseValidationError{
					field:  "DocumentParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDocumentPartiesByBookingIDResponseValidationError{
					field:  "DocumentParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDocumentParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDocumentPartiesByBookingIDResponseValidationError{
				field:  "DocumentParty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDocumentPartiesByBookingIDResponseMultiError(errors)
	}

	return nil
}

// CreateDocumentPartiesByBookingIDResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateDocumentPartiesByBookingIDResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDocumentPartiesByBookingIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentPartiesByBookingIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentPartiesByBookingIDResponseMultiError) AllErrors() []error { return m }

// CreateDocumentPartiesByBookingIDResponseValidationError is the validation
// error returned by CreateDocumentPartiesByBookingIDResponse.Validate if the
// designated constraints aren't met.
type CreateDocumentPartiesByBookingIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentPartiesByBookingIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentPartiesByBookingIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentPartiesByBookingIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentPartiesByBookingIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentPartiesByBookingIDResponseValidationError) ErrorName() string {
	return "CreateDocumentPartiesByBookingIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentPartiesByBookingIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentPartiesByBookingIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentPartiesByBookingIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentPartiesByBookingIDResponseValidationError{}

// Validate checks the field values on
// CreateDocumentPartiesByShippingInstructionIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentPartiesByShippingInstructionIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDocumentPartiesByShippingInstructionIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateDocumentPartiesByShippingInstructionIDRequestMultiError, or nil if
// none found.
func (m *CreateDocumentPartiesByShippingInstructionIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentPartiesByShippingInstructionIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreateDocumentPartyRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDocumentPartiesByShippingInstructionIDRequestValidationError{
					field:  "CreateDocumentPartyRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDocumentPartiesByShippingInstructionIDRequestValidationError{
					field:  "CreateDocumentPartyRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateDocumentPartyRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDocumentPartiesByShippingInstructionIDRequestValidationError{
				field:  "CreateDocumentPartyRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDocumentPartiesByShippingInstructionIDRequestMultiError(errors)
	}

	return nil
}

// CreateDocumentPartiesByShippingInstructionIDRequestMultiError is an error
// wrapping multiple validation errors returned by
// CreateDocumentPartiesByShippingInstructionIDRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateDocumentPartiesByShippingInstructionIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentPartiesByShippingInstructionIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentPartiesByShippingInstructionIDRequestMultiError) AllErrors() []error { return m }

// CreateDocumentPartiesByShippingInstructionIDRequestValidationError is the
// validation error returned by
// CreateDocumentPartiesByShippingInstructionIDRequest.Validate if the
// designated constraints aren't met.
type CreateDocumentPartiesByShippingInstructionIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentPartiesByShippingInstructionIDRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateDocumentPartiesByShippingInstructionIDRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateDocumentPartiesByShippingInstructionIDRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateDocumentPartiesByShippingInstructionIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentPartiesByShippingInstructionIDRequestValidationError) ErrorName() string {
	return "CreateDocumentPartiesByShippingInstructionIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentPartiesByShippingInstructionIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentPartiesByShippingInstructionIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentPartiesByShippingInstructionIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentPartiesByShippingInstructionIDRequestValidationError{}

// Validate checks the field values on
// CreateDocumentPartiesByShippingInstructionIDResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentPartiesByShippingInstructionIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDocumentPartiesByShippingInstructionIDResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateDocumentPartiesByShippingInstructionIDResponseMultiError, or nil if
// none found.
func (m *CreateDocumentPartiesByShippingInstructionIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentPartiesByShippingInstructionIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDocumentParty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDocumentPartiesByShippingInstructionIDResponseValidationError{
					field:  "DocumentParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDocumentPartiesByShippingInstructionIDResponseValidationError{
					field:  "DocumentParty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDocumentParty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDocumentPartiesByShippingInstructionIDResponseValidationError{
				field:  "DocumentParty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDocumentPartiesByShippingInstructionIDResponseMultiError(errors)
	}

	return nil
}

// CreateDocumentPartiesByShippingInstructionIDResponseMultiError is an error
// wrapping multiple validation errors returned by
// CreateDocumentPartiesByShippingInstructionIDResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateDocumentPartiesByShippingInstructionIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentPartiesByShippingInstructionIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentPartiesByShippingInstructionIDResponseMultiError) AllErrors() []error { return m }

// CreateDocumentPartiesByShippingInstructionIDResponseValidationError is the
// validation error returned by
// CreateDocumentPartiesByShippingInstructionIDResponse.Validate if the
// designated constraints aren't met.
type CreateDocumentPartiesByShippingInstructionIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentPartiesByShippingInstructionIDResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateDocumentPartiesByShippingInstructionIDResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateDocumentPartiesByShippingInstructionIDResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CreateDocumentPartiesByShippingInstructionIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentPartiesByShippingInstructionIDResponseValidationError) ErrorName() string {
	return "CreateDocumentPartiesByShippingInstructionIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentPartiesByShippingInstructionIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentPartiesByShippingInstructionIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentPartiesByShippingInstructionIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentPartiesByShippingInstructionIDResponseValidationError{}

// Validate checks the field values on FetchDocumentPartiesByBookingIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FetchDocumentPartiesByBookingIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FetchDocumentPartiesByBookingIDRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// FetchDocumentPartiesByBookingIDRequestMultiError, or nil if none found.
func (m *FetchDocumentPartiesByBookingIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchDocumentPartiesByBookingIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookingId

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FetchDocumentPartiesByBookingIDRequestMultiError(errors)
	}

	return nil
}

// FetchDocumentPartiesByBookingIDRequestMultiError is an error wrapping
// multiple validation errors returned by
// FetchDocumentPartiesByBookingIDRequest.ValidateAll() if the designated
// constraints aren't met.
type FetchDocumentPartiesByBookingIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchDocumentPartiesByBookingIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchDocumentPartiesByBookingIDRequestMultiError) AllErrors() []error { return m }

// FetchDocumentPartiesByBookingIDRequestValidationError is the validation
// error returned by FetchDocumentPartiesByBookingIDRequest.Validate if the
// designated constraints aren't met.
type FetchDocumentPartiesByBookingIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchDocumentPartiesByBookingIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchDocumentPartiesByBookingIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchDocumentPartiesByBookingIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchDocumentPartiesByBookingIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchDocumentPartiesByBookingIDRequestValidationError) ErrorName() string {
	return "FetchDocumentPartiesByBookingIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchDocumentPartiesByBookingIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchDocumentPartiesByBookingIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchDocumentPartiesByBookingIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchDocumentPartiesByBookingIDRequestValidationError{}

// Validate checks the field values on FetchDocumentPartiesByBookingIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FetchDocumentPartiesByBookingIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FetchDocumentPartiesByBookingIDResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// FetchDocumentPartiesByBookingIDResponseMultiError, or nil if none found.
func (m *FetchDocumentPartiesByBookingIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchDocumentPartiesByBookingIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDocumentParties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchDocumentPartiesByBookingIDResponseValidationError{
						field:  fmt.Sprintf("DocumentParties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchDocumentPartiesByBookingIDResponseValidationError{
						field:  fmt.Sprintf("DocumentParties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchDocumentPartiesByBookingIDResponseValidationError{
					field:  fmt.Sprintf("DocumentParties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return FetchDocumentPartiesByBookingIDResponseMultiError(errors)
	}

	return nil
}

// FetchDocumentPartiesByBookingIDResponseMultiError is an error wrapping
// multiple validation errors returned by
// FetchDocumentPartiesByBookingIDResponse.ValidateAll() if the designated
// constraints aren't met.
type FetchDocumentPartiesByBookingIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchDocumentPartiesByBookingIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchDocumentPartiesByBookingIDResponseMultiError) AllErrors() []error { return m }

// FetchDocumentPartiesByBookingIDResponseValidationError is the validation
// error returned by FetchDocumentPartiesByBookingIDResponse.Validate if the
// designated constraints aren't met.
type FetchDocumentPartiesByBookingIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchDocumentPartiesByBookingIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchDocumentPartiesByBookingIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchDocumentPartiesByBookingIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchDocumentPartiesByBookingIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchDocumentPartiesByBookingIDResponseValidationError) ErrorName() string {
	return "FetchDocumentPartiesByBookingIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchDocumentPartiesByBookingIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchDocumentPartiesByBookingIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchDocumentPartiesByBookingIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchDocumentPartiesByBookingIDResponseValidationError{}

// Validate checks the field values on
// FetchDocumentPartiesByByShippingInstructionIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FetchDocumentPartiesByByShippingInstructionIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FetchDocumentPartiesByByShippingInstructionIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// FetchDocumentPartiesByByShippingInstructionIDRequestMultiError, or nil if
// none found.
func (m *FetchDocumentPartiesByByShippingInstructionIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchDocumentPartiesByByShippingInstructionIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShippingInstructionId

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return FetchDocumentPartiesByByShippingInstructionIDRequestMultiError(errors)
	}

	return nil
}

// FetchDocumentPartiesByByShippingInstructionIDRequestMultiError is an error
// wrapping multiple validation errors returned by
// FetchDocumentPartiesByByShippingInstructionIDRequest.ValidateAll() if the
// designated constraints aren't met.
type FetchDocumentPartiesByByShippingInstructionIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchDocumentPartiesByByShippingInstructionIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchDocumentPartiesByByShippingInstructionIDRequestMultiError) AllErrors() []error { return m }

// FetchDocumentPartiesByByShippingInstructionIDRequestValidationError is the
// validation error returned by
// FetchDocumentPartiesByByShippingInstructionIDRequest.Validate if the
// designated constraints aren't met.
type FetchDocumentPartiesByByShippingInstructionIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchDocumentPartiesByByShippingInstructionIDRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FetchDocumentPartiesByByShippingInstructionIDRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FetchDocumentPartiesByByShippingInstructionIDRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FetchDocumentPartiesByByShippingInstructionIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchDocumentPartiesByByShippingInstructionIDRequestValidationError) ErrorName() string {
	return "FetchDocumentPartiesByByShippingInstructionIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchDocumentPartiesByByShippingInstructionIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchDocumentPartiesByByShippingInstructionIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchDocumentPartiesByByShippingInstructionIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchDocumentPartiesByByShippingInstructionIDRequestValidationError{}

// Validate checks the field values on
// FetchDocumentPartiesByByShippingInstructionIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchDocumentPartiesByByShippingInstructionIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FetchDocumentPartiesByByShippingInstructionIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchDocumentPartiesByByShippingInstructionIDResponseMultiError, or nil if
// none found.
func (m *FetchDocumentPartiesByByShippingInstructionIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchDocumentPartiesByByShippingInstructionIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDocumentParties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchDocumentPartiesByByShippingInstructionIDResponseValidationError{
						field:  fmt.Sprintf("DocumentParties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchDocumentPartiesByByShippingInstructionIDResponseValidationError{
						field:  fmt.Sprintf("DocumentParties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchDocumentPartiesByByShippingInstructionIDResponseValidationError{
					field:  fmt.Sprintf("DocumentParties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return FetchDocumentPartiesByByShippingInstructionIDResponseMultiError(errors)
	}

	return nil
}

// FetchDocumentPartiesByByShippingInstructionIDResponseMultiError is an error
// wrapping multiple validation errors returned by
// FetchDocumentPartiesByByShippingInstructionIDResponse.ValidateAll() if the
// designated constraints aren't met.
type FetchDocumentPartiesByByShippingInstructionIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchDocumentPartiesByByShippingInstructionIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchDocumentPartiesByByShippingInstructionIDResponseMultiError) AllErrors() []error {
	return m
}

// FetchDocumentPartiesByByShippingInstructionIDResponseValidationError is the
// validation error returned by
// FetchDocumentPartiesByByShippingInstructionIDResponse.Validate if the
// designated constraints aren't met.
type FetchDocumentPartiesByByShippingInstructionIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchDocumentPartiesByByShippingInstructionIDResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FetchDocumentPartiesByByShippingInstructionIDResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FetchDocumentPartiesByByShippingInstructionIDResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FetchDocumentPartiesByByShippingInstructionIDResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e FetchDocumentPartiesByByShippingInstructionIDResponseValidationError) ErrorName() string {
	return "FetchDocumentPartiesByByShippingInstructionIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchDocumentPartiesByByShippingInstructionIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchDocumentPartiesByByShippingInstructionIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchDocumentPartiesByByShippingInstructionIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchDocumentPartiesByByShippingInstructionIDResponseValidationError{}

// Validate checks the field values on
// ResolveDocumentPartiesForShippingInstructionIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResolveDocumentPartiesForShippingInstructionIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ResolveDocumentPartiesForShippingInstructionIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResolveDocumentPartiesForShippingInstructionIDRequestMultiError, or nil if
// none found.
func (m *ResolveDocumentPartiesForShippingInstructionIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResolveDocumentPartiesForShippingInstructionIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShippingInstructionId

	// no validation rules for DocumentPartyId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return ResolveDocumentPartiesForShippingInstructionIDRequestMultiError(errors)
	}

	return nil
}

// ResolveDocumentPartiesForShippingInstructionIDRequestMultiError is an error
// wrapping multiple validation errors returned by
// ResolveDocumentPartiesForShippingInstructionIDRequest.ValidateAll() if the
// designated constraints aren't met.
type ResolveDocumentPartiesForShippingInstructionIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolveDocumentPartiesForShippingInstructionIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolveDocumentPartiesForShippingInstructionIDRequestMultiError) AllErrors() []error {
	return m
}

// ResolveDocumentPartiesForShippingInstructionIDRequestValidationError is the
// validation error returned by
// ResolveDocumentPartiesForShippingInstructionIDRequest.Validate if the
// designated constraints aren't met.
type ResolveDocumentPartiesForShippingInstructionIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveDocumentPartiesForShippingInstructionIDRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResolveDocumentPartiesForShippingInstructionIDRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResolveDocumentPartiesForShippingInstructionIDRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResolveDocumentPartiesForShippingInstructionIDRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ResolveDocumentPartiesForShippingInstructionIDRequestValidationError) ErrorName() string {
	return "ResolveDocumentPartiesForShippingInstructionIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveDocumentPartiesForShippingInstructionIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveDocumentPartiesForShippingInstructionIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveDocumentPartiesForShippingInstructionIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveDocumentPartiesForShippingInstructionIDRequestValidationError{}

// Validate checks the field values on
// ResolveDocumentPartiesForShippingInstructionIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResolveDocumentPartiesForShippingInstructionIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ResolveDocumentPartiesForShippingInstructionIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResolveDocumentPartiesForShippingInstructionIDResponseMultiError, or nil if
// none found.
func (m *ResolveDocumentPartiesForShippingInstructionIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResolveDocumentPartiesForShippingInstructionIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResolveDocumentPartiesForShippingInstructionIDResponseMultiError(errors)
	}

	return nil
}

// ResolveDocumentPartiesForShippingInstructionIDResponseMultiError is an error
// wrapping multiple validation errors returned by
// ResolveDocumentPartiesForShippingInstructionIDResponse.ValidateAll() if the
// designated constraints aren't met.
type ResolveDocumentPartiesForShippingInstructionIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolveDocumentPartiesForShippingInstructionIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolveDocumentPartiesForShippingInstructionIDResponseMultiError) AllErrors() []error {
	return m
}

// ResolveDocumentPartiesForShippingInstructionIDResponseValidationError is the
// validation error returned by
// ResolveDocumentPartiesForShippingInstructionIDResponse.Validate if the
// designated constraints aren't met.
type ResolveDocumentPartiesForShippingInstructionIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveDocumentPartiesForShippingInstructionIDResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResolveDocumentPartiesForShippingInstructionIDResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResolveDocumentPartiesForShippingInstructionIDResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResolveDocumentPartiesForShippingInstructionIDResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ResolveDocumentPartiesForShippingInstructionIDResponseValidationError) ErrorName() string {
	return "ResolveDocumentPartiesForShippingInstructionIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveDocumentPartiesForShippingInstructionIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveDocumentPartiesForShippingInstructionIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveDocumentPartiesForShippingInstructionIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveDocumentPartiesForShippingInstructionIDResponseValidationError{}

// Validate checks the field values on DocumentParty with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DocumentParty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentParty with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DocumentPartyMultiError, or
// nil if none found.
func (m *DocumentParty) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentParty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDocumentPartyD()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentPartyValidationError{
					field:  "DocumentPartyD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentPartyValidationError{
					field:  "DocumentPartyD",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDocumentPartyD()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentPartyValidationError{
				field:  "DocumentPartyD",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentPartyValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentPartyValidationError{
					field:  "CrUpdUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentPartyValidationError{
				field:  "CrUpdUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrUpdTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentPartyValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentPartyValidationError{
					field:  "CrUpdTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrUpdTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentPartyValidationError{
				field:  "CrUpdTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DocumentPartyMultiError(errors)
	}

	return nil
}

// DocumentPartyMultiError is an error wrapping multiple validation errors
// returned by DocumentParty.ValidateAll() if the designated constraints
// aren't met.
type DocumentPartyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentPartyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentPartyMultiError) AllErrors() []error { return m }

// DocumentPartyValidationError is the validation error returned by
// DocumentParty.Validate if the designated constraints aren't met.
type DocumentPartyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentPartyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentPartyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentPartyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentPartyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentPartyValidationError) ErrorName() string { return "DocumentPartyValidationError" }

// Error satisfies the builtin error interface
func (e DocumentPartyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentParty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentPartyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentPartyValidationError{}

// Validate checks the field values on DocumentPartyD with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DocumentPartyD) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentPartyD with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DocumentPartyDMultiError,
// or nil if none found.
func (m *DocumentPartyD) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentPartyD) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for PartyId

	// no validation rules for ShippingInstructionId

	// no validation rules for ShipmentId

	// no validation rules for PartyFunction

	// no validation rules for IsToBeNotified

	// no validation rules for BookingId

	if len(errors) > 0 {
		return DocumentPartyDMultiError(errors)
	}

	return nil
}

// DocumentPartyDMultiError is an error wrapping multiple validation errors
// returned by DocumentPartyD.ValidateAll() if the designated constraints
// aren't met.
type DocumentPartyDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentPartyDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentPartyDMultiError) AllErrors() []error { return m }

// DocumentPartyDValidationError is the validation error returned by
// DocumentPartyD.Validate if the designated constraints aren't met.
type DocumentPartyDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentPartyDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentPartyDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentPartyDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentPartyDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentPartyDValidationError) ErrorName() string { return "DocumentPartyDValidationError" }

// Error satisfies the builtin error interface
func (e DocumentPartyDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentPartyD.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentPartyDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentPartyDValidationError{}
