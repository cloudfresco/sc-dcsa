// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: party/v1/location.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLocationRequestMultiError, or nil if none found.
func (m *CreateLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LocationName

	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for FacilitySmdgCode

	// no validation rules for UnLocationCode

	// no validation rules for AddressId

	// no validation rules for FacilityId

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return CreateLocationRequestMultiError(errors)
	}

	return nil
}

// CreateLocationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateLocationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLocationRequestMultiError) AllErrors() []error { return m }

// CreateLocationRequestValidationError is the validation error returned by
// CreateLocationRequest.Validate if the designated constraints aren't met.
type CreateLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLocationRequestValidationError) ErrorName() string {
	return "CreateLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLocationRequestValidationError{}

// Validate checks the field values on CreateLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLocationResponseMultiError, or nil if none found.
func (m *CreateLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLocationResponseValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLocationResponseValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLocationResponseValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateLocationResponseMultiError(errors)
	}

	return nil
}

// CreateLocationResponseMultiError is an error wrapping multiple validation
// errors returned by CreateLocationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLocationResponseMultiError) AllErrors() []error { return m }

// CreateLocationResponseValidationError is the validation error returned by
// CreateLocationResponse.Validate if the designated constraints aren't met.
type CreateLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLocationResponseValidationError) ErrorName() string {
	return "CreateLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLocationResponseValidationError{}

// Validate checks the field values on LoadLocationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadLocationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadLocationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadLocationsResponseMultiError, or nil if none found.
func (m *LoadLocationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadLocationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLocations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadLocationsResponseValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadLocationsResponseValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadLocationsResponseValidationError{
					field:  fmt.Sprintf("Locations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return LoadLocationsResponseMultiError(errors)
	}

	return nil
}

// LoadLocationsResponseMultiError is an error wrapping multiple validation
// errors returned by LoadLocationsResponse.ValidateAll() if the designated
// constraints aren't met.
type LoadLocationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadLocationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadLocationsResponseMultiError) AllErrors() []error { return m }

// LoadLocationsResponseValidationError is the validation error returned by
// LoadLocationsResponse.Validate if the designated constraints aren't met.
type LoadLocationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadLocationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadLocationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadLocationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadLocationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadLocationsResponseValidationError) ErrorName() string {
	return "LoadLocationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoadLocationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadLocationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadLocationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadLocationsResponseValidationError{}

// Validate checks the field values on LoadLocationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadLocationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadLocationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadLocationsRequestMultiError, or nil if none found.
func (m *LoadLocationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadLocationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for NextCursor

	// no validation rules for UserEmail

	// no validation rules for RequestId

	if len(errors) > 0 {
		return LoadLocationsRequestMultiError(errors)
	}

	return nil
}

// LoadLocationsRequestMultiError is an error wrapping multiple validation
// errors returned by LoadLocationsRequest.ValidateAll() if the designated
// constraints aren't met.
type LoadLocationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadLocationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadLocationsRequestMultiError) AllErrors() []error { return m }

// LoadLocationsRequestValidationError is the validation error returned by
// LoadLocationsRequest.Validate if the designated constraints aren't met.
type LoadLocationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadLocationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadLocationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadLocationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadLocationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadLocationsRequestValidationError) ErrorName() string {
	return "LoadLocationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadLocationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadLocationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadLocationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadLocationsRequestValidationError{}

// Validate checks the field values on FetchLocationByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchLocationByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchLocationByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchLocationByIDRequestMultiError, or nil if none found.
func (m *FetchLocationByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchLocationByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGetByIdRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FetchLocationByIDRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FetchLocationByIDRequestValidationError{
					field:  "GetByIdRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGetByIdRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FetchLocationByIDRequestValidationError{
				field:  "GetByIdRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FetchLocationByIDRequestMultiError(errors)
	}

	return nil
}

// FetchLocationByIDRequestMultiError is an error wrapping multiple validation
// errors returned by FetchLocationByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type FetchLocationByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchLocationByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchLocationByIDRequestMultiError) AllErrors() []error { return m }

// FetchLocationByIDRequestValidationError is the validation error returned by
// FetchLocationByIDRequest.Validate if the designated constraints aren't met.
type FetchLocationByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchLocationByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchLocationByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchLocationByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchLocationByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchLocationByIDRequestValidationError) ErrorName() string {
	return "FetchLocationByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchLocationByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchLocationByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchLocationByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchLocationByIDRequestValidationError{}

// Validate checks the field values on FetchLocationByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchLocationByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchLocationByIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchLocationByIDResponseMultiError, or nil if none found.
func (m *FetchLocationByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchLocationByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FetchLocationByIDResponseValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FetchLocationByIDResponseValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FetchLocationByIDResponseValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FetchLocationByIDResponseMultiError(errors)
	}

	return nil
}

// FetchLocationByIDResponseMultiError is an error wrapping multiple validation
// errors returned by FetchLocationByIDResponse.ValidateAll() if the
// designated constraints aren't met.
type FetchLocationByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchLocationByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchLocationByIDResponseMultiError) AllErrors() []error { return m }

// FetchLocationByIDResponseValidationError is the validation error returned by
// FetchLocationByIDResponse.Validate if the designated constraints aren't met.
type FetchLocationByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchLocationByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchLocationByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchLocationByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchLocationByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchLocationByIDResponseValidationError) ErrorName() string {
	return "FetchLocationByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchLocationByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchLocationByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchLocationByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchLocationByIDResponseValidationError{}

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Location with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocationMultiError, or nil
// if none found.
func (m *Location) ValidateAll() error {
	return m.validate(true)
}

func (m *Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid4

	// no validation rules for IdS

	// no validation rules for LocationName

	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for FacilitySmdgCode

	// no validation rules for UnLocationCode

	// no validation rules for AddressId

	// no validation rules for FacilityId

	if len(errors) > 0 {
		return LocationMultiError(errors)
	}

	return nil
}

// LocationMultiError is an error wrapping multiple validation errors returned
// by Location.ValidateAll() if the designated constraints aren't met.
type LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationMultiError) AllErrors() []error { return m }

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}
